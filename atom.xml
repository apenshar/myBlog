<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Apen Shar&#39;s Tech Blog</title>
  
  <subtitle>你的Bug由我来守护</subtitle>
  <link href="/myBlog/atom.xml" rel="self"/>
  
  <link href="https://apenshar.github.io/myBlog/"/>
  <updated>2018-02-10T09:08:32.416Z</updated>
  <id>https://apenshar.github.io/myBlog/</id>
  
  <author>
    <name>Apen Shar</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>一个基于本地浏览器的笔记本</title>
    <link href="https://apenshar.github.io/myBlog/2018-02-10-HTML-Notepad.html"/>
    <id>https://apenshar.github.io/myBlog/2018-02-10-HTML-Notepad.html</id>
    <published>2018-02-10T08:27:19.000Z</published>
    <updated>2018-02-10T09:08:32.416Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Write-Before"><a href="#Write-Before" class="headerlink" title="Write Before"></a>Write Before</h2><blockquote><p>上班时候闲逛发现了一种新的笔记本，打开浏览器，就可以快速记下东西了，秒开哦~:)，快保存为书签吧 </p></blockquote><h2 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h2><p>Sometimes I just need to type garbage. Just to clear out my mind. Using editors to type such gibberish annoys me because it clutters my project workspace (I’m picky, I know).</p><p>So I do this. Since I live in the browser, I just open a new tab and type in the url tab.</p><p><strong>来一个最简单的写法</strong><br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">data:text/html, <span class="tag">&lt;<span class="name">html</span> <span class="attr">contenteditable</span>&gt;</span></span><br><span class="line"></span><br><span class="line">data:text/html, <span class="tag">&lt;<span class="name">textarea</span> <span class="attr">style</span>=<span class="string">"font-size: 1.5em; width: 100%; height: 100%; border: none; outline: none"</span> <span class="attr">autofocus</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">data:text/html, <span class="tag">&lt;<span class="name">title</span>&gt;</span>Text Editor<span class="tag">&lt;/<span class="name">title</span>&gt;</span><span class="tag">&lt;<span class="name">body</span> <span class="attr">contenteditable</span> <span class="attr">style</span>=<span class="string">"font-size:2rem;line-height:1.4;max-width:60rem;margin:0 auto;padding:4rem;"</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p><strong>纯白代码风格笔记本</strong><br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">data:text/html;charset=utf-8, <span class="tag">&lt;<span class="name">title</span>&gt;</span>TextEditor<span class="tag">&lt;/<span class="name">title</span>&gt;</span><span class="tag">&lt;<span class="name">body</span> <span class="attr">contenteditable</span> <span class="attr">style</span>=<span class="string">"font-size:2rem;font-family:monaco;line-height:1.4;max-width:60rem;margin:0 auto;padding:4rem;"</span> <span class="attr">spellcheck</span>=<span class="string">"false"</span>&gt;</span><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Text Editor<span class="tag">&lt;/<span class="name">h1</span>&gt;</span><span class="tag">&lt;<span class="name">p</span>&gt;</span>Start Here.<span class="tag">&lt;<span class="name">pre</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p><strong>清新白色笔记本（带背景图 ）</strong><br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">data:text/html;charset=utf-8, <span class="tag">&lt;<span class="name">title</span>&gt;</span>TextEditor<span class="tag">&lt;/<span class="name">title</span>&gt;</span> <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"shortcut icon"</span> <span class="attr">href</span>=<span class="string">"http://g.etfv.co/https://docs.google.com"</span>/&gt;</span> <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"> html&#123;height: 100%;&#125; body&#123;background: -webkit-linear-gradient(#f0f0f0, #fff); padding: 3%; height: 94%;&#125; .paper &#123; font: normal 12px/1.5 "Lucida Grande", arial, sans-serif; width: 50%; height: 80%; margin: 0 auto; padding: 6px 5px 4px 42px; position: relative; color: #444; line-height: 20px; border: 1px solid #d2d2d2; background: #fff; background: -webkit-gradient(linear, 0 0, 0 100%, from(#d9eaf3), color-stop(4%, #fff)) 0 4px; background: -webkit-linear-gradient(top, #d9eaf3 0%, #fff 8%) 0 4px; background: -moz-linear-gradient(top, #d9eaf3 0%, #fff 8%) 0 4px; background: -ms-linear-gradient(top, #d9eaf3 0%, #fff 8%) 0 4px; background: -o-linear-gradient(top, #d9eaf3 0%, #fff 8%) 0 4px; background: linear-gradient(top, #d9eaf3 0%, #fff 8%) 0 4px; -webkit-background-size: 100% 20px; -moz-background-size: 100% 20px; -ms-background-size: 100% 20px; -o-background-size: 100% 20px; background-size: 100% 20px; -webkit-border-radius: 3px; -moz-border-radius: 3px; border-radius: 3px; -webkit-box-shadow: 0 1px 2px rgba(0,0,0,0.07); -moz-box-shadow: 0 1px 2px rgba(0,0,0,0.07); box-shadow: 0 1px 2px rgba(0,0,0,0.07); &#125; .paper::before &#123; content: ''; position: absolute; width: 4px; top: 0; left: 30px; bottom: 0; border: 1px solid; border-color: transparent #efe4e4; &#125; textarea&#123;display: block; width:94%;margin:0 auto;padding:3.8% 3%; border: none; outline: none; height: 94%; background: transparent; line-height: 20px;&#125; </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span> <span class="tag">&lt;<span class="name">body</span> <span class="attr">spellcheck</span>=<span class="string">"false"</span>&gt;</span> <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"paper"</span>&gt;</span> <span class="tag">&lt;<span class="name">textarea</span> <span class="attr">autofocus</span>=<span class="string">"autofocus"</span>&gt;</span><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span> <span class="tag">&lt;/<span class="name">div</span>&gt;</span> <span class="tag">&lt;/<span class="name">body</span>&gt;</span> <span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p><strong>黑绿极客风</strong><br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">data:text/html, <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined">html,body&#123;margin: 0; padding: 0;&#125;</span><span class="tag">&lt;/<span class="name">style</span>&gt;</span><span class="tag">&lt;<span class="name">textarea</span> <span class="attr">style</span>=<span class="string">"font-size: 1.5em; line-height: 1.5em; background: %23000; color: %233a3; width: 100%; height: 100%; border: none; outline: none; margin: 0; padding: 90px;"</span> <span class="attr">autofocus</span> <span class="attr">placeholder</span>=<span class="string">"wake up Neo..."</span> /&gt;</span></span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Write-Before&quot;&gt;&lt;a href=&quot;#Write-Before&quot; class=&quot;headerlink&quot; title=&quot;Write Before&quot;&gt;&lt;/a&gt;Write Before&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;上班时候闲逛发现了一种新的笔记本，
      
    
    </summary>
    
    
      <category term="js" scheme="https://apenshar.github.io/myBlog/tags/js/"/>
    
      <category term="codepen" scheme="https://apenshar.github.io/myBlog/tags/codepen/"/>
    
  </entry>
  
  <entry>
    <title>C++超度指南第三弹--类</title>
    <link href="https://apenshar.github.io/myBlog/2018-02-10-CPP-learn03.html"/>
    <id>https://apenshar.github.io/myBlog/2018-02-10-CPP-learn03.html</id>
    <published>2018-02-10T06:05:14.000Z</published>
    <updated>2018-02-10T09:20:08.986Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>这一节我将会粗略介绍C++中的类(class)以及类的多态性。</p></blockquote><h3 id="C-类定义"><a href="#C-类定义" class="headerlink" title="C++ 类定义"></a>C++ 类定义</h3><p>定义一个类，本质上是定义一个数据类型的蓝图。这实际上并没有定义任何数据，但是它定义了类的对象包括了什么，以及可以在这个对象上执行哪些操作。因此可以归结为：</p><p><strong>类是具有相同属性和服务的一组对象的集合，它为属于该类的全部对象提供了一个统一的抽象描述。<br></strong><br><strong>在C++中，类是面向对象程序最基本的单元。</strong></p><p>类包含以下3种类型： </p><ul><li>private：私有类型包含数据和函数，在private关键字后面声明。如果省略private关键字，则必须紧跟在类名的后面声明。在类中声明的数据和函数如果不特别指明，都被视为私有类型。私有类型的数据值允许类本身声明的函数对其进行存取，而类的外部的任何函数都不能访问。 </li><li>public：公有类型public关键字后面声明，他们是类与外部的接口，任何外部函数都可以访问公有类的数据和函数。 </li><li>protect：保护类型用于类的继承，当类的成员被声明为protect时，从类的外部就不能对其进行访问。<br>类时面向对象程序最基本的单元。在设计面向对象程序时，首先要以类的方式设计实际待解决的问题，也就是将问题索要处理的数据定义成类的私有或公有类型数据，同时将处理问题的方法定义成类的公有或私有成员函数。</li></ul><p>是不是和JS中的<code>class</code>很相似:=)，温习一下，JS中<code>class</code>的3种方法:构造方法，静态方法 和原型方法。哈哈哈，总的说，自然界中设计模式都是共通的！不扯了，看代码，下面写一个简单的拥有计算面积功能的Box <code>class</code><br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Box</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">   <span class="keyword">public</span>:</span><br><span class="line">      <span class="keyword">double</span> length;   <span class="comment">// 长度</span></span><br><span class="line">      <span class="keyword">double</span> breadth;  <span class="comment">// 宽度</span></span><br><span class="line">      <span class="keyword">double</span> height;   <span class="comment">// 高度</span></span><br><span class="line">&#125;;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">( )</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">   Box Box1;        <span class="comment">// 声明 Box1，类型为 Box</span></span><br><span class="line">   Box Box2;        <span class="comment">// 声明 Box2，类型为 Box</span></span><br><span class="line">   <span class="keyword">double</span> volume = <span class="number">0.0</span>;     <span class="comment">// 用于存储体积</span></span><br><span class="line"> </span><br><span class="line">   <span class="comment">// box 1 详述</span></span><br><span class="line">   Box1.height = <span class="number">5.0</span>; </span><br><span class="line">   Box1.length = <span class="number">6.0</span>; </span><br><span class="line">   Box1.breadth = <span class="number">7.0</span>;</span><br><span class="line"> </span><br><span class="line">   <span class="comment">// box 2 详述</span></span><br><span class="line">   Box2.height = <span class="number">10.0</span>;</span><br><span class="line">   Box2.length = <span class="number">12.0</span>;</span><br><span class="line">   Box2.breadth = <span class="number">13.0</span>;</span><br><span class="line"> </span><br><span class="line">   <span class="comment">// box 1 的体积</span></span><br><span class="line">   volume = Box1.height * Box1.length * Box1.breadth;</span><br><span class="line">   <span class="built_in">cout</span> &lt;&lt; <span class="string">"Box1 的体积："</span> &lt;&lt; volume &lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"> </span><br><span class="line">   <span class="comment">// box 2 的体积</span></span><br><span class="line">   volume = Box2.height * Box2.length * Box2.breadth;</span><br><span class="line">   <span class="built_in">cout</span> &lt;&lt; <span class="string">"Box2 的体积："</span> &lt;&lt; volume &lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">   <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>outpt:<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Box1 的体积：<span class="number">210</span></span><br><span class="line">Box2 的体积：<span class="number">1560</span></span><br></pre></td></tr></table></figure></p><h3 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h3><p>多态性是指类中具有相似功能的不同函数使用同一个名称实现。这里我举个形象点的例子，我们对鸡鸭狗发出“叫”的指令，它们收到后都会发出声音，只不过叫声不一样而已，鸡发出的声音是叩叩叩，鸭是嘎嘎嘎，狗是汪汪汪，这样是不是好懂多了++)</p><h3 id="联编"><a href="#联编" class="headerlink" title="联编"></a>联编</h3><p>多态性的实现与联编有关。将一个函数的调用与其相应的函数体代码相链接的过程，成为函数联编。<br><strong>编译时的多态性是通过静态联编来实现的。</strong>静态联编是指在调用同名函数时，编译器将根据调用时所使用的实际参数个数、类型的不同确定应该调用哪一个函数的实现，它是在程序编译阶段就确定下来的多态性。静态联编通过使用重载机制来获得，重载机制包括函数重载和运算符重载。</p><h2 id="Donate"><a href="#Donate" class="headerlink" title="Donate"></a>Donate</h2><p>Buy me a coffee if you like my blog :)<br>Buymeacoffee: <a href="https://buymeacoff.ee/apen" target="_blank" rel="noopener">https://buymeacoff.ee/apen</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;这一节我将会粗略介绍C++中的类(class)以及类的多态性。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;C-类定义&quot;&gt;&lt;a href=&quot;#C-类定义&quot; class=&quot;headerlink&quot; title=&quot;C++ 类定义&quot;&gt;&lt;/a&gt;C++
      
    
    </summary>
    
    
      <category term="cpp" scheme="https://apenshar.github.io/myBlog/tags/cpp/"/>
    
  </entry>
  
  <entry>
    <title>C++超度指南第二弹--指针</title>
    <link href="https://apenshar.github.io/myBlog/2018-02-10-CPP-learn02.html"/>
    <id>https://apenshar.github.io/myBlog/2018-02-10-CPP-learn02.html</id>
    <published>2018-02-10T05:18:28.000Z</published>
    <updated>2018-02-10T10:28:08.807Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>这一节我会详细介绍C++中指针和引用以及他们的区别，总的来说，难度还不太高，屏上得来终觉浅，看完文章后不妨多练练吧-:)</p></blockquote><h3 id="C-指针"><a href="#C-指针" class="headerlink" title="C++ 指针"></a>C++ 指针</h3><p>每一个变量都有一个内存位置，每一个内存位置都定义了可使用连字号（&amp;）运算符访问的地址，它表示了在内存中的一个地址。请看下面的实例，它将输出定义的变量地址<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">   <span class="keyword">int</span>  var1;</span><br><span class="line">   <span class="keyword">char</span> var2[<span class="number">10</span>];</span><br><span class="line"> </span><br><span class="line">   <span class="built_in">cout</span> &lt;&lt; <span class="string">"var1 变量的地址： "</span>;</span><br><span class="line">   <span class="built_in">cout</span> &lt;&lt; &amp;var1 &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"> </span><br><span class="line">   <span class="built_in">cout</span> &lt;&lt; <span class="string">"var2 变量的地址： "</span>;</span><br><span class="line">   <span class="built_in">cout</span> &lt;&lt; &amp;var2 &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"> </span><br><span class="line">   <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>output:<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var1 变量的地址： <span class="number">0x7ffda779001c</span></span><br><span class="line">var2 变量的地址： <span class="number">0x7ffda7790012</span></span><br></pre></td></tr></table></figure></p><p>指针是一个变量，其值为另一个变量的地址，即，内存位置的直接地址。就像其他变量或常量一样，您必须在使用指针存储其他变量地址之前，对其进行声明。指针变量声明的一般形式为：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#type *var-name;</span></span><br><span class="line"><span class="keyword">int</span>    *ip;    <span class="comment">/* 一个整型的指针 */</span></span><br><span class="line"><span class="keyword">double</span> *dp;    <span class="comment">/* 一个 double 型的指针 */</span></span><br><span class="line"><span class="keyword">float</span>  *fp;    <span class="comment">/* 一个浮点型的指针 */</span></span><br><span class="line"><span class="keyword">char</span>   *ch;    <span class="comment">/* 一个字符型的指针 */</span></span><br></pre></td></tr></table></figure></p><p>所有指针的值的实际数据类型，不管是整型、浮点型、字符型，还是其他的数据类型，都是一样的，都是一个代表内存地址的长的十六进制数。<br>使用实例<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">   <span class="keyword">int</span>  var = <span class="number">20</span>;   <span class="comment">// 实际变量的声明</span></span><br><span class="line">   <span class="keyword">int</span>  *ip;        <span class="comment">// 指针变量的声明</span></span><br><span class="line"> </span><br><span class="line">   ip = &amp;var;       <span class="comment">// 在指针变量中存储 var 的地址</span></span><br><span class="line"> </span><br><span class="line">   <span class="built_in">cout</span> &lt;&lt; <span class="string">"Value of var variable: "</span>;</span><br><span class="line">   <span class="built_in">cout</span> &lt;&lt; var &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"> </span><br><span class="line">   <span class="comment">// 输出在指针变量中存储的地址</span></span><br><span class="line">   <span class="built_in">cout</span> &lt;&lt; <span class="string">"Address stored in ip variable: "</span>;</span><br><span class="line">   <span class="built_in">cout</span> &lt;&lt; ip &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"> </span><br><span class="line">   <span class="comment">// 访问指针中地址的值</span></span><br><span class="line">   <span class="built_in">cout</span> &lt;&lt; <span class="string">"Value of *ip variable: "</span>;</span><br><span class="line">   <span class="built_in">cout</span> &lt;&lt; *ip &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"> </span><br><span class="line">   <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>output：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Value of var variable: <span class="number">20</span></span><br><span class="line">Address stored in ip variable: <span class="number">0xbfc601ac</span></span><br><span class="line">Value of *ip variable: <span class="number">20</span></span><br></pre></td></tr></table></figure></p><h3 id="C-数据结构"><a href="#C-数据结构" class="headerlink" title="　C++ 数据结构"></a>　C++ 数据结构</h3><p>C/C++ 数组允许定义可存储相同类型数据项的变量，但是结构是 C++ 中另一种用户自定义的可用的数据类型，它允许您存储不同类型的数据项。</p><blockquote><p>1.基本写法</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 声明一个结构体类型 Books </span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Books</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">   <span class="keyword">char</span>  title[<span class="number">50</span>];</span><br><span class="line">   <span class="keyword">char</span>  author[<span class="number">50</span>];</span><br><span class="line">   <span class="keyword">char</span>  subject[<span class="number">100</span>];</span><br><span class="line">   <span class="keyword">int</span>   book_id;</span><br><span class="line">&#125;;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">( )</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">   Books Book1;        <span class="comment">// 定义结构体类型 Books 的变量 Book1</span></span><br><span class="line">   Books Book2;        <span class="comment">// 定义结构体类型 Books 的变量 Book2</span></span><br><span class="line"> </span><br><span class="line">   <span class="comment">// Book1 详述</span></span><br><span class="line">   <span class="built_in">strcpy</span>( Book1.title, <span class="string">"C++ 教程"</span>);</span><br><span class="line">   <span class="built_in">strcpy</span>( Book1.author, <span class="string">"Runoob"</span>); </span><br><span class="line">   <span class="built_in">strcpy</span>( Book1.subject, <span class="string">"编程语言"</span>);</span><br><span class="line">   Book1.book_id = <span class="number">12345</span>;</span><br><span class="line"> </span><br><span class="line">   <span class="comment">// Book2 详述</span></span><br><span class="line">   <span class="built_in">strcpy</span>( Book2.title, <span class="string">"CSS 教程"</span>);</span><br><span class="line">   <span class="built_in">strcpy</span>( Book2.author, <span class="string">"Runoob"</span>);</span><br><span class="line">   <span class="built_in">strcpy</span>( Book2.subject, <span class="string">"前端技术"</span>);</span><br><span class="line">   Book2.book_id = <span class="number">12346</span>;</span><br><span class="line"> </span><br><span class="line">   <span class="comment">// 输出 Book1 信息</span></span><br><span class="line">   <span class="built_in">cout</span> &lt;&lt; <span class="string">"第一本书标题 : "</span> &lt;&lt; Book1.title &lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">   <span class="built_in">cout</span> &lt;&lt; <span class="string">"第一本书作者 : "</span> &lt;&lt; Book1.author &lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">   <span class="built_in">cout</span> &lt;&lt; <span class="string">"第一本书类目 : "</span> &lt;&lt; Book1.subject &lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">   <span class="built_in">cout</span> &lt;&lt; <span class="string">"第一本书 ID : "</span> &lt;&lt; Book1.book_id &lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"> </span><br><span class="line">   <span class="comment">// 输出 Book2 信息</span></span><br><span class="line">   <span class="built_in">cout</span> &lt;&lt; <span class="string">"第二本书标题 : "</span> &lt;&lt; Book2.title &lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">   <span class="built_in">cout</span> &lt;&lt; <span class="string">"第二本书作者 : "</span> &lt;&lt; Book2.author &lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">   <span class="built_in">cout</span> &lt;&lt; <span class="string">"第二本书类目 : "</span> &lt;&lt; Book2.subject &lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">   <span class="built_in">cout</span> &lt;&lt; <span class="string">"第二本书 ID : "</span> &lt;&lt; Book2.book_id &lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"> </span><br><span class="line">   <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>output：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">第一本书标题 : C++ 教程</span><br><span class="line">第一本书作者 : Runoob</span><br><span class="line">第一本书类目 : 编程语言</span><br><span class="line">第一本书 ID : <span class="number">12345</span></span><br><span class="line">第二本书标题 : CSS 教程</span><br><span class="line">第二本书作者 : Runoob</span><br><span class="line">第二本书类目 : 前端技术</span><br><span class="line">第二本书 ID : <span class="number">12346</span></span><br></pre></td></tr></table></figure></p><blockquote><p>2.结构作为函数参数<br>你也可以把结构作为函数参数，传参方式与其他类型的变量或指针类似。可以使用上面实例中的方式来访问结构变量：</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printBook</span><span class="params">( struct Books book )</span></span>;</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 声明一个结构体类型 Books </span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Books</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">   <span class="keyword">char</span>  title[<span class="number">50</span>];</span><br><span class="line">   <span class="keyword">char</span>  author[<span class="number">50</span>];</span><br><span class="line">   <span class="keyword">char</span>  subject[<span class="number">100</span>];</span><br><span class="line">   <span class="keyword">int</span>   book_id;</span><br><span class="line">&#125;;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">( )</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">   Books Book1;        <span class="comment">// 定义结构体类型 Books 的变量 Book1</span></span><br><span class="line">   Books Book2;        <span class="comment">// 定义结构体类型 Books 的变量 Book2</span></span><br><span class="line"> </span><br><span class="line">    <span class="comment">// Book1 详述</span></span><br><span class="line">   <span class="built_in">strcpy</span>( Book1.title, <span class="string">"C++ 教程"</span>);</span><br><span class="line">   <span class="built_in">strcpy</span>( Book1.author, <span class="string">"Runoob"</span>); </span><br><span class="line">   <span class="built_in">strcpy</span>( Book1.subject, <span class="string">"编程语言"</span>);</span><br><span class="line">   Book1.book_id = <span class="number">12345</span>;</span><br><span class="line"> </span><br><span class="line">   <span class="comment">// Book2 详述</span></span><br><span class="line">   <span class="built_in">strcpy</span>( Book2.title, <span class="string">"CSS 教程"</span>);</span><br><span class="line">   <span class="built_in">strcpy</span>( Book2.author, <span class="string">"Runoob"</span>);</span><br><span class="line">   <span class="built_in">strcpy</span>( Book2.subject, <span class="string">"前端技术"</span>);</span><br><span class="line">   Book2.book_id = <span class="number">12346</span>;</span><br><span class="line"> </span><br><span class="line">   <span class="comment">// 输出 Book1 信息</span></span><br><span class="line">   printBook( Book1 );</span><br><span class="line"> </span><br><span class="line">   <span class="comment">// 输出 Book2 信息</span></span><br><span class="line">   printBook( Book2 );</span><br><span class="line"> </span><br><span class="line">   <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">copyBook</span><span class="params">(struct Books book,<span class="keyword">char</span> title,<span class="keyword">char</span> author)</span></span>&#123;</span><br><span class="line">    <span class="built_in">strcpy</span>(book.title,title);</span><br><span class="line">    <span class="built_in">strcpy</span>(book.author,author);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printBook</span><span class="params">( struct Books book )</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">   <span class="built_in">cout</span> &lt;&lt; <span class="string">"书标题 : "</span> &lt;&lt; book.title &lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">   <span class="built_in">cout</span> &lt;&lt; <span class="string">"书作者 : "</span> &lt;&lt; book.author &lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">   <span class="built_in">cout</span> &lt;&lt; <span class="string">"书类目 : "</span> &lt;&lt; book.subject &lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">   <span class="built_in">cout</span> &lt;&lt; <span class="string">"书 ID : "</span> &lt;&lt; book.book_id &lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>output:<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">书标题 : C++ 教程</span><br><span class="line">书作者 : Runoob</span><br><span class="line">书类目 : 编程语言</span><br><span class="line">书 ID : <span class="number">12345</span></span><br><span class="line">书标题 : CSS 教程</span><br><span class="line">书作者 : Runoob</span><br><span class="line">书类目 : 前端技术</span><br><span class="line">书 ID : <span class="number">12346</span></span><br></pre></td></tr></table></figure></p><blockquote><p>3.指向结构的指针<br>这里我们用到了-&gt; 操作符，-&gt;操作符是用于带成员的类型对应指针上，用来提取成员变量或函数用的。</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Books</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">   <span class="keyword">char</span>  title[<span class="number">50</span>];</span><br><span class="line">   <span class="keyword">char</span>  author[<span class="number">50</span>];</span><br><span class="line">   <span class="keyword">char</span>  subject[<span class="number">100</span>];</span><br><span class="line">   <span class="keyword">int</span>   book_id;</span><br><span class="line">&#125;;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">( )</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">   Books Book1;        <span class="comment">// 定义结构体类型 Books 的变量 Book1</span></span><br><span class="line">   Books Book2;        <span class="comment">// 定义结构体类型 Books 的变量 Book2</span></span><br><span class="line"> </span><br><span class="line">    <span class="comment">// Book1 详述</span></span><br><span class="line">   <span class="built_in">strcpy</span>( Book1.title, <span class="string">"C++ 教程"</span>);</span><br><span class="line">   <span class="built_in">strcpy</span>( Book1.author, <span class="string">"Runoob"</span>); </span><br><span class="line">   <span class="built_in">strcpy</span>( Book1.subject, <span class="string">"编程语言"</span>);</span><br><span class="line">   Book1.book_id = <span class="number">12345</span>;</span><br><span class="line"> </span><br><span class="line">   <span class="comment">// Book2 详述</span></span><br><span class="line">   <span class="built_in">strcpy</span>( Book2.title, <span class="string">"CSS 教程"</span>);</span><br><span class="line">   <span class="built_in">strcpy</span>( Book2.author, <span class="string">"Runoob"</span>);</span><br><span class="line">   <span class="built_in">strcpy</span>( Book2.subject, <span class="string">"前端技术"</span>);</span><br><span class="line">   Book2.book_id = <span class="number">12346</span>;</span><br><span class="line"> </span><br><span class="line">   <span class="comment">// 通过传 Book1 的地址来输出 Book1 信息</span></span><br><span class="line">   printBook( &amp;Book1 );</span><br><span class="line"> </span><br><span class="line">   <span class="comment">// 通过传 Book2 的地址来输出 Book2 信息</span></span><br><span class="line">   printBook( &amp;Book2 );</span><br><span class="line"> </span><br><span class="line">   <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 该函数以结构指针作为参数</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printBook</span><span class="params">( struct Books *book )</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">   <span class="built_in">cout</span> &lt;&lt; <span class="string">"书标题  : "</span> &lt;&lt; book-&gt;title &lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">   <span class="built_in">cout</span> &lt;&lt; <span class="string">"书作者 : "</span> &lt;&lt; book-&gt;author &lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">   <span class="built_in">cout</span> &lt;&lt; <span class="string">"书类目 : "</span> &lt;&lt; book-&gt;subject &lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">   <span class="built_in">cout</span> &lt;&lt; <span class="string">"书 ID : "</span> &lt;&lt; book-&gt;book_id &lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>output：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">书标题  : C++ 教程</span><br><span class="line">书作者 : Runoob</span><br><span class="line">书类目 : 编程语言</span><br><span class="line">书 ID : <span class="number">12345</span></span><br><span class="line">书标题  : CSS 教程</span><br><span class="line">书作者 : Runoob</span><br><span class="line">书类目 : 前端技术</span><br><span class="line">书 ID : <span class="number">12346</span></span><br></pre></td></tr></table></figure></p><blockquote><p> 4.struct扩展</p></blockquote><p>C++ 中的 struct 对 C 中的 struct 进行了扩充，它已经不再只是一个包含不同数据类型的数据结构了，它已经获取了太多的功能。<br>struct 能包含成员函数吗？ 能！<br>struct 能继承吗？ 能！！<br>struct 能实现多态吗？ 能！！！<br>既然这些它都能实现，那它和 class 还能有什么区别？<br>最本质的一个区别就是默认的访问控制，体现在两个方面：<br> 1）默认的继承访问权限。struct是public的，class是private的。<br> 2）struct 作为数据结构的实现体，它默认的数据访问控制是 public 的，而 class 作为对象的实现体，它默认的成员变量访问控制是 private</p><h3 id="C-引用"><a href="#C-引用" class="headerlink" title="C++ 引用"></a>C++ 引用</h3><p>它是某个已存在变量的另一个名字。一旦把引用初始化为某个变量，就可以使用该引用名称或变量名称来指向变量。<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> i = <span class="number">17</span>;</span><br><span class="line"><span class="keyword">int</span>&amp;  r=i</span><br></pre></td></tr></table></figure></p><p>在这些声明中，&amp; 读作引用。因此，第一个声明可以读作 “r 是一个初始化为 i 的整型引用”</p><h3 id="C-引用-vs-指针"><a href="#C-引用-vs-指针" class="headerlink" title="C++ 引用 vs 指针"></a>C++ 引用 vs 指针</h3><p>引用很容易与指针混淆，它们之间有三个主要的不同：</p><ol><li>不存在空引用。引用必须连接到一块合法的内存。</li><li>一旦引用被初始化为一个对象，就不能被指向到另一个对象。指针可以在任何时候指向到另一个对象。</li><li>引用必须在创建时被初始化。指针可以在任何时间被初始化。</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;这一节我会详细介绍C++中指针和引用以及他们的区别，总的来说，难度还不太高，屏上得来终觉浅，看完文章后不妨多练练吧-:)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;C-指针&quot;&gt;&lt;a href=&quot;#C-指针&quot; class=&quot;headerli
      
    
    </summary>
    
    
      <category term="cpp" scheme="https://apenshar.github.io/myBlog/tags/cpp/"/>
    
  </entry>
  
  <entry>
    <title>C++超度指南第一弹</title>
    <link href="https://apenshar.github.io/myBlog/2018-02-10-CPP-learn01.html"/>
    <id>https://apenshar.github.io/myBlog/2018-02-10-CPP-learn01.html</id>
    <published>2018-02-10T04:38:34.000Z</published>
    <updated>2018-02-10T09:21:48.718Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>以下是我最近学习C++时所摘录的md笔记，拿出来献丑了，希望能帮助看到此篇的小白们快速入门，顺利超度！</p></blockquote><h3 id="C-简介"><a href="#C-简介" class="headerlink" title="C++简介"></a>C++简介</h3><p>C++ 是一种静态类型的、编译式的、通用的、大小写敏感的、不规则的编程语言，支持过程化编程、面向对象编程和泛型编程。<br>C++ 被认为是一种中级语言，它综合了高级语言和低级语言的特点。<br>C++ 是由 Bjarne Stroustrup 于 1979 年在新泽西州美利山贝尔实验室开始设计开发的。<br>C++ 是 C 的一个超集，事实上，任何合法的 C 程序都是合法的 C++ 程序。</p><h3 id="面向对象程序设计"><a href="#面向对象程序设计" class="headerlink" title="面向对象程序设计"></a>面向对象程序设计</h3><p>C++ 完全支持面向对象的程序设计，包括面向对象开发的四大特性：</p><ol><li>封装</li><li>抽象</li><li>继承</li><li>多态</li></ol><h3 id="标准库"><a href="#标准库" class="headerlink" title="标准库"></a>标准库</h3><p>标准的 C++ 由三个重要部分组成：</p><ol><li>核心语言，提供了所有构件块，包括变量、数据类型和常量，等等。</li><li>C++ 标准库，提供了大量的函数，用于操作文件、字符串等。</li><li>标准模板库（STL），提供了大量的方法，用于操作数据结构等。</li></ol><p>程序 g++ 是将 gcc 默认语言设为 C++ 的一个特殊的版本，链接时它自动使用 C++ 标准库而不用 C 标准库。通过遵循源码的命名规范并指定对应库的名字，用 gcc 来编译链接 C++ 程序是可行的，如下例所示：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ g++ helloworld.cpp</span><br></pre></td></tr></table></figure></p><p>通常我们使用<code>-o</code> 选项指定可执行程序的文件名，以下实例生成一个 helloworld 的可执行文件：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ g++ helloworld.cpp -o helloworld</span><br></pre></td></tr></table></figure></p><p>执行 helloworld:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ ./helloworld</span><br><span class="line">Hello, world!</span><br></pre></td></tr></table></figure></p><h3 id="C-程序结构"><a href="#C-程序结构" class="headerlink" title="C++ 程序结构"></a>C++ 程序结构</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">   <span class="built_in">cout</span> &lt;&lt; <span class="string">"Hello World"</span>; <span class="comment">// 输出 Hello World</span></span><br><span class="line">   <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>C++ 语言定义了一些头文件，这些头文件包含了程序中必需的或有用的信息。上面这段程序中，引入了头文件 <iostream>。</iostream></li><li>下一行 using namespace std; 告诉编译器使用 std 命名空间。命名空间是 C++ 中一个相对新的概念。</li><li>下一行<code>int main()</code>是主函数，程序从这里开始执行。</li><li>下一行<code>cout &lt;&lt; &quot;Hello World&quot;;</code> 会在屏幕上显示消息 “Hello World”。</li><li>下一行 return 0; 终止 main( )函数，并向调用进程返回值 0。</li></ol><h3 id="分号和块"><a href="#分号和块" class="headerlink" title="分号和块"></a>分号和块</h3><p>在 C++ 中，分号是语句结束符。也就是说，每个语句必须以分号结束。它表明一个逻辑实体的结束。<br>++ 不以行末作为结束符的标识，因此，您可以在一行上放置多个语句。<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">x = y; y = y+<span class="number">1</span>; add(x, y);</span><br></pre></td></tr></table></figure></p><h3 id="三字符组"><a href="#三字符组" class="headerlink" title="三字符组"></a>三字符组</h3><p>三字符组就是用于表示另一个字符的三个字符序列，又称为三字符序列。三字符序列总是以两个问号开头。三字符序列不太常见，但 C++ 标准允许把某些字符指定为三字符序列。以前为了表示键盘上没有的字符，这是必不可少的一种方法。</p><table><thead><tr><th>a</th><th>b</th></tr></thead><tbody><tr><td>??=</td><td>#</td></tr><tr><td>??/</td><td>\</td></tr><tr><td>??’</td><td>^</td></tr><tr><td>??(</td><td>[</td></tr><tr><td>??)</td><td>]</td></tr><tr><td>??&lt;</td><td>{</td></tr><tr><td>??&gt;</td><td>}</td></tr><tr><td>??-</td><td>~</td></tr></tbody></table><h3 id="空格"><a href="#空格" class="headerlink" title="空格"></a>空格</h3><p>在 C++ 中，空格用于描述空白符、制表符、换行符和注释。让编译器能识别语句中的某个元素（比如 int）在哪里结束，下一个元素在哪里开始。</p><p>###　注释<br>C++ 支持单行注释和多行注释</p><ol><li>C++ 单行注释以 # 开头</li><li>C++ 多行注释以 /<em> 开始，以 </em>/ 终止</li><li>这里给大家介绍一种奇技淫巧吧，通过if判别式决定是否执行，同样也能达到注释的效果，<br>如果需要取消注释，你可以把<code>#if 0</code> 改成 <code>#if 1</code> 来执行 code 的代码。<br>这种形式对程序调试有很大帮助，测试时使用<code>#if 1</code> 来执行测试代码，发布后使用 #if 0 来屏蔽测试代码。</li></ol><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">if</span> 0</span></span><br><span class="line">   code</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br></pre></td></tr></table></figure><h3 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h3><table><thead><tr><th>col1</th><th>col2 </th></tr></thead><tbody><tr><td>布尔型</td><td>bool</td></tr><tr><td>字符型</td><td>char</td></tr><tr><td>整型</td><td>int</td></tr><tr><td>浮点型</td><td>float</td></tr><tr><td>双浮点型</td><td>double</td></tr><tr><td>无类型</td><td>void</td></tr><tr><td>宽字符型</td><td>wchar_t</td></tr></tbody></table><p>一些基本类型可以使用一个或多个类型修饰符进行修饰：</p><table><thead><tr><th>类型</th><th>类</th><th>范围</th></tr></thead><tbody><tr><td>char</td><td>1个字节</td><td>-128 到 127 或者 0 到 255</td></tr><tr><td>unsigned char</td><td>1个字节</td><td>0 到 255</td></tr><tr><td>signed char</td><td>1个字节</td><td>-128 到 127 </td></tr><tr><td>int</td><td>4 个字节</td><td>-2147483648 到 2147483647</td></tr><tr><td>unsigned int</td><td>4个字节</td><td>0 到 4294967295</td></tr><tr><td>signed int</td><td>4个字节</td><td>-2147483648 到 2147483647</td></tr><tr><td>short int</td><td>2个字节</td><td>-32768 到 32767</td></tr><tr><td>unsigned short int</td><td>2个字节</td><td>0 到 65,535</td></tr><tr><td>signed short int</td><td>2个字节</td><td>-32768 到 32767</td></tr><tr><td>long int</td><td>8个字节</td><td>-9,223,372,036,854,775,808 到 9,223,372,036,854,775,807</td></tr><tr><td>signed long int</td><td>8个字节</td><td>-9,223,372,036,854,775,808 到 9,223,372,036,854,775,807</td></tr></tbody></table><p>下面实例会输出您电脑上各种数据类型的大小。<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;  </span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;  </span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;limits&gt;  </span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;  </span><br><span class="line">  </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span>  </span></span><br><span class="line"><span class="function"></span>&#123;  </span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"type: \t\t"</span> &lt;&lt; <span class="string">"************size**************"</span>&lt;&lt; <span class="built_in">endl</span>;  </span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"bool: \t\t"</span> &lt;&lt; <span class="string">"所占字节数："</span> &lt;&lt; <span class="keyword">sizeof</span>(<span class="keyword">bool</span>);  </span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"\t最大值："</span> &lt;&lt; (numeric_limits&lt;<span class="keyword">bool</span>&gt;::max)();  </span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"\t\t最小值："</span> &lt;&lt; (numeric_limits&lt;<span class="keyword">bool</span>&gt;::min)() &lt;&lt; <span class="built_in">endl</span>;  </span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"char: \t\t"</span> &lt;&lt; <span class="string">"所占字节数："</span> &lt;&lt; <span class="keyword">sizeof</span>(<span class="keyword">char</span>);  </span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"\t最大值："</span> &lt;&lt; (numeric_limits&lt;<span class="keyword">char</span>&gt;::max)();  </span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"\t\t最小值："</span> &lt;&lt; (numeric_limits&lt;<span class="keyword">char</span>&gt;::min)() &lt;&lt; <span class="built_in">endl</span>;  </span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"signed char: \t"</span> &lt;&lt; <span class="string">"所占字节数："</span> &lt;&lt; <span class="keyword">sizeof</span>(<span class="keyword">signed</span> <span class="keyword">char</span>);  </span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"\t最大值："</span> &lt;&lt; (numeric_limits&lt;<span class="keyword">signed</span> <span class="keyword">char</span>&gt;::max)();  </span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"\t\t最小值："</span> &lt;&lt; (numeric_limits&lt;<span class="keyword">signed</span> <span class="keyword">char</span>&gt;::min)() &lt;&lt; <span class="built_in">endl</span>;  </span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"unsigned char: \t"</span> &lt;&lt; <span class="string">"所占字节数："</span> &lt;&lt; <span class="keyword">sizeof</span>(<span class="keyword">unsigned</span> <span class="keyword">char</span>);  </span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"\t最大值："</span> &lt;&lt; (numeric_limits&lt;<span class="keyword">unsigned</span> <span class="keyword">char</span>&gt;::max)();  </span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"\t\t最小值："</span> &lt;&lt; (numeric_limits&lt;<span class="keyword">unsigned</span> <span class="keyword">char</span>&gt;::min)() &lt;&lt; <span class="built_in">endl</span>;  </span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"wchar_t: \t"</span> &lt;&lt; <span class="string">"所占字节数："</span> &lt;&lt; <span class="keyword">sizeof</span>(<span class="keyword">wchar_t</span>);  </span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"\t最大值："</span> &lt;&lt; (numeric_limits&lt;<span class="keyword">wchar_t</span>&gt;::max)();  </span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"\t\t最小值："</span> &lt;&lt; (numeric_limits&lt;<span class="keyword">wchar_t</span>&gt;::min)() &lt;&lt; <span class="built_in">endl</span>;  </span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"short: \t\t"</span> &lt;&lt; <span class="string">"所占字节数："</span> &lt;&lt; <span class="keyword">sizeof</span>(<span class="keyword">short</span>);  </span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"\t最大值："</span> &lt;&lt; (numeric_limits&lt;<span class="keyword">short</span>&gt;::max)();  </span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"\t\t最小值："</span> &lt;&lt; (numeric_limits&lt;<span class="keyword">short</span>&gt;::min)() &lt;&lt; <span class="built_in">endl</span>;  </span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"int: \t\t"</span> &lt;&lt; <span class="string">"所占字节数："</span> &lt;&lt; <span class="keyword">sizeof</span>(<span class="keyword">int</span>);  </span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"\t最大值："</span> &lt;&lt; (numeric_limits&lt;<span class="keyword">int</span>&gt;::max)();  </span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"\t最小值："</span> &lt;&lt; (numeric_limits&lt;<span class="keyword">int</span>&gt;::min)() &lt;&lt; <span class="built_in">endl</span>;  </span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"unsigned: \t"</span> &lt;&lt; <span class="string">"所占字节数："</span> &lt;&lt; <span class="keyword">sizeof</span>(<span class="keyword">unsigned</span>);  </span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"\t最大值："</span> &lt;&lt; (numeric_limits&lt;<span class="keyword">unsigned</span>&gt;::max)();  </span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"\t最小值："</span> &lt;&lt; (numeric_limits&lt;<span class="keyword">unsigned</span>&gt;::min)() &lt;&lt; <span class="built_in">endl</span>;  </span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"long: \t\t"</span> &lt;&lt; <span class="string">"所占字节数："</span> &lt;&lt; <span class="keyword">sizeof</span>(<span class="keyword">long</span>);  </span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"\t最大值："</span> &lt;&lt; (numeric_limits&lt;<span class="keyword">long</span>&gt;::max)();  </span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"\t最小值："</span> &lt;&lt; (numeric_limits&lt;<span class="keyword">long</span>&gt;::min)() &lt;&lt; <span class="built_in">endl</span>;  </span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"unsigned long: \t"</span> &lt;&lt; <span class="string">"所占字节数："</span> &lt;&lt; <span class="keyword">sizeof</span>(<span class="keyword">unsigned</span> <span class="keyword">long</span>);  </span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"\t最大值："</span> &lt;&lt; (numeric_limits&lt;<span class="keyword">unsigned</span> <span class="keyword">long</span>&gt;::max)();  </span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"\t最小值："</span> &lt;&lt; (numeric_limits&lt;<span class="keyword">unsigned</span> <span class="keyword">long</span>&gt;::min)() &lt;&lt; <span class="built_in">endl</span>;  </span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"double: \t"</span> &lt;&lt; <span class="string">"所占字节数："</span> &lt;&lt; <span class="keyword">sizeof</span>(<span class="keyword">double</span>);  </span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"\t最大值："</span> &lt;&lt; (numeric_limits&lt;<span class="keyword">double</span>&gt;::max)();  </span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"\t最小值："</span> &lt;&lt; (numeric_limits&lt;<span class="keyword">double</span>&gt;::min)() &lt;&lt; <span class="built_in">endl</span>;  </span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"long double: \t"</span> &lt;&lt; <span class="string">"所占字节数："</span> &lt;&lt; <span class="keyword">sizeof</span>(<span class="keyword">long</span> <span class="keyword">double</span>);  </span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"\t最大值："</span> &lt;&lt; (numeric_limits&lt;<span class="keyword">long</span> <span class="keyword">double</span>&gt;::max)();  </span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"\t最小值："</span> &lt;&lt; (numeric_limits&lt;<span class="keyword">long</span> <span class="keyword">double</span>&gt;::min)() &lt;&lt; <span class="built_in">endl</span>;  </span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"float: \t\t"</span> &lt;&lt; <span class="string">"所占字节数："</span> &lt;&lt; <span class="keyword">sizeof</span>(<span class="keyword">float</span>);  </span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"\t最大值："</span> &lt;&lt; (numeric_limits&lt;<span class="keyword">float</span>&gt;::max)();  </span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"\t最小值："</span> &lt;&lt; (numeric_limits&lt;<span class="keyword">float</span>&gt;::min)() &lt;&lt; <span class="built_in">endl</span>;  </span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"size_t: \t"</span> &lt;&lt; <span class="string">"所占字节数："</span> &lt;&lt; <span class="keyword">sizeof</span>(<span class="keyword">size_t</span>);  </span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"\t最大值："</span> &lt;&lt; (numeric_limits&lt;<span class="keyword">size_t</span>&gt;::max)();  </span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"\t最小值："</span> &lt;&lt; (numeric_limits&lt;<span class="keyword">size_t</span>&gt;::min)() &lt;&lt; <span class="built_in">endl</span>;  </span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"string: \t"</span> &lt;&lt; <span class="string">"所占字节数："</span> &lt;&lt; <span class="keyword">sizeof</span>(<span class="built_in">string</span>) &lt;&lt; <span class="built_in">endl</span>;  </span><br><span class="line">    <span class="comment">// &lt;&lt; "\t最大值：" &lt;&lt; (numeric_limits&lt;string&gt;::max)() &lt;&lt; "\t最小值：" &lt;&lt; (numeric_limits&lt;string&gt;::min)() &lt;&lt; endl;  </span></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"type: \t\t"</span> &lt;&lt; <span class="string">"************size**************"</span>&lt;&lt; <span class="built_in">endl</span>;  </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>output:<br>这里使用了 <code>endl</code>换行，这将在每一行后插入一个换行符，&lt;&lt; 运算符用于向屏幕传多个值。 sizeof() 函数可获取各种数据类型的大小。<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">type:         ************size**************</span><br><span class="line"><span class="keyword">bool</span>:         所占字节数：<span class="number">1</span>    最大值：<span class="number">1</span>        最小值：<span class="number">0</span></span><br><span class="line"><span class="keyword">char</span>:         所占字节数：<span class="number">1</span>    最大值：        最小值：?</span><br><span class="line"><span class="keyword">signed</span> <span class="keyword">char</span>:     所占字节数：<span class="number">1</span>    最大值：        最小值：?</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span>:     所占字节数：<span class="number">1</span>    最大值：?        最小值：</span><br><span class="line"><span class="keyword">wchar_t</span>:     所占字节数：<span class="number">4</span>    最大值：<span class="number">2147483647</span>        最小值：<span class="number">-2147483648</span></span><br><span class="line"><span class="keyword">short</span>:         所占字节数：<span class="number">2</span>    最大值：<span class="number">32767</span>        最小值：<span class="number">-32768</span></span><br><span class="line"><span class="keyword">int</span>:         所占字节数：<span class="number">4</span>    最大值：<span class="number">2147483647</span>    最小值：<span class="number">-2147483648</span></span><br><span class="line"><span class="keyword">unsigned</span>:     所占字节数：<span class="number">4</span>    最大值：<span class="number">4294967295</span>    最小值：<span class="number">0</span></span><br><span class="line"><span class="keyword">long</span>:         所占字节数：<span class="number">8</span>    最大值：<span class="number">9223372036854775807</span>    最小值：<span class="number">-9223372036854775808</span></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">long</span>:     所占字节数：<span class="number">8</span>    最大值：<span class="number">18446744073709551615</span>    最小值：<span class="number">0</span></span><br><span class="line"><span class="keyword">double</span>:     所占字节数：<span class="number">8</span>    最大值：<span class="number">1.79769e+308</span>    最小值：<span class="number">2.22507e-308</span></span><br><span class="line"><span class="keyword">long</span> <span class="keyword">double</span>:     所占字节数：<span class="number">16</span>    最大值：<span class="number">1.18973e+4932</span>    最小值：<span class="number">3.3621e-4932</span></span><br><span class="line"><span class="keyword">float</span>:         所占字节数：<span class="number">4</span>    最大值：<span class="number">3.40282e+38</span>    最小值：<span class="number">1.17549e-38</span></span><br><span class="line"><span class="keyword">size_t</span>:     所占字节数：<span class="number">8</span>    最大值：<span class="number">18446744073709551615</span>    最小值：<span class="number">0</span></span><br><span class="line"><span class="built_in">string</span>:     所占字节数：<span class="number">24</span></span><br><span class="line">type:         ************size**************</span><br></pre></td></tr></table></figure></p><h3 id="typedef-声明"><a href="#typedef-声明" class="headerlink" title="typedef 声明"></a>typedef 声明</h3><p>您可以使用 typedef 为一个已有的类型取一个新的名字。下面是使用 typedef 定义一个新类型的语法：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span>　<span class="keyword">int</span> feet</span><br></pre></td></tr></table></figure></p><p>现在，下面的声明是完全合法的，它创建了一个整型变量 distance：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">feet distance;</span><br></pre></td></tr></table></figure></p><h3 id="枚举类型"><a href="#枚举类型" class="headerlink" title="枚举类型"></a>枚举类型</h3><p>枚举类型(enumeration)是C++中的一种派生数据类型，它是由用户定义的若干枚举常量的集合。<br>如果一个变量只有几种可能的值，可以定义为枚举(enumeration)类型。所谓”枚举”是指将变量的值一一列举出来，变量的值只能在列举出来的值的范围内。<br>创建枚举，需要使用关键字 enum。枚举类型的一般形式为：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">enum</span> color &#123; red, green, blue &#125; c;</span><br><span class="line">c = blue;</span><br></pre></td></tr></table></figure></p><p>默认情况下，第一个名称的值为 0，第二个名称的值为 1，第三个名称的值为 2，以此类推。但是，您也可以给名称赋予一个特殊的值，只需要添加一个初始值即可。例如，在下面的枚举中，green 的值为 5。<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">enum</span> color &#123; red, green=<span class="number">5</span>, blue &#125;;</span><br></pre></td></tr></table></figure></p><p>在这里，blue 的值为 6，因为默认情况下，每个名称都会比它前面一个名称大 1，但 red 的值依然为 0。</p><h3 id="时间类型"><a href="#时间类型" class="headerlink" title="时间类型"></a>时间类型</h3><p>C++ 标准库没有提供所谓的日期类型。C++ 继承了 C 语言用于日期和时间操作的结构和函数。为了使用日期和时间相关的函数和结构，需要在 C++ 程序中引用 <ctime> 头文件。</ctime></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ctime&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">( )</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">   <span class="comment">// 基于当前系统的当前日期/时间</span></span><br><span class="line">   <span class="keyword">time_t</span> now = time(<span class="number">0</span>);</span><br><span class="line">   </span><br><span class="line">   <span class="comment">// 把 now 转换为字符串形式</span></span><br><span class="line">   <span class="keyword">char</span>* dt = ctime(&amp;now);</span><br><span class="line"> </span><br><span class="line">   <span class="built_in">cout</span> &lt;&lt; <span class="string">"本地日期和时间："</span> &lt;&lt; dt &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"> </span><br><span class="line">   <span class="comment">// 把 now 转换为 tm 结构</span></span><br><span class="line">   tm *gmtm = gmtime(&amp;now);</span><br><span class="line">   dt = asctime(gmtm);</span><br><span class="line">   <span class="built_in">cout</span> &lt;&lt; <span class="string">"UTC 日期和时间："</span>&lt;&lt; dt &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>output:<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">本地日期和时间：Sat Jan  <span class="number">8</span> <span class="number">20</span>:<span class="number">07</span>:<span class="number">41</span> <span class="number">2011</span></span><br><span class="line"></span><br><span class="line">UTC 日期和时间：Sun Jan  <span class="number">9</span> <span class="number">03</span>:<span class="number">07</span>:<span class="number">41</span> <span class="number">2011</span></span><br></pre></td></tr></table></figure></p><h3 id="C-基本的输入输出"><a href="#C-基本的输入输出" class="headerlink" title="C++ 基本的输入输出"></a>C++ 基本的输入输出</h3><p>I/O 库头文件</p><table><thead><tr><th>库</th><th>解释</th></tr></thead><tbody><tr><td>&lt;iostream&gt;</td><td>该文件定义了 cin、cout、cerr 和 clog 对象，分别对应于标准输入流、标准输出流、非缓冲标准错误流和缓冲标准错误流 </td></tr><tr><td>&lt;iomanip&gt;</td><td>　该文件通过所谓的参数化的流操纵器（比如 setw 和 setprecision），来声明对执行标准化 I/O 有用的服务</td></tr><tr><td>&lt;fstream&gt;</td><td>该文件为用户控制的文件处理声明服务。我们将在文件和流的相关章节讨论它的细节。</td></tr></tbody></table><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">( )</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">   <span class="keyword">char</span> name[<span class="number">50</span>];</span><br><span class="line"> </span><br><span class="line">   <span class="built_in">cout</span> &lt;&lt; <span class="string">"请输入您的名称： "</span>;</span><br><span class="line">   <span class="built_in">cin</span> &gt;&gt; name;</span><br><span class="line">   <span class="built_in">cout</span> &lt;&lt; <span class="string">"您的名称是： "</span> &lt;&lt; name &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>标准输入流<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">请输入您的名称： cplusplus</span><br><span class="line">您的名称是： cplusplus</span><br></pre></td></tr></table></figure></p><p>标准错误流（cerr）<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">( )</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">   <span class="keyword">char</span> str[] = <span class="string">"Unable to read...."</span>;</span><br><span class="line"> </span><br><span class="line">   <span class="built_in">cerr</span> &lt;&lt; <span class="string">"Error message : "</span> &lt;&lt; str &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>当上面的代码被编译和执行时，它会产生下列结果：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Error message : Unable to read....</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;以下是我最近学习C++时所摘录的md笔记，拿出来献丑了，希望能帮助看到此篇的小白们快速入门，顺利超度！&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;C-简介&quot;&gt;&lt;a href=&quot;#C-简介&quot; class=&quot;headerlink&quot; title
      
    
    </summary>
    
    
      <category term="cpp" scheme="https://apenshar.github.io/myBlog/tags/cpp/"/>
    
  </entry>
  
  <entry>
    <title>使用Git管理你的项目</title>
    <link href="https://apenshar.github.io/myBlog/2018-02-04-git-introduce.html"/>
    <id>https://apenshar.github.io/myBlog/2018-02-04-git-introduce.html</id>
    <published>2018-02-04T13:42:22.000Z</published>
    <updated>2018-02-10T09:18:43.700Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Write-Before"><a href="#Write-Before" class="headerlink" title="Write Before"></a>Write Before</h2><blockquote><p>Git 是 Linus Torvalds 为了帮助管理 Linux 内核开发而开发的一个开放源码的分布式版本控制软件,可以有效、高速的处理从很小到非常大的项目版本管理，非常适合团队间的协同开发。使用git管理项目也有大半年了，每次操作都会忘记一些命令，很尴尬=~=<br>今天来总结一发，加强记忆，以后敲代码再也不卡壳了</p></blockquote><h3 id="git的分支操作"><a href="#git的分支操作" class="headerlink" title="git的分支操作"></a>git的分支操作</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">#查看当前项目有哪些远程仓库</span><br><span class="line">git remote -v </span><br><span class="line"></span><br><span class="line">#查看本地分支 </span><br><span class="line">git branch</span><br><span class="line"></span><br><span class="line">#查看远程分支</span><br><span class="line">git branch -r </span><br><span class="line"></span><br><span class="line">#查看本地仓库和远程仓库所有分支</span><br><span class="line">git branch -a</span><br><span class="line"></span><br><span class="line">#在本地仓库创建xxx分支(没有进入dev分支) </span><br><span class="line">git branch dev</span><br><span class="line"></span><br><span class="line"># 删除本地分支xxx  -D强制删除</span><br><span class="line">git branch -d xxx</span><br></pre></td></tr></table></figure><h3 id="git与远程仓库"><a href="#git与远程仓库" class="headerlink" title="git与远程仓库"></a>git与远程仓库</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">#关联远程仓库(标记为origin)</span><br><span class="line">git remote add origin git@github.com:username/xxx.git </span><br><span class="line"></span><br><span class="line">#将本地仓库代码提交远程仓库master分支</span><br><span class="line">git push origin master </span><br><span class="line"></span><br><span class="line">#在本地仓库创建dev分支并进入到该分支</span><br><span class="line">git checkout -b  dev</span><br><span class="line"></span><br><span class="line">#将本地仓库新建的dev分支迁到远程仓库的dev分支</span><br><span class="line">git push origin dev</span><br><span class="line"></span><br><span class="line"># 删除远程仓库的dev分支</span><br><span class="line">git push origin :dev</span><br><span class="line"></span><br><span class="line">#远程仓库有dev分支,而本地无,把远程仓库的dev分支迁到本地 -b 进入该分支   </span><br><span class="line">git checkout develop origin/develop</span><br></pre></td></tr></table></figure><h3 id="git与项目管理"><a href="#git与项目管理" class="headerlink" title="git与项目管理"></a>git与项目管理</h3><p>1.master分支：永远处于即将发布的状态<br>2.develop分支：处在最新的开发状态。测试后，准备发布过程中将develop合并到master</p><blockquote><p>开发完成后,进入到master分支下，执行以下命令</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git merge develop</span><br></pre></td></tr></table></figure><h3 id="git的个性化配置"><a href="#git的个性化配置" class="headerlink" title="git的个性化配置"></a>git的个性化配置</h3><p>默认的配置写在 .git/config上 ，可以自行配置，或者输入 <code>git config -l</code> 命令查看。<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">显示颜色</span></span><br><span class="line">git config --global color.ui true</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">显示中文文件名</span></span><br><span class="line">git config --global core.quotepath false </span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">个性化输出日志, 并给git <span class="built_in">log</span> 设置别名 git lg</span></span><br><span class="line">git config --global alias.lg "log --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)&lt;%an&gt;%Creset' --abbrev-commit --date=relative"</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">设置编辑器为vim(默认的是nano)</span></span><br><span class="line">git config --global core.editor "vim"</span><br></pre></td></tr></table></figure></p><h3 id="git-diff"><a href="#git-diff" class="headerlink" title="git  diff"></a>git  diff</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">比较两次提交之间的差异</span></span><br><span class="line">git diff &lt;$id1&gt; &lt;$id2&gt; </span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">在两个分支之间比较  加上 --<span class="built_in">stat</span> 是显示文件列表, 否则是文件内容diff</span></span><br><span class="line">git diff  &lt;branch1&gt; &lt;branch2&gt;   </span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 比较暂存区和版本库差异</span></span><br><span class="line">git diff --staged</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Write-Before&quot;&gt;&lt;a href=&quot;#Write-Before&quot; class=&quot;headerlink&quot; title=&quot;Write Before&quot;&gt;&lt;/a&gt;Write Before&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;Git 是 Linus Torva
      
    
    </summary>
    
    
      <category term="git" scheme="https://apenshar.github.io/myBlog/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>常用正则表达式片段</title>
    <link href="https://apenshar.github.io/myBlog/2018-01-30-RegExp-segment.html"/>
    <id>https://apenshar.github.io/myBlog/2018-01-30-RegExp-segment.html</id>
    <published>2018-01-29T16:23:58.000Z</published>
    <updated>2018-02-10T09:23:50.327Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>一些常用的正则表达式收集</p></blockquote><p>检测中文<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isContainChinese</span>(<span class="params">str</span>)</span>&#123;</span><br><span class="line"><span class="keyword">return</span> (<span class="regexp">/.*[\u4e00-\u9fa5]+.*$/</span>.test(str));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> testStr = <span class="string">"abc中文def"</span>;</span><br><span class="line">alert(isContainChinese(testStr)); <span class="comment">//true</span></span><br><span class="line"><span class="keyword">var</span> testStr = <span class="string">"abcdef"</span>;</span><br><span class="line">alert(isContainChinese(testStr)); <span class="comment">//false</span></span><br></pre></td></tr></table></figure></p><p>判断手机app内置浏览器：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> ua = navigator.userAgent.toLowerCase(),</span><br><span class="line">    isWx = <span class="regexp">/microMessenger/i</span>.test(ua),</span><br><span class="line">    isQQ = <span class="regexp">/\s+qq\//ig</span>.test(ua),</span><br><span class="line">    isQZone = <span class="regexp">/qzone/i</span>.test(ua),</span><br><span class="line">    isWeibo = <span class="regexp">/weibo/i</span>.test(ua);</span><br></pre></td></tr></table></figure></p><p>JS 正则表达式验证IP地址<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isValidIP</span>(<span class="params">ip</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> reg = <span class="regexp">/^(\d&#123;1,2&#125;|1\d\d|2[0-4]\d|25[0-5])\.(\d&#123;1,2&#125;|1\d\d|2[0-4]\d|25[0-5])\.(\d&#123;1,2&#125;|1\d\d|2[0-4]\d|25[0-5])\.(\d&#123;1,2&#125;|1\d\d|2[0-4]\d|25[0-5])$/</span></span><br><span class="line">    <span class="keyword">return</span> reg.test(ip);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;一些常用的正则表达式收集&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;检测中文&lt;br&gt;&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;
      
    
    </summary>
    
    
      <category term="js" scheme="https://apenshar.github.io/myBlog/tags/js/"/>
    
      <category term="RegExp" scheme="https://apenshar.github.io/myBlog/tags/RegExp/"/>
    
  </entry>
  
  <entry>
    <title>JS的执行加载机制研究</title>
    <link href="https://apenshar.github.io/myBlog/2018-01-30-js-execute-mechanism01.html"/>
    <id>https://apenshar.github.io/myBlog/2018-01-30-js-execute-mechanism01.html</id>
    <published>2018-01-29T16:07:05.000Z</published>
    <updated>2018-02-10T09:26:32.701Z</updated>
    
    <content type="html"><![CDATA[<h4 id="机制-Mechanism"><a href="#机制-Mechanism" class="headerlink" title="机制(Mechanism)"></a>机制(Mechanism)</h4><p>Javascripts默认是同步加载的，这里的“加载”可以理解为<strong>解析、执行</strong>，而不是“下载”。现代浏览器对于代码请求的资源都是瀑布式的下载,并非是阻塞式的。<br>假设我们的index页面要加载 一段js，但是其中某个请求结果迟迟得不到响应，于是乎阻塞了后面的js代码的执行（同步加载），同时也会阻碍后面页面的渲染（如果js引入是在head标签中）。</p><h4 id="解决方案-Solutions"><a href="#解决方案-Solutions" class="headerlink" title="解决方案(Solutions)"></a>解决方案(Solutions)</h4><blockquote><p>setTimeOUt 异步执行</p></blockquote><p>等页面模板渲染完成后再执行js代码，加快首屏渲染速度<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">setTimeout(fn,<span class="number">2000</span>)</span><br></pre></td></tr></table></figure></p><blockquote><p>async HTML5新属性</p></blockquote><p>async 属性规定一旦脚本可用，则会异步执行。需要注意的是async 属性仅适用于外部脚本，而且脚本并按顺序加载,如果脚本之间有依赖关系，慎用。 <strong>比如说a.js依赖jquery，而a.js先于jquery下载完成，那么浏览器就开始执行a.js，由于没有jquery依赖，页面加载受损）</strong><br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">'http://china-addthis.googlecode.com/svn/trunk/addthis.js'</span> <span class="attr">async</span>=<span class="string">'async'</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></p><blockquote><p>defer HTML5新属性</p></blockquote><p>以前的defer只支持ie的hack，现在html5开始全面支持defer。defer 属性规定当页面已完成加载后，才会执行脚本，且按照脚本顺序来执行。defer 属性仅适用于外部脚本。<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">'http://libs.baidu.com/jquery/2.0.0/jquery.min.js'</span> <span class="attr">defer</span>=<span class="string">'defer'</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></p><hr><h4 id="总结-Summary"><a href="#总结-Summary" class="headerlink" title="总结(Summary)"></a>总结(Summary)</h4><p>1.defer 和 async在脚本下载方面一样的，都是瀑布式的，异步。区别在于脚本下载完之后何时执行，看下图。显然 defer 是最接近我们对于应用脚本加载和执行的要求的<br>2.async 则是一个乱序执行的主，脚本一旦下载完成就立即执行，所以会无视你声明的顺序。async 对于应用脚本的用处不大，因为它完全不考虑依赖（哪怕是最低级的顺序执行），不过它对于那些可以不依赖任何脚本或不被任何脚本依赖的脚本来说却是非常合适的，最典型的例子：页面统计 Google Analytics<br>3.把所有脚本都丢到  之前是最标准的,原理见下图</p><p><img src="https://i.loli.net/2018/01/25/5a69352a74c5e.png" alt="js加载步骤"></p><p><img src="https://i.loli.net/2018/01/25/5a6938c53e542.jpg" alt="241629186422402.jpg"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;机制-Mechanism&quot;&gt;&lt;a href=&quot;#机制-Mechanism&quot; class=&quot;headerlink&quot; title=&quot;机制(Mechanism)&quot;&gt;&lt;/a&gt;机制(Mechanism)&lt;/h4&gt;&lt;p&gt;Javascripts默认是同步加载的，这里的“加载”可
      
    
    </summary>
    
    
      <category term="js" scheme="https://apenshar.github.io/myBlog/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>parcel-bundler打包指南</title>
    <link href="https://apenshar.github.io/myBlog/2018-01-29-parcel-bundle-introduce.html"/>
    <id>https://apenshar.github.io/myBlog/2018-01-29-parcel-bundle-introduce.html</id>
    <published>2018-01-29T15:32:59.000Z</published>
    <updated>2018-02-10T10:15:31.564Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>parcel是2017下半年异军突起的一个打包工具，主打0配置和极速打包，发布后短短两周就引起圈子里极大的关注。不废话了，下面就简单示范一下parcle的基础用法</p></blockquote><h3 id="Install-amp-Usage"><a href="#Install-amp-Usage" class="headerlink" title="Install &amp; Usage"></a>Install &amp; Usage</h3><p><strong>step 1 安装parcel</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g parcel-bundler</span><br></pre></td></tr></table></figure></p><p>安装好parcel工具包后，创建一个项目目录，在里面写一个简单的页面</p><p><strong>step 2 打包命令</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">parcel index.html -p 10086</span><br></pre></td></tr></table></figure></p><p>然后在浏览器中打开 <a href="http://localhost:10086/" target="_blank" rel="noopener">http://localhost:10086/</a> 就能打开刚才开发的页面<br>开发完成后，输入以下命令进行打包 ，打包后的文件会自动放入 dist 目录 </p><p><strong>step 3 上线啦~</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">parcel build index.html</span><br></pre></td></tr></table></figure></p><p> 在本地浏览器打开index.html，发现一塌糊涂，原来连css样式都没加载进来，什么鬼，被谁吃了？哈哈，敌在导演部，这里出现了一个坑，因为parcel打包后的路径都是绝对路径（坑），放在服务器上是没问题的~~但是如果本地打开，就得手动一个个修改为相对路径👿。</p><h3 id="Advance-Guide"><a href="#Advance-Guide" class="headerlink" title="Advance Guide"></a>Advance Guide</h3><p>下面我们来做一个模块化项目，只需要新建一个入口文件 main.js，在 main.js 中使用<code>import</code>引入其他的 css 和 js 文件，会用到 ES6 语法，需要安装一个babel工具 ，将ES6转化为ES5，这里我们推荐babel-preset-env。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install parcel-bundler -S</span><br><span class="line">npm install babel-preset-env -S</span><br></pre></td></tr></table></figure></p><p>然后在根目录创建一个 .babelrc 文件，添加以下配置：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"> &quot;presets&quot;: [&quot;env&quot;]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>再安装一个 css 转换工具，比如 autoprefixer<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install postcss-modules autoprefixer -S</span><br></pre></td></tr></table></figure></p><p>创建 .postcssrc 文件：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;modules&quot;: true,</span><br><span class="line">  &quot;plugins&quot;: &#123;</span><br><span class="line">     &quot;autoprefixer&quot;: &#123;</span><br><span class="line">       &quot;grid&quot;: true</span><br><span class="line">     &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>最后 npm run build 打包<br>可以看到 js 和 css 已经整合，其内容也经过了 babel 和 autoprefixer 的编译</p><p> index.html 作为入口，以 script 引入 main.js：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- index.html --&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"> &lt;div id=<span class="string">"app"</span>&gt;&lt;/div&gt;</span><br><span class="line"> &lt;script src=<span class="string">"./src/main.js"</span>&gt;&lt;/script&gt;</span><br><span class="line">&lt;<span class="regexp">/body&gt;</span></span><br><span class="line"><span class="regexp"> </span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/ main.js</span></span><br><span class="line"><span class="regexp"> </span></span><br><span class="line"><span class="regexp">import 'babel-polyfill'</span></span><br><span class="line"><span class="regexp">import Vue from 'vue'</span></span><br><span class="line"><span class="regexp">import App from './</span>App.vue<span class="string">'</span></span><br><span class="line"><span class="string">import router from '</span>./router<span class="string">'</span></span><br><span class="line"><span class="string">import '</span>./css/common.css<span class="string">'</span></span><br><span class="line"><span class="string"> </span></span><br><span class="line"><span class="string">Vue.config.productionTip = false</span></span><br><span class="line"><span class="string"> </span></span><br><span class="line"><span class="string">const vm = new Vue(&#123;</span></span><br><span class="line"> el: '#app',</span><br><span class="line"> router,</span><br><span class="line"> render: <span class="function"><span class="params">h</span> =&gt;</span> h(App)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><p>这里要推荐一个很厉害的插件 parcel-plugin-vue，它让 parcel 和 vue 成功牵手<br>完整配置如下</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"> <span class="attr">"name"</span>: <span class="string">"ParcelVue"</span>,</span><br><span class="line"> <span class="attr">"version"</span>: <span class="string">"1.0.0"</span>,</span><br><span class="line"> <span class="attr">"description"</span>: <span class="string">"The project of parcel &amp; vue created by Wise Wrong"</span>,</span><br><span class="line"> <span class="attr">"main"</span>: <span class="string">"main.js"</span>,</span><br><span class="line"> <span class="attr">"scripts"</span>: &#123;</span><br><span class="line"> <span class="attr">"dev"</span>: <span class="string">"parcel index.html -p 3030"</span>,</span><br><span class="line"> <span class="attr">"build"</span>: <span class="string">"parcel build index.html"</span></span><br><span class="line"> &#125;,</span><br><span class="line"> <span class="attr">"keywords"</span>: [</span><br><span class="line"> <span class="string">"parcel"</span>,</span><br><span class="line"> <span class="string">"vue"</span></span><br><span class="line"> ],</span><br><span class="line"> <span class="attr">"author"</span>: <span class="string">"wisewrong"</span>,</span><br><span class="line"> <span class="attr">"license"</span>: <span class="string">"ISC"</span>,</span><br><span class="line"> <span class="attr">"devDependencies"</span>: &#123;</span><br><span class="line"> <span class="attr">"autoprefixer"</span>: <span class="string">"^7.2.3"</span>,</span><br><span class="line"> <span class="attr">"babel-polyfill"</span>: <span class="string">"^6.26.0"</span>,</span><br><span class="line"> <span class="attr">"babel-preset-env"</span>: <span class="string">"^1.6.1"</span>,</span><br><span class="line"> <span class="attr">"parcel-bundler"</span>: <span class="string">"^1.3.0"</span>,</span><br><span class="line"> <span class="attr">"parcel-plugin-vue"</span>: <span class="string">"^1.4.0"</span>,</span><br><span class="line"> <span class="attr">"postcss-modules"</span>: <span class="string">"^1.1.0"</span>,</span><br><span class="line"> <span class="attr">"vue-loader"</span>: <span class="string">"^13.6.1"</span>,</span><br><span class="line"> <span class="attr">"vue-style-loader"</span>: <span class="string">"^3.0.3"</span>,</span><br><span class="line"> <span class="attr">"vue-template-compiler"</span>: <span class="string">"^2.5.13"</span></span><br><span class="line"> &#125;,</span><br><span class="line"> <span class="attr">"dependencies"</span>: &#123;</span><br><span class="line"> <span class="attr">"vue"</span>: <span class="string">"^2.5.13"</span>,</span><br><span class="line"> <span class="attr">"vue-router"</span>: <span class="string">"^3.0.1"</span></span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;parcel是2017下半年异军突起的一个打包工具，主打0配置和极速打包，发布后短短两周就引起圈子里极大的关注。不废话了，下面就简单示范一下parcle的基础用法&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;Install-amp-Usag
      
    
    </summary>
    
    
      <category term="打包工具" scheme="https://apenshar.github.io/myBlog/tags/%E6%89%93%E5%8C%85%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
  <entry>
    <title>parseInt函数剖析</title>
    <link href="https://apenshar.github.io/myBlog/2018-01-27-parseInt-introduce.html"/>
    <id>https://apenshar.github.io/myBlog/2018-01-27-parseInt-introduce.html</id>
    <published>2018-01-27T15:59:36.000Z</published>
    <updated>2018-02-10T10:24:58.814Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Introduce：<code>parseInt</code>函数可以将一个将字符串按照指定的进制转化，得到最终的计算结果</p></blockquote><p><strong>parseInt(string, radix)</strong> </p><p><code>string</code>: 需要转化的字符，如果不是字符串会被转换，忽视空格符。</p><p><code>radix</code>：数字2-36之前的整型。默认使用10，表示十进制。需要注意的是，如果<code>radix</code>在2-36之外会返回NaN。如果<code>radix</code>为0，就返回一个与<code>string</code>等值的<code>number</code>。</p><p><strong>因为是按照<code>radix</code>指定的进制，所以字符串的除了个位以外的数都必须小于<code>radix</code>，否则返回NaN；如果个位数 大于等于<code>radix</code>，那么string舍弃个位，退一位。</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">parseInt</span>(<span class="string">'67'</span>,<span class="number">1</span>)</span><br><span class="line"><span class="comment">//NaN</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">parseInt</span>(<span class="string">'77'</span>,<span class="number">0</span>)</span><br><span class="line"><span class="comment">//77</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">parseInt</span>(<span class="string">'77'</span>,<span class="number">8</span>)</span><br><span class="line"><span class="comment">//63</span></span><br><span class="line"></span><br><span class="line"> <span class="built_in">parseInt</span>(<span class="string">'78'</span>,<span class="number">8</span>)</span><br><span class="line"><span class="comment">//7</span></span><br><span class="line"></span><br><span class="line"> <span class="built_in">parseInt</span>(<span class="string">'79'</span>,<span class="number">8</span>)</span><br><span class="line"><span class="comment">//7</span></span><br></pre></td></tr></table></figure><p>我们先自行构建一个<code>parseInt</code>函数，它可以接受3个参数，从结果可以就看出，<code>map</code>函数可以接受3个参数，<code>value</code>,<code>index</code>,<code>array</code>，第三个参数为其本身。</p><p><code>parseInt</code>函数是一个将字符串</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> <span class="built_in">parseInt</span> = <span class="function"><span class="keyword">function</span> (<span class="params">string, radix, others</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> string + <span class="string">'-'</span> + radix + <span class="string">'-'</span> + others;</span><br><span class="line">&#125;;</span><br><span class="line">[<span class="string">'1'</span>,<span class="string">'2'</span>,<span class="string">'3'</span>].map(<span class="built_in">parseInt</span>);</span><br><span class="line"><span class="comment">//[1-0-1,2,3]</span></span><br><span class="line"><span class="comment">//[2-1-1,2,3]</span></span><br><span class="line"><span class="comment">//[3-2-1,2,3]</span></span><br></pre></td></tr></table></figure><p>那么下面这道面试题就迎刃而解了：</p><p><strong>[“1”, “2”, “3”].map(parseInt)</strong>得到什么？</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[<span class="string">"1"</span>, <span class="string">"2"</span>, <span class="string">"3"</span>].map(<span class="built_in">parseInt</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">//parseInt('1', 0);  1</span></span><br><span class="line"><span class="comment">//parseInt('2', 1);  NaN</span></span><br><span class="line"><span class="comment">//parseInt('3', 2);  NaN</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;Introduce：&lt;code&gt;parseInt&lt;/code&gt;函数可以将一个将字符串按照指定的进制转化，得到最终的计算结果&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;parseInt(string, radix)&lt;/strong&gt; 
      
    
    </summary>
    
    
      <category term="js" scheme="https://apenshar.github.io/myBlog/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>JS中的原型链(prototype)介绍</title>
    <link href="https://apenshar.github.io/myBlog/2018-01-27-prototype-introduce.html"/>
    <id>https://apenshar.github.io/myBlog/2018-01-27-prototype-introduce.html</id>
    <published>2018-01-27T13:06:03.000Z</published>
    <updated>2018-02-10T10:20:40.243Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p> 来自我的javascript权威指南读书笔记</p></blockquote><h2 id="必备知识点："><a href="#必备知识点：" class="headerlink" title="必备知识点："></a>必备知识点：</h2><ol><li>每一个JavaScript <strong>对象</strong> 都具有的一个属性，叫 <code>__proto__</code> 。这个属性会指向创建该对象的<code>prototype</code> 。</li><li>每个 <strong>函数</strong> 都有一个 <code>prototype</code> 属性（原型），这个属性是一个指针，指向一个对象</li><li>原型并没有属性指向实例，因为原型通过构造函数可以生成多个实例。 但是原型有属性指向<strong>构造函数</strong>，这个属性就是<code>constructor</code>。<br>每个原型都有一个<code>constructor</code>属性指向关联的构造函数</li><li>调用 <code>new</code> 构造函数的创建一个新的空对象，这个对象继承自构造函数的<code>prototype</code>属性（同第1点）</li><li>构造函数试图初始化新创建的对象，并将这个对象用作其调用上下文，因此构造函数可以使用<code>this</code>来引用这个新对象</li><li>尽管构造函数看起来像一个方法，但是它使用这个新对象作为调用上下文。也就是说，<code>new O.m()</code> 中 调用的上下文并不是O</li><li>构造函数通常不用<code>return</code> 关键字，他们通常初始化新对象，当构造函数执行完毕时，显示返回；在这情况下，构造函数的计算结果就是这个新对象的值</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">new操作符其实就是一个语法糖，可以减少代码量，在创建过程中会发生</span></span><br><span class="line"><span class="comment">        a. 创建一个新对象</span></span><br><span class="line"><span class="comment">        b. 将构造函数的作用域赋值给新对象（因此this就指向了这个对象）</span></span><br><span class="line"><span class="comment">        c. 执行构造函数中的代码（为这个新对象赋值）</span></span><br><span class="line"><span class="comment">        d. 返回这个对象</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name, age</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name; </span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line"><span class="keyword">var</span> man = <span class="keyword">new</span> Person(<span class="string">"A"</span>);</span><br><span class="line">man.__proto__ == Person.prototype <span class="comment">// true </span></span><br><span class="line">Person.prototype.constructor  ===  Person<span class="comment">// true</span></span><br></pre></td></tr></table></figure><h2 id="深入了解"><a href="#深入了解" class="headerlink" title="深入了解"></a>深入了解</h2><p>知识点8： 当读取实例的属性时，会先查找与对象关联的原型中的属性，如果没有，就去找原型的原型，一直找到最顶层。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name, age</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name; </span><br><span class="line">&#125;</span><br><span class="line">Person.prototype.age = <span class="number">18</span>;</span><br><span class="line"><span class="keyword">var</span> man = <span class="keyword">new</span> Person(<span class="string">"A"</span>);</span><br><span class="line">man.age = <span class="number">20</span>;</span><br><span class="line">man.age <span class="comment">// 20</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">delete</span> man.age  <span class="comment">// true </span></span><br><span class="line">man.age <span class="comment">// 18</span></span><br></pre></td></tr></table></figure><p>知识点9： 上面我们知道了实例的<code>__proto__</code>指向构造函数，那么构造函数也会有<code>__proto__</code>,它指向的是<code>Object.prototype</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">man.__proto__.__proto__ == <span class="built_in">Object</span>.prototype <span class="comment">// true</span></span><br></pre></td></tr></table></figure><p>知识点10： 那么<code>Object.prototype</code> 的原型呢？ 我们已经知道了对象的<code>__proto</code>会指向原型,那么再试一次好了</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Object</span>.prototype.__proto__  <span class="comment">// null 等价于下面表达式</span></span><br><span class="line">man.__proto__.__proto__.__proto__ <span class="comment">// null</span></span><br></pre></td></tr></table></figure><p>所以在查找属性的时候，我们只需要查到 Object.prototype 就可以了，再往上就是<code>null</code>了。</p><p><img src="https://upload-images.jianshu.io/upload_images/7390508-4cbe3a1b7aa0afff.png?imageMogr2/auto-orient/" alt="img"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt; 来自我的javascript权威指南读书笔记&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;必备知识点：&quot;&gt;&lt;a href=&quot;#必备知识点：&quot; class=&quot;headerlink&quot; title=&quot;必备知识点：&quot;&gt;&lt;/a&gt;必备知识点：&lt;/h2
      
    
    </summary>
    
    
      <category term="js" scheme="https://apenshar.github.io/myBlog/tags/js/"/>
    
      <category term="面向对象编程" scheme="https://apenshar.github.io/myBlog/tags/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B/"/>
    
      <category term="原型链" scheme="https://apenshar.github.io/myBlog/tags/%E5%8E%9F%E5%9E%8B%E9%93%BE/"/>
    
  </entry>
  
  <entry>
    <title>JS中的函数讲解</title>
    <link href="https://apenshar.github.io/myBlog/2018-01-27-IEF-introduce.html"/>
    <id>https://apenshar.github.io/myBlog/2018-01-27-IEF-introduce.html</id>
    <published>2018-01-27T13:06:03.000Z</published>
    <updated>2018-02-10T09:32:24.844Z</updated>
    
    <content type="html"><![CDATA[<h3 id="函数类型"><a href="#函数类型" class="headerlink" title="函数类型"></a>函数类型</h3><blockquote><p>简单来说，函数可以分为以下3类：函数声明、函数表达式、匿名函数。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//函数声明</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">setFn</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// coding   </span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//函数表达式</span></span><br><span class="line"><span class="keyword">var</span> setFn = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// coding</span></span><br><span class="line">&#125;   </span><br><span class="line"></span><br><span class="line"><span class="comment">//匿名函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// coding</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="函数差异"><a href="#函数差异" class="headerlink" title="函数差异"></a>函数差异</h3><p>函数声明与函数表达式的不同在于：</p><ol><li>函数的声明带有变量提升效果，可在当前作用域下提前调用执行</li><li><p>函数表达式无变量提升，必须等该函数执行后，方可调用。否则<strong>会报错</strong>，<strong>会报错</strong>，<strong>会报错</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">setFn();</span><br><span class="line"><span class="keyword">var</span> setFn = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// coding</span></span><br><span class="line">&#125; </span><br><span class="line"><span class="comment">// 报错</span></span><br></pre></td></tr></table></figure></li><li><p>函数表达式可直接在函数后加括号调用。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">var</span> setFn = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">2</span>)</span><br><span class="line">&#125;()</span><br><span class="line"><span class="comment">//2</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="一些疑问？"><a href="#一些疑问？" class="headerlink" title="一些疑问？"></a>一些疑问？</h3><blockquote><p>Q : 立即执行函数 <code>(function(){})()</code> 可以看出很像函数表达式的调用，但为什么要加括号呢？<br>  A: 本质上是<code>()</code> 将匿名函数转化为函数表达式。<code>var setFn = function() {}()</code> 可以理解为在匿名函数前加了 = 运算符后，将函数声明转化为函数表达式，</p></blockquote><p>我们可以拿！，+，-，（）等运算符来测试。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">!<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">1</span>)</span><br><span class="line">&#125;()</span><br><span class="line"><span class="comment">// 1</span></span><br><span class="line">    </span><br><span class="line">+<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">2</span>)</span><br><span class="line">&#125;()</span><br><span class="line"><span class="comment">// 2</span></span><br><span class="line">    </span><br><span class="line">-<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">3</span>)</span><br><span class="line">&#125;()</span><br><span class="line"><span class="comment">// 3</span></span><br><span class="line">    </span><br><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">4</span>)</span><br><span class="line">&#125;)()</span><br><span class="line"><span class="comment">// 4</span></span><br></pre></td></tr></table></figure></p><p><strong> So , 加运算符可将函数声明转化为函数表达式，而之所以使用括号，是因为括号相对其他运算符会更安全。</strong></p><blockquote><p>传参一致性</p></blockquote><p>立即执行函数与正常函数传参一致。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params">a, b</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(a + b);</span><br><span class="line">&#125;)(<span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line"><span class="comment">// 3</span></span><br></pre></td></tr></table></figure></p><p><code>(function(){}())</code>这样写的好处是在内部定义的变量不会跟外部的变量有冲突，达到保护内部变量的作用，也不会污染全局变量。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;函数类型&quot;&gt;&lt;a href=&quot;#函数类型&quot; class=&quot;headerlink&quot; title=&quot;函数类型&quot;&gt;&lt;/a&gt;函数类型&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;简单来说，函数可以分为以下3类：函数声明、函数表达式、匿名函数。&lt;/p&gt;
&lt;/blockquote
      
    
    </summary>
    
    
      <category term="js" scheme="https://apenshar.github.io/myBlog/tags/js/"/>
    
      <category term="function" scheme="https://apenshar.github.io/myBlog/tags/function/"/>
    
  </entry>
  
  <entry>
    <title>canvas绘图入门</title>
    <link href="https://apenshar.github.io/myBlog/2018-01-27-canvas-introduce.html"/>
    <id>https://apenshar.github.io/myBlog/2018-01-27-canvas-introduce.html</id>
    <published>2018-01-27T13:00:42.000Z</published>
    <updated>2018-02-10T09:29:28.282Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>一篇言简意赅，让你快速入门canvas的技术贴</p></blockquote><h4 id="基本步骤如下"><a href="#基本步骤如下" class="headerlink" title="基本步骤如下"></a>基本步骤如下</h4><ol><li>拿到canvas标签  </li><li><strong>getContext获得canvas的上下文 把画笔的功能封装到ctx</strong></li><li>moveTo把画笔移动到(100,100)不设置moveTo 就没有lineTo</li><li>lineTo从点(100,100)到(200,100) ，再到(200,100)（指定路径，不画线） </li><li>stroke 开始画线</li><li>fill 内部填充</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> canvas= <span class="built_in">document</span>.getElementById(<span class="string">'canvas'</span>);</span><br><span class="line"><span class="keyword">var</span> ctx = canvas.getContext(<span class="string">'2d'</span>)</span><br><span class="line">ctx.moveTo(<span class="number">100</span>,<span class="number">100</span>) </span><br><span class="line">ctx.lineTo(<span class="number">200</span>,<span class="number">100</span>)</span><br><span class="line">ctx.lineTo(<span class="number">100</span>,<span class="number">200</span>)</span><br><span class="line">ctx.closePath ()<span class="comment">//闭合路径 直接补全</span></span><br><span class="line">ctx.strokeStyle=<span class="string">"rgba(25,10,25,0.6)"</span> </span><br><span class="line">ctx.stroke()<span class="comment">//开始画线 顺序不能换，先设置样式</span></span><br><span class="line">ctx.fillStyle= <span class="string">'red'</span></span><br><span class="line">ctx.fill()</span><br></pre></td></tr></table></figure><h4 id="进阶篇"><a href="#进阶篇" class="headerlink" title="进阶篇"></a>进阶篇</h4><p><strong>注意点</strong> ：不要给canva对象在css中宽高，直接在标签内设置内联样式或者js设置动态宽高。</p><h6 id="画60-60网格"><a href="#画60-60网格" class="headerlink" title="画60*60网格"></a>画60*60网格</h6><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">canvas.width=<span class="number">600</span>;</span><br><span class="line">canvas.height=<span class="number">600</span>;</span><br><span class="line"><span class="keyword">var</span> rectH=<span class="number">10</span>;<span class="keyword">var</span> rectW=<span class="number">10</span>;</span><br><span class="line">ctx.lineWidth =<span class="number">0.5</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i =<span class="number">0</span>;i&lt;canvas.width/rectH;i++)&#123;</span><br><span class="line">  <span class="comment">//画横线</span></span><br><span class="line">  ctx.moveTo(<span class="number">0</span>,i*rectH);</span><br><span class="line">  ctx.lineTo(canvas.width,i*rectH);</span><br><span class="line">  <span class="comment">//画竖线</span></span><br><span class="line">  ctx.moveTo(i*rectH,<span class="number">0</span>);</span><br><span class="line">  ctx.lineTo(i*rectH,canvas.height)</span><br><span class="line">&#125;</span><br><span class="line">ctx.stroke()</span><br></pre></td></tr></table></figure><h6 id="画多边形"><a href="#画多边形" class="headerlink" title="画多边形"></a>画多边形</h6><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ctx.rect(x,y,width,height);</span><br><span class="line">ctx.stroke();</span><br><span class="line">ctx.fillStyle=<span class="string">'red'</span>;</span><br><span class="line">ctx.fill();</span><br></pre></td></tr></table></figure><h6 id="画弧"><a href="#画弧" class="headerlink" title="画弧"></a>画弧</h6><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ctx.arc(x,y,r,startAngle,endAngle,<span class="literal">false</span>)<span class="comment">//false=顺时针</span></span><br></pre></td></tr></table></figure><h6 id="绘制图片"><a href="#绘制图片" class="headerlink" title="绘制图片"></a>绘制图片</h6><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ctx.drawImage()</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;一篇言简意赅，让你快速入门canvas的技术贴&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&quot;基本步骤如下&quot;&gt;&lt;a href=&quot;#基本步骤如下&quot; class=&quot;headerlink&quot; title=&quot;基本步骤如下&quot;&gt;&lt;/a&gt;基本步骤如下&lt;/h4
      
    
    </summary>
    
    
      <category term="js" scheme="https://apenshar.github.io/myBlog/tags/js/"/>
    
      <category term="canvas" scheme="https://apenshar.github.io/myBlog/tags/canvas/"/>
    
  </entry>
  
  <entry>
    <title>JS中的class进阶</title>
    <link href="https://apenshar.github.io/myBlog/2018-01-27-class-advance.html"/>
    <id>https://apenshar.github.io/myBlog/2018-01-27-class-advance.html</id>
    <published>2018-01-27T11:08:28.000Z</published>
    <updated>2018-02-10T09:30:05.713Z</updated>
    
    <content type="html"><![CDATA[<h4 id="如何利用class-继承Date对象"><a href="#如何利用class-继承Date对象" class="headerlink" title="如何利用class 继承Date对象"></a>如何利用class 继承Date对象</h4><p>要求如下：</p><ol><li>继承自<code>Date</code>，拥有Date对象的所有属性和方法 </li></ol><ol><li>可以自由拓展方法，比如说增加<code>getCentury</code></li></ol><blockquote><p>ES6</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * @authors apenshar</span></span><br><span class="line"><span class="comment"> * @date    2018-01-27 15:24:00</span></span><br><span class="line"><span class="comment"> * @title  class类的继承</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">myDate</span> <span class="keyword">extends</span> <span class="title">Date</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>() &#123;</span><br><span class="line">        <span class="keyword">super</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    getCentury() &#123; <span class="keyword">return</span> <span class="built_in">Math</span>.ceil(((<span class="keyword">this</span>.getFullYear() / <span class="number">100</span>))) &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> my = <span class="keyword">new</span> myDate;</span><br><span class="line">my.getCentury() <span class="comment">// 21</span></span><br></pre></td></tr></table></figure><blockquote><p>暴力混合 假继承</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * @authors apenshar</span></span><br><span class="line"><span class="comment"> * @date    2018-01-27 15:34:52</span></span><br><span class="line"><span class="comment"> * @title   暴力混合方法</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">myDate</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> _d = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">init</span>(<span class="params">that</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> methods = [<span class="string">'getDate'</span>,<span class="string">'getTime'</span>,<span class="string">'getDay'</span>,<span class="string">'getFullYear'</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; methods.length; i++) &#123;</span><br><span class="line">            that[methods[i]] = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">             <span class="keyword">return</span> _d[methods[i]]()</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    init(<span class="keyword">this</span>);</span><br><span class="line">    <span class="keyword">this</span>.getCentury = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span>  <span class="built_in">Math</span>.ceil(((<span class="keyword">this</span>.getFullYear() / <span class="number">100</span>))) &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> tt = <span class="keyword">new</span> mydate;</span><br><span class="line">tt.getCentury() <span class="comment">//21</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;如何利用class-继承Date对象&quot;&gt;&lt;a href=&quot;#如何利用class-继承Date对象&quot; class=&quot;headerlink&quot; title=&quot;如何利用class 继承Date对象&quot;&gt;&lt;/a&gt;如何利用class 继承Date对象&lt;/h4&gt;&lt;p&gt;要求如下：&lt;
      
    
    </summary>
    
    
      <category term="js" scheme="https://apenshar.github.io/myBlog/tags/js/"/>
    
      <category term="class" scheme="https://apenshar.github.io/myBlog/tags/class/"/>
    
      <category term="面向对象编程" scheme="https://apenshar.github.io/myBlog/tags/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>JS中的class入门</title>
    <link href="https://apenshar.github.io/myBlog/2018-01-27-class-introduce.html"/>
    <id>https://apenshar.github.io/myBlog/2018-01-27-class-introduce.html</id>
    <published>2018-01-27T11:03:49.000Z</published>
    <updated>2018-02-10T09:31:28.526Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>本章将会简单介绍JS中的class,希望这篇短小精悍的文章能给你一些启迪！</p></blockquote><ol><li>类的声明<strong>不会前置</strong>，<strong>不会前置</strong>，<strong>不会前置</strong>，这点很重要。所以必须先声明再使用，否则报错</li><li>类有3种方法<ul><li>构造方法</li><li>静态方法  实例不可调用，会出错</li><li>原型方法 可继承</li></ul></li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Car</span></span>&#123;</span><br><span class="line">   <span class="comment">//构造方法</span></span><br><span class="line">  <span class="keyword">constructor</span>(brand,money)&#123;</span><br><span class="line">    <span class="keyword">this</span>.brand = brand;</span><br><span class="line">    <span class="keyword">this</span>.money  =money; </span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//静态方法  实例不可调用</span></span><br><span class="line">  <span class="keyword">static</span> count()&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"I'm static methid"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//原型方法</span></span><br><span class="line">  getInfo()&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;<span class="keyword">this</span>.brand&#125;</span> costs <span class="subst">$&#123;<span class="keyword">this</span>.money&#125;</span>`</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> auto = <span class="keyword">new</span> Car(brand=<span class="string">"BMW"</span>,money=<span class="string">"$5554"</span>);</span><br><span class="line">auto.getInfo(); <span class="comment">//BMW costs $5554</span></span><br><span class="line">auto.count()  <span class="comment">//Uncaught TypeError: auto.count is not a function</span></span><br><span class="line">Car.count() <span class="comment">//I'm static methid</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;本章将会简单介绍JS中的class,希望这篇短小精悍的文章能给你一些启迪！&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ol&gt;
&lt;li&gt;类的声明&lt;strong&gt;不会前置&lt;/strong&gt;，&lt;strong&gt;不会前置&lt;/strong&gt;，&lt;strong&gt;不会前
      
    
    </summary>
    
    
      <category term="js" scheme="https://apenshar.github.io/myBlog/tags/js/"/>
    
      <category term="class" scheme="https://apenshar.github.io/myBlog/tags/class/"/>
    
      <category term="面向对象编程" scheme="https://apenshar.github.io/myBlog/tags/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B/"/>
    
      <category term="OOP" scheme="https://apenshar.github.io/myBlog/tags/OOP/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://apenshar.github.io/myBlog/2018-01-27-hello-world.html"/>
    <id>https://apenshar.github.io/myBlog/2018-01-27-hello-world.html</id>
    <published>2018-01-27T09:59:17.676Z</published>
    <updated>2018-01-27T11:05:35.851Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>加密算法浅析</title>
    <link href="https://apenshar.github.io/myBlog/2018-01-27-encrypt-introduce.html"/>
    <id>https://apenshar.github.io/myBlog/2018-01-27-encrypt-introduce.html</id>
    <published>2018-01-27T01:06:03.000Z</published>
    <updated>2018-02-10T10:26:18.849Z</updated>
    
    <content type="html"><![CDATA[<p>关于加密算法，可以分为一下三类： 对称加密、不对称加密和不可逆加密算法。</p><blockquote><h5 id="对称加密"><a href="#对称加密" class="headerlink" title="对称加密"></a><strong>对称加密</strong></h5></blockquote><p><strong>在对称加密算法中，使</strong>用的密钥只有一个，发收信双方都使用这个密钥对数据进行加密和解密，这就要求解密方事先必须知道加密密钥。对称加密算法的特点是算法公开、计算量小、加密速度快、加密效率高。不足之处是，<strong>交易双方</strong>都使用同样钥匙，<strong>安全性</strong>得不到保证。此外，每对用户每次使用对称加密算法时，都需要使用其他人不知道的惟一钥匙，这会使得发收信双方所拥有的钥匙数量成几何级数增长，密钥管理成为用户的负担。对称加密算法在分布式网络系统上使用较为困难，主要是因为密钥管理困难，使用成本较高。</p><blockquote><h5 id="不对称加密算法"><a href="#不对称加密算法" class="headerlink" title="不对称加密算法"></a><strong>不对称加密算法</strong></h5></blockquote><p>不对称加密算法使用两把<strong>完全不同</strong>但又是<strong>完全匹配</strong>的一对钥匙—<strong>公钥和私钥</strong>。在使用不对称加密算法加密文件时，只有使用匹配的一对公钥和私钥，才能完成对明文的加密和解密过程。加密明文时采用公钥加密，解密密文时使用私钥才能完成，而且发信方（加密者）必须知道收信方的公钥，只有收信方（解密者）才是唯一知道自己私钥的人。不对称加密算法的基本原理是，<strong>如果发信方想发送只有收信方才能解读的加密信息，发信方必须首先知道收信方的公钥，然后利用收信方的公钥来加密原文；收信方收到加密密文后，使用自己的私钥才能解密密文</strong>。显然，采用不对称加密算法，收发信双方在通信之前，收信方必须将自己早已随机生成的公钥送给发信方，而自己保留私钥。由于不对称算法拥有两个密钥，因而特别适用于分布式系统中的数据加密。 </p><blockquote><h5 id="不可逆加密"><a href="#不可逆加密" class="headerlink" title="不可逆加密"></a><strong>不可逆加密</strong></h5></blockquote><p>不可逆加密算法的特征是加密过程中不需要使用密钥，输入明文后由系统直接经过加密算法处理成密文，这种加密后的数据是无法被解密的，只有重新输入明文，并再次经过同样不可逆的加密算法处理，得到相同的加密密文并被系统重新识别后，才能真正解密。显然，在这类加密过程中，加密是自己，解密还得是自己，而所谓解密，实际上就是重新加一次密。不可逆加密算法不存在密钥保管和分发问题，非常适合在分布式网络系统上使用，但因加密计算复杂，工作量相当繁重，通常只在数据量有限的情形下使用，如广泛应用在计算机系统中的口令加密，利用的就是不可逆加密算法。</p><blockquote><h5 id="RSA"><a href="#RSA" class="headerlink" title="RSA"></a><strong>RSA</strong></h5></blockquote><p>RSA公钥加密算法是1977年由Ron Rivest、Adi Shamirh和LenAdleman在（美国麻省理工学院）开发的。RSA取名来自开发他们三者的名字。RSA是目前最有影响力的公钥加密算法，它能够抵抗到目前为止已知的所有密码攻击，已被ISO推荐为公钥数据加密标准。RSA算法基于一个十分简单的数论事实：<strong>将两个大素数相乘十分容易，但那时想要对其乘积进行因式分解却极其困难，因此可以将乘积公开作为加密密钥</strong>。 为提高保密强度，RSA密钥至少为500位长，一般推荐使用<strong>1024</strong>位。这就使加密的计算量很大。为减少计算量，在传送信息时，常采用传统加密方法与公开密钥加密方法相结合的方式，即信息采用改进的DES或IDEA对话密钥加密，然后使用RSA密钥加密对话密钥和信息摘要。对方收到信息后，用不同的密钥解密并可核对信息摘要。RSA算法是<strong>第一个能同时用于加密和数字签名</strong>的算法。</p><p>日常生活中，我们常用到RSA算法生成ssh远程登陆的公密钥</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa</span><br></pre></td></tr></table></figure><p>缺点 ：</p><ol><li>产生密钥很麻烦，受到素数产生技术的限制，因而难以做到一次一密。 </li><li>安全性，RSA的安全性依赖于大数的因子分解，但并没有从理论上证明破译RSA的难度与大数分解难度等价，而且密码学界多数人士倾向于因子分解不是NPC问题。</li><li>速度太慢，由于RSA 的分组长度太大，为保证安全性，n 至少也要 600 bitx以上，使运算代价很高，尤其是速度较慢，较对称密码算法慢几个数量级；且随着大数分解技术的发展，这个长度还在增加，不利于数据格式的标准化。</li></ol><blockquote><h5 id="DSA"><a href="#DSA" class="headerlink" title="DSA"></a><strong>DSA</strong></h5></blockquote><p>DSA(Digital Signature Algorithm)数字签算法被美国国家标准局用来做DSS数据签名标准(Digital Signature Standard)。DSA是基于整数有限域离散对数难题的，其安全性与RSA相比差不多。DSA的一个重要特点是两个素数公开，这样，当使用别人的p和q时，即使不知道私钥，你也能确认它们是否是随机产生的，还是作了手脚。RSA算法却做不到。DSA只是一种算法，和RSA不同之处在于它不能用作加密和解密，也不能进行密钥交换，只用于签名,它比RSA要快很多.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;关于加密算法，可以分为一下三类： 对称加密、不对称加密和不可逆加密算法。&lt;/p&gt;
&lt;blockquote&gt;
&lt;h5 id=&quot;对称加密&quot;&gt;&lt;a href=&quot;#对称加密&quot; class=&quot;headerlink&quot; title=&quot;对称加密&quot;&gt;&lt;/a&gt;&lt;strong&gt;对称加密&lt;/str
      
    
    </summary>
    
    
      <category term="Algorithm" scheme="https://apenshar.github.io/myBlog/tags/Algorithm/"/>
    
      <category term="encrypt" scheme="https://apenshar.github.io/myBlog/tags/encrypt/"/>
    
  </entry>
  
  <entry>
    <title>localStorage学习笔记</title>
    <link href="https://apenshar.github.io/myBlog/2017-12-28-localStorage-introduce.html"/>
    <id>https://apenshar.github.io/myBlog/2017-12-28-localStorage-introduce.html</id>
    <published>2017-12-28T13:00:42.000Z</published>
    <updated>2018-02-10T09:07:49.965Z</updated>
    
    <content type="html"><![CDATA[<h2 id="localStorage"><a href="#localStorage" class="headerlink" title="localStorage"></a>localStorage</h2><p>1.大小限制：5M<br>2.特性检测<br>    <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="built_in">window</span>.localStorage)&#123;    </span><br><span class="line">  alert(<span class="string">"浏览支持localStorage"</span>) </span><br><span class="line">  &#125;<span class="keyword">else</span>&#123; </span><br><span class="line">  alert(<span class="string">"浏览暂不支持localStorage"</span>)</span><br><span class="line">&#125; </span><br><span class="line"><span class="comment">//或者 </span></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">typeof</span> <span class="built_in">window</span>.localStorage == <span class="string">'undefined'</span>)&#123; </span><br><span class="line">  alert(<span class="string">"浏览暂不支持localStorage"</span>) </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>3.常见API<br>    <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> ls = <span class="built_in">window</span>.localStorage;</span><br><span class="line"><span class="keyword">var</span> name =<span class="string">"apen"</span>;</span><br><span class="line">ls.setItem(<span class="string">"name"</span>,name);</span><br><span class="line">ls.getItem(<span class="string">"name"</span>);</span><br><span class="line">ls.hasOwnProperty(<span class="string">'name'</span>)          <span class="comment">// true</span></span><br><span class="line">ls.propertyIsEnumerable(<span class="string">"name"</span>)   <span class="comment">//用来检测属性是否属于某个对象的</span></span><br><span class="line">ls.key(<span class="number">0</span>)               <span class="comment">//读取第1个数据的名字或称为键值</span></span><br><span class="line">ls.toLocaleString()<span class="comment">//将（数组）转为本地字符串</span></span><br><span class="line">ls.valueOf()        <span class="comment">//获取所有存储的数据</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i <span class="keyword">of</span> <span class="built_in">Object</span>.keys(ls))&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(i)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="demo"><a href="#demo" class="headerlink" title="demo"></a>demo</h2><h4 id="demo1"><a href="#demo1" class="headerlink" title="demo1"></a>demo1</h4><p>localStorage的增删改查<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> ls = <span class="built_in">window</span>.localStorage;</span><br><span class="line"><span class="keyword">var</span> name =<span class="string">"apen"</span>;</span><br><span class="line">ls.setItem(<span class="string">"name"</span>,name);</span><br><span class="line">ls.getItem(<span class="string">"name"</span>);</span><br><span class="line"></span><br><span class="line">ls.removeItem(<span class="string">"name"</span>)</span><br><span class="line">ls.clear();            <span class="comment">//全部删除</span></span><br></pre></td></tr></table></figure></p><h4 id="demo2"><a href="#demo2" class="headerlink" title="demo2"></a>demo2</h4><p>localStorage支持监听,我们在window全局上绑定一个监听storage事件，实现了同一个域名下不同页面之间的通讯<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.addEventListener(<span class="string">'storage'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(e)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><h2 id="Advance-amp-Application"><a href="#Advance-amp-Application" class="headerlink" title="Advance &amp; Application"></a>Advance &amp; Application</h2><p>1.将一段js代码存进localStorage,然后调用 <code>eval()</code>解析字符串并执行<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> ls = <span class="built_in">window</span>.localStorage;</span><br><span class="line"><span class="keyword">var</span> alertF =<span class="string">"alert(1+1)"</span>;</span><br><span class="line">ls.setItem(<span class="string">"alert"</span>,alertF)</span><br><span class="line"><span class="built_in">eval</span>(ls.getItem(<span class="string">"alert"</span>))</span><br></pre></td></tr></table></figure></p><p>2.滚动时保存滚动位置<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="built_in">window</span>).scroll(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">if</span>($(<span class="built_in">document</span>).scrollTop()!=<span class="number">0</span>)&#123;</span><br><span class="line">　  sessionStorage.setItem(<span class="string">"offsetTop"</span>, $(<span class="built_in">window</span>).scrollTop());<span class="comment">//保存滚动位置</span></span><br><span class="line">　&#125; </span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">//onload时，取出并滚动到上次保存位置</span></span><br><span class="line"> </span><br><span class="line"><span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">　　<span class="keyword">var</span> _offset = sessionStorage.getItem(<span class="string">"offsetTop"</span>);</span><br><span class="line">　　$(<span class="built_in">document</span>).scrollTop(_offset);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;localStorage&quot;&gt;&lt;a href=&quot;#localStorage&quot; class=&quot;headerlink&quot; title=&quot;localStorage&quot;&gt;&lt;/a&gt;localStorage&lt;/h2&gt;&lt;p&gt;1.大小限制：5M&lt;br&gt;2.特性检测&lt;br&gt;    &lt;fi
      
    
    </summary>
    
    
      <category term="js" scheme="https://apenshar.github.io/myBlog/tags/js/"/>
    
      <category term="webStorage" scheme="https://apenshar.github.io/myBlog/tags/webStorage/"/>
    
  </entry>
  
  <entry>
    <title>JS中的Date讲解</title>
    <link href="https://apenshar.github.io/myBlog/2017-12-25-date-introduce.html"/>
    <id>https://apenshar.github.io/myBlog/2017-12-25-date-introduce.html</id>
    <published>2017-12-25T13:00:42.000Z</published>
    <updated>2018-02-10T10:13:36.341Z</updated>
    
    <content type="html"><![CDATA[<h2 id="关于Date-与new-Date-的区别"><a href="#关于Date-与new-Date-的区别" class="headerlink" title="关于Date()与new Date()的区别"></a>关于Date()与new Date()的区别</h2><ol><li><p><code>Date()</code> 直接返回当前时间字符串，无视参数类型.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Date</span>();</span><br><span class="line"><span class="built_in">Date</span>(<span class="string">'sssss'</span>);</span><br><span class="line"><span class="built_in">Date</span>(<span class="number">1000</span>);</span><br><span class="line"><span class="comment">//"Mon Dec 25 2017 17:27:30 GMT+0800 (中国标准时间)"</span></span><br></pre></td></tr></table></figure></li><li><p><code>new Date()</code> 则是会根据参数来返回对应的值，无参数的时候，返回当前时间的字符串形式；有参数的时候返回参数所对应时间的字符串。new Date()对参数不管是格式还是内容都要求,且只返回字符串。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line"><span class="comment">//"Mon Dec 25 2017 17:27:30 GMT+0800 (中国标准时间)"</span></span><br><span class="line"><span class="keyword">new</span> <span class="built_in">Date</span>(<span class="number">1293879600000</span>);</span><br><span class="line"><span class="keyword">new</span> <span class="built_in">Date</span>(<span class="string">'2011-01-01T11:00:00'</span>)</span><br><span class="line"><span class="keyword">new</span> <span class="built_in">Date</span>(<span class="number">2011</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">11</span>,<span class="number">0</span>,<span class="number">0</span>)</span><br><span class="line"><span class="keyword">new</span> <span class="built_in">Date</span>(<span class="string">'jan 01 2011,11 11:00:00'</span>)</span><br><span class="line"><span class="keyword">new</span> <span class="built_in">Date</span>(<span class="string">'Sat Jan 01 2011 11:00:00'</span>)</span><br><span class="line"><span class="comment">//"Mon Dec 25 2017 17:27:30 GMT+0800 (中国标准时间)"</span></span><br></pre></td></tr></table></figure></li><li><p><code>new Date()</code>在解析一个具体的时间的时候，对参数有较严格的格式要求，格式不正确的时候会直接返回Invalid Date.<br><code>new Date(timestamp)</code> 中的时间戳必须是<code>number</code>格式，<code>string</code>会返回<code>Invalid Date</code>。比如<code>new Date(&#39;11111111&#39;)</code>这种写法就会报错</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">    <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="string">'sss'</span>);</span><br><span class="line">    <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="string">'2011/01/01T11:00:00'</span>);</span><br><span class="line">    <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="string">'2011-01-01-11:00:00'</span>)</span><br><span class="line">    <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="string">'1293879600000'</span>);</span><br><span class="line"><span class="comment">//Invalid Date</span></span><br></pre></td></tr></table></figure></li><li><p><code>new Date()</code> 的返回值是字符串，然而两个new Date()的结果字符串是可以直接相减的，结果为相差的毫秒数。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="built_in">Date</span>(<span class="string">'2011-01-01T11:00:00'</span>)-<span class="keyword">new</span> <span class="built_in">Date</span>(<span class="string">'1992/02/11 12:00:12'</span>)</span><br><span class="line"><span class="comment">//596069988000</span></span><br></pre></td></tr></table></figure></li></ol><h2 id="Advance"><a href="#Advance" class="headerlink" title="Advance"></a>Advance</h2><ul><li><p><code>+new Date()</code>可以快速将字符串转为时间戳</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">+<span class="keyword">new</span> <span class="built_in">Date</span>(<span class="number">1997</span>,<span class="number">3</span>,<span class="number">7</span>) == <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="number">1997</span>,<span class="number">3</span>,<span class="number">7</span>).getTime() <span class="comment">// true</span></span><br></pre></td></tr></table></figure></li><li><p>写一个函数可以将当前时间转化为“YYYY-MM-DD HH:MM:SS”格式输出</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">stamp</span> (<span class="params">stamp</span>)</span>&#123;</span><br><span class="line">   <span class="keyword">var</span> t = <span class="keyword">new</span> <span class="built_in">Date</span>(stamp).toJSON();</span><br><span class="line">   <span class="keyword">var</span> tstr = t.replace(<span class="regexp">/[a-zA-Z\.]/g</span>,<span class="string">"　"</span>).slice(<span class="number">0</span>,<span class="number">19</span>)</span><br><span class="line">    <span class="keyword">return</span> tstr</span><br><span class="line">&#125;</span><br><span class="line">stamp(<span class="number">11115545544</span>)</span><br><span class="line"><span class="comment">//"1970-05-09　15:39:05"</span></span><br><span class="line">stamp(<span class="keyword">new</span> <span class="built_in">Date</span>())</span><br><span class="line"><span class="comment">//"2018-02-10　09:40:17"</span></span><br></pre></td></tr></table></figure><p>因为toJSON方法得到的时间是格林尼治标准时间，与我们所在地的时间有出入，所以需要得到我们所在的时区，再做一次计算<br>下面是优化后的结果</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">stamp</span> (<span class="params">stamp</span>)</span>&#123;</span><br><span class="line"> <span class="keyword">var</span> timezone =<span class="keyword">new</span> <span class="built_in">Date</span>().getTimezoneOffset()/<span class="number">60</span>;</span><br><span class="line"> <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"> timezone </span>)</span>&#123;</span><br><span class="line">        <span class="keyword">var</span> t = stamp-timezone*<span class="number">60</span>*<span class="number">60</span>*<span class="number">1000</span>;</span><br><span class="line">        <span class="keyword">var</span> local = <span class="keyword">new</span> <span class="built_in">Date</span>(t).toJSON();</span><br><span class="line">        <span class="keyword">var</span> tstr = local.replace(<span class="regexp">/[a-zA-Z\.]/g</span>,<span class="string">"　"</span>).slice(<span class="number">0</span>,<span class="number">19</span>)</span><br><span class="line">        <span class="keyword">return</span> tstr</span><br><span class="line">    &#125;(timezone)</span><br><span class="line">&#125;</span><br><span class="line">stamp(<span class="keyword">new</span> <span class="built_in">Date</span>())</span><br><span class="line"><span class="comment">//"2018-02-10　18:12:05"</span></span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;关于Date-与new-Date-的区别&quot;&gt;&lt;a href=&quot;#关于Date-与new-Date-的区别&quot; class=&quot;headerlink&quot; title=&quot;关于Date()与new Date()的区别&quot;&gt;&lt;/a&gt;关于Date()与new Date()的区别&lt;/
      
    
    </summary>
    
    
      <category term="js" scheme="https://apenshar.github.io/myBlog/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>利用curl模拟HTTP请求</title>
    <link href="https://apenshar.github.io/myBlog/2017-12-11-curl-introduce.html"/>
    <id>https://apenshar.github.io/myBlog/2017-12-11-curl-introduce.html</id>
    <published>2017-12-11T13:06:03.000Z</published>
    <updated>2018-02-10T09:31:28.614Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>curl是一种命令行工具，作用是发出网络请求，然后得到和提取数据。<a href="https://link.jianshu.com/?t=http://www.ruanyifeng.com/blog/2011/09/curl.html" target="_blank" rel="noopener">curl网站开发指南</a></p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span>GET请求curl --trace output.txt www.sina.com</span><br><span class="line"></span><br><span class="line">curl -s -v -H "Accept: application/json"  "https:www.baidu.com" </span><br><span class="line">curl -X GET --header 'Accept: application/json' </span><br><span class="line">--header 'Authorization: eyJ0eX_snA'"https://www.baidu.com" </span><br><span class="line"></span><br><span class="line"><span class="meta">#</span>POST请求</span><br><span class="line">curl -X POST -s -v -H 'Accept: application/json' "https://www.baidu.com"</span><br><span class="line"><span class="meta">#</span>带有POST参数请求</span><br><span class="line">curl -X POST --header 'Content-Type: application/json' --header 'Accept: application/json' </span><br><span class="line">--header 'Authorization: eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJjaGFubmVsIjoisnA' </span><br><span class="line">-d '&#123; \ </span><br><span class="line">   "money": 12000, \ </span><br><span class="line">   "userIp": "" \ </span><br><span class="line"> &#125;' "https:www.baidu.com"</span><br></pre></td></tr></table></figure><ol><li><p>-X    curl默认的HTTP动词是GET，使用<code>-X</code>参数可以支持其他动词。</p></li><li><p>-H  or –header     自定义请求头</p></li><li><p>-d     带body数据</p></li><li><p>-v     显示一次http通信的整个过程，包括端口连接和http request头信息。</p></li><li><p>-i      显示http response的头信息，连同网页代码一起。</p></li><li><p>-o     下载文件</p></li><li><p>–trace     显示最详细的通信过程</p></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;curl是一种命令行工具，作用是发出网络请求，然后得到和提取数据。&lt;a href=&quot;https://link.jianshu.com/?t=http://www.ruanyifeng.com/blog/2011/09/curl.html&quot; targ
      
    
    </summary>
    
    
      <category term="Linux" scheme="https://apenshar.github.io/myBlog/tags/Linux/"/>
    
      <category term="HTTP" scheme="https://apenshar.github.io/myBlog/tags/HTTP/"/>
    
  </entry>
  
  <entry>
    <title>常见的前端算法</title>
    <link href="https://apenshar.github.io/myBlog/2017-09-22-fe-algorithm.html"/>
    <id>https://apenshar.github.io/myBlog/2017-09-22-fe-algorithm.html</id>
    <published>2017-09-22T13:00:42.000Z</published>
    <updated>2018-02-10T09:31:58.560Z</updated>
    
    <content type="html"><![CDATA[<h4 id="写一个-byField-函数，实现数组按姓名、年纪、任意字段排序"><a href="#写一个-byField-函数，实现数组按姓名、年纪、任意字段排序" class="headerlink" title="写一个 byField 函数，实现数组按姓名、年纪、任意字段排序"></a>写一个 byField 函数，实现数组按姓名、年纪、任意字段排序</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> users = [</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">"John"</span>, <span class="attr">age</span>: <span class="number">20</span>, <span class="attr">company</span>: <span class="string">"Baidu"</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">"Pete"</span>, <span class="attr">age</span>: <span class="number">18</span>, <span class="attr">company</span>: <span class="string">"Alibaba"</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">"Ann"</span>, <span class="attr">age</span>: <span class="number">19</span>, <span class="attr">company</span>: <span class="string">"Tecent"</span> &#125;</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">byFiled</span>(<span class="params">prop</span>)</span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">a,b</span>)</span>&#123;</span><br><span class="line"><span class="keyword">return</span> b[prop] -a[prop]</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(  users.sort(byField(<span class="string">'company'</span>))  )</span><br><span class="line"><span class="comment">// [&#123; name: "Pete", age: 18, company: "Alibaba" &#125;, &#123; name: "John", age: 20, company: "Baidu" &#125;,&#123; name: "Ann", age: 19, company: "Tecent" &#125; ]</span></span><br></pre></td></tr></table></figure><h4 id="词法作用域"><a href="#词法作用域" class="headerlink" title="词法作用域"></a>词法作用域</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a=<span class="number">10</span>;</span><br><span class="line"><span class="keyword">var</span> foo=&#123;</span><br><span class="line">a:<span class="number">20</span>,</span><br><span class="line">bar:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">var</span> a =<span class="number">20</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">this</span>.a;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">this</span>.a); <span class="comment">//10</span></span><br><span class="line"><span class="built_in">console</span>.log(foo.a); <span class="comment">//20</span></span><br><span class="line"><span class="built_in">console</span>.log(foo.bar());  <span class="comment">//20</span></span><br><span class="line"><span class="built_in">console</span>.log((foo.bar = foo.bar)()); <span class="comment">//10</span></span><br><span class="line"><span class="built_in">console</span>.log((foo.bar,foo.bar)()); <span class="comment">//10</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//每隔一秒钟显示弹窗 welcome</span></span><br><span class="line"><span class="keyword">var</span> g = setInterval(<span class="string">"alert('welcome');"</span>,<span class="number">1000</span>)</span><br></pre></td></tr></table></figure><h4 id="数组去重"><a href="#数组去重" class="headerlink" title="数组去重"></a>数组去重</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* ES6 Set集合 + 扩散符结构</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">ES6 </span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">3</span>]</span><br><span class="line">[... new <span class="built_in">Set</span>(arr)]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">3</span>]</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">unique</span>(<span class="params">arr</span>)</span>&#123;</span><br><span class="line"><span class="keyword">var</span> map =[];</span><br><span class="line"><span class="keyword">for</span> ( <span class="keyword">var</span> i = <span class="number">0</span>;i&lt;arr.length;i++)&#123;</span><br><span class="line"><span class="keyword">if</span> (map.indexOf(arr[i]) == <span class="number">-1</span>)&#123;</span><br><span class="line">map.push(arr[i])</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> map</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">unique</span>(<span class="params">arr</span>)</span>&#123;</span><br><span class="line"><span class="keyword">var</span> hash=&#123;&#125;;</span><br><span class="line"><span class="keyword">var</span> map=[];</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i =<span class="number">0</span>;i&lt;arr.length;i++)&#123;</span><br><span class="line">    <span class="keyword">if</span> (!hash[arr[i]])&#123;</span><br><span class="line">      hash[arr[i]]= <span class="literal">true</span>;</span><br><span class="line">      map.push(arr[i])</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> map</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="摧毁数组中的指定数"><a href="#摧毁数组中的指定数" class="headerlink" title="摧毁数组中的指定数"></a>摧毁数组中的指定数</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">destory</span>(<span class="params">arr,num</span>)</span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> v <span class="keyword">of</span> num)&#123; arr=arr.filter( <span class="function">(<span class="params">el</span>) =&gt;</span> el!==v )&#125;</span><br><span class="line"><span class="keyword">return</span> arr</span><br><span class="line">&#125;</span><br><span class="line">destory([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>],[<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>])</span><br><span class="line"><span class="comment">// [1]</span></span><br></pre></td></tr></table></figure><h4 id="统计字符串字母出现次数"><a href="#统计字符串字母出现次数" class="headerlink" title="统计字符串字母出现次数"></a>统计字符串字母出现次数</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr =[<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">4</span>,<span class="number">4</span>,<span class="number">4</span>,<span class="number">4</span>];</span><br><span class="line"><span class="keyword">var</span> hash=&#123;&#125;;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">count</span>(<span class="params">arr</span>)</span>&#123;</span><br><span class="line">      <span class="keyword">for</span> ( <span class="keyword">var</span> i <span class="keyword">of</span> arr )&#123;</span><br><span class="line">          <span class="keyword">if</span>( ! hash[i])&#123; hash[i] = <span class="number">1</span>;&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">          hash[i]=hash[i]+<span class="number">1</span>;</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> hash</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">count(arr)</span><br><span class="line"></span><br><span class="line"><span class="comment">// or </span></span><br><span class="line"><span class="keyword">var</span> arr =[<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">4</span>,<span class="number">4</span>,<span class="number">4</span>,<span class="number">4</span>];</span><br><span class="line"><span class="keyword">var</span> hash=&#123;&#125;;</span><br><span class="line">arr.map( <span class="function"><span class="params">i</span>=&gt;</span>&#123;</span><br><span class="line">hash[i] = hash[i]?hash[i]+<span class="number">1</span>:<span class="number">1</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Objcet.keys(hash);</span><br><span class="line"><span class="built_in">Object</span>.values(hash);</span><br></pre></td></tr></table></figure><h3 id="斐波那契数"><a href="#斐波那契数" class="headerlink" title="斐波那契数"></a>斐波那契数</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//递归</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fib</span>(<span class="params">num</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (num &lt; <span class="number">3</span>) &#123; <span class="keyword">return</span> <span class="number">1</span>&#125; </span><br><span class="line"><span class="keyword">return</span> fib(num<span class="number">-1</span>) + fib( num<span class="number">-2</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fib</span>(<span class="params">num</span>) </span>&#123;</span><br><span class="line"><span class="keyword">var</span> n1 =<span class="number">1</span>;</span><br><span class="line"><span class="keyword">var</span> n2 =<span class="number">1</span>;</span><br><span class="line"><span class="keyword">var</span> n3;</span><br><span class="line"><span class="keyword">if</span> (num &lt;<span class="number">3</span> ) &#123;<span class="keyword">return</span> <span class="number">1</span>&#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; num<span class="number">-2</span> ;i++)&#123;</span><br><span class="line"> n3 = n1 + n2;</span><br><span class="line">n1 = n2;</span><br><span class="line">n2 = n3;&#125;</span><br><span class="line"><span class="keyword">return</span> n3</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="排序算法"><a href="#排序算法" class="headerlink" title="排序算法"></a>排序算法</h4><h5 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.time()</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bubble</span>(<span class="params">arr</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i <span class="keyword">in</span> arr)&#123;</span><br><span class="line">        <span class="keyword">for</span>(j=<span class="number">0</span>;j&lt;arr.length<span class="number">-1</span>;j++)&#123;</span><br><span class="line">            <span class="keyword">if</span> (arr[j]&gt;arr[j+<span class="number">1</span>])&#123;</span><br><span class="line">                <span class="keyword">var</span> temp = arr[j]</span><br><span class="line">                 arr[j]=arr[j+<span class="number">1</span>] </span><br><span class="line">                arr[j+<span class="number">1</span>]=temp;</span><br><span class="line">      &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  <span class="keyword">return</span> arr</span><br><span class="line">&#125;</span><br><span class="line">bubble([<span class="number">7</span>,<span class="number">5</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">4</span>,<span class="number">3</span>,<span class="number">11</span>])</span><br><span class="line"><span class="built_in">console</span>.timeEnd()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//优化后</span></span><br><span class="line"><span class="built_in">console</span>.time()</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bubble</span>(<span class="params">arr</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i=arr.length<span class="number">-1</span>;i&gt;=<span class="number">0</span>;i--)&#123;</span><br><span class="line">        <span class="keyword">for</span>(j=<span class="number">0</span>;j&lt;i;j++)&#123;</span><br><span class="line">            <span class="keyword">if</span> (arr[j]&gt;arr[j+<span class="number">1</span>])&#123;</span><br><span class="line">                <span class="keyword">var</span> temp = arr[j]</span><br><span class="line">                 arr[j]=arr[j+<span class="number">1</span>] </span><br><span class="line">                arr[j+<span class="number">1</span>]=temp;</span><br><span class="line">      &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  <span class="keyword">return</span> arr</span><br><span class="line">&#125;</span><br><span class="line">bubble([<span class="number">7</span>,<span class="number">5</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">4</span>,<span class="number">3</span>,<span class="number">11</span>])</span><br><span class="line"><span class="built_in">console</span>.timeEnd()</span><br><span class="line"></span><br><span class="line"><span class="comment">//优化后</span></span><br><span class="line"><span class="built_in">console</span>.time()</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bubble</span>(<span class="params">arr</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i=arr.length<span class="number">-1</span>;i&gt;=<span class="number">0</span>;i--)&#123;</span><br><span class="line">      <span class="keyword">var</span> flag=<span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span>(j=<span class="number">0</span>;j&lt;i;j++)&#123;</span><br><span class="line">            <span class="keyword">if</span> (arr[j]&gt;arr[j+<span class="number">1</span>])&#123;</span><br><span class="line">                <span class="keyword">var</span> temp = arr[j]</span><br><span class="line">                arr[j]=arr[j+<span class="number">1</span>] </span><br><span class="line">                arr[j+<span class="number">1</span>]=temp;</span><br><span class="line">flag=<span class="number">1</span></span><br><span class="line">      &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      <span class="keyword">if</span> (flag==<span class="number">0</span>) &#123;<span class="keyword">return</span> arr&#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">return</span> arr</span><br><span class="line">&#125;</span><br><span class="line">bubble([<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>])</span><br><span class="line"><span class="built_in">console</span>.timeEnd()</span><br></pre></td></tr></table></figure><h5 id="插入排序"><a href="#插入排序" class="headerlink" title="插入排序"></a>插入排序</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.time()</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sort</span>(<span class="params">arr</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;arr.length+<span class="number">1</span>;i++)&#123;</span><br><span class="line"><span class="keyword">var</span> j=i<span class="number">-1</span></span><br><span class="line">        <span class="keyword">while</span> (j&gt;=<span class="number">0</span>&amp;&amp;arr[j]&gt;arr[j+<span class="number">1</span>])&#123;</span><br><span class="line">   <span class="keyword">var</span> tmp = arr[j+<span class="number">1</span>]</span><br><span class="line">arr[j+<span class="number">1</span>]=arr[j]</span><br><span class="line">            arr[j]=tmp</span><br><span class="line">           j--</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  <span class="keyword">return</span> arr</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(sort([<span class="number">7</span>,<span class="number">5</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">4</span>,<span class="number">3</span>,<span class="number">6</span>]))</span><br><span class="line"><span class="built_in">console</span>.timeEnd()</span><br><span class="line"><span class="comment">//default: 0.114013671875ms</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.time()</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sort1</span>(<span class="params">array</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> len = array.length,</span><br><span class="line">      i, j, tmp, result;</span><br><span class="line">  <span class="comment">// 设置数组副本</span></span><br><span class="line">  result = array.slice(<span class="number">0</span>);</span><br><span class="line">  <span class="keyword">for</span>(i=<span class="number">1</span>; i &lt; len; i++)&#123;</span><br><span class="line">    tmp = result[i];</span><br><span class="line">    j = i - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(j&gt;=<span class="number">0</span> &amp;&amp; tmp &lt; result[j])&#123;</span><br><span class="line">      result[j+<span class="number">1</span>] = result[j];</span><br><span class="line">      j--;</span><br><span class="line">    &#125;</span><br><span class="line">    result[j+<span class="number">1</span>] = tmp;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.timeEnd()</span><br></pre></td></tr></table></figure><h5 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.time()</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">quicksort</span>(<span class="params">arr</span>)</span>&#123;</span><br><span class="line">     <span class="keyword">if</span>(arr.length &lt;= <span class="number">1</span>)&#123;<span class="keyword">return</span> arr&#125;</span><br><span class="line">      <span class="keyword">var</span> num = <span class="built_in">Math</span>.floor(arr.length/<span class="number">2</span>)</span><br><span class="line">      <span class="keyword">var</span> middle = arr.splice(num,<span class="number">1</span>)</span><br><span class="line">      <span class="keyword">var</span> left = []</span><br><span class="line">      <span class="keyword">var</span> right = []</span><br><span class="line">      <span class="keyword">for</span> (x <span class="keyword">of</span> arr)&#123;</span><br><span class="line">          <span class="keyword">if</span> (x &lt; middle)&#123;</span><br><span class="line">              left.push(x)；</span><br><span class="line">          &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            right.push(x);</span><br><span class="line">          &#125;</span><br><span class="line">       &#125;</span><br><span class="line">      <span class="keyword">return</span> quicksort(left).concat(middle,quicksort(right))</span><br><span class="line">      &#125;</span><br><span class="line">quicksort([<span class="number">7</span>,<span class="number">5</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">4</span>,<span class="number">3</span>,<span class="number">6</span>])</span><br><span class="line"><span class="built_in">console</span>.timeEnd()</span><br><span class="line"><span class="comment">//default: 0.2509765625ms</span></span><br><span class="line"><span class="comment">//default: 0.22607421875ms 小数组不占优势</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.time()</span><br><span class="line"><span class="keyword">var</span> quickSort = <span class="function"><span class="keyword">function</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line">　　<span class="keyword">if</span> (arr.length &lt;= <span class="number">1</span>) &#123; <span class="keyword">return</span> arr; &#125;</span><br><span class="line">　　<span class="keyword">var</span> pivotIndex = <span class="built_in">Math</span>.floor(arr.length / <span class="number">2</span>);</span><br><span class="line">　　<span class="keyword">var</span> pivot = arr.splice(pivotIndex, <span class="number">1</span>)[<span class="number">0</span>];</span><br><span class="line">　　<span class="keyword">var</span> left = [];</span><br><span class="line">　　<span class="keyword">var</span> right = [];</span><br><span class="line">　　<span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; arr.length; i++)&#123;</span><br><span class="line">　　　　<span class="keyword">if</span> (arr[i] &lt; pivot) &#123;</span><br><span class="line">　　　　　　left.push(arr[i]);</span><br><span class="line">　　　　&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">　　　　　　right.push(arr[i]);</span><br><span class="line">　　　　&#125;</span><br><span class="line">　　&#125;</span><br><span class="line">　　<span class="keyword">return</span> quickSort(left).concat([pivot], quickSort(right));</span><br><span class="line">&#125;;</span><br><span class="line">quicksort([<span class="number">7</span>,<span class="number">5</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">4</span>,<span class="number">3</span>,<span class="number">6</span>])</span><br><span class="line"><span class="built_in">console</span>.timeEnd()</span><br><span class="line"><span class="comment">//default: 0.18896484375ms</span></span><br><span class="line"><span class="comment">//default: 0.176025390625ms</span></span><br><span class="line"><span class="comment">//for (x of arr)速度比for (var i = 0; i &lt; arr.length; i++)慢</span></span><br></pre></td></tr></table></figure><h5 id="合并排序"><a href="#合并排序" class="headerlink" title="合并排序"></a>合并排序</h5><p>将无序的数组 拆成N部分进行有序处理，然后合并；</p><p>参考代码： <a href="https://gist.github.com/paullewis/1982121" target="_blank" rel="noopener">https://gist.github.com/paullewis/1982121</a></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sort9</span>(<span class="params">array</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> result = array.slice(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 递归调用合并函数</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">sort</span>(<span class="params">array</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> length = array.length,</span><br><span class="line"></span><br><span class="line">    mid = <span class="built_in">Math</span>.floor(length * <span class="number">0.5</span>),</span><br><span class="line"></span><br><span class="line">    left = array.slice(<span class="number">0</span>, mid),</span><br><span class="line"></span><br><span class="line">    right = array.slice(mid, length);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (length === <span class="number">1</span>) &#123;</span><br><span class="line"></span><br><span class="line">     <span class="keyword">return</span> array;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> merge(sort(left), sort(right));</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 合并 两有序的数组</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">merge</span>(<span class="params">left, right</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> result = [];</span><br><span class="line">    <span class="keyword">while</span> (left.length || right.length) &#123;</span><br><span class="line">      <span class="keyword">if</span> (left.length &amp;&amp; right.length) &#123;</span><br><span class="line">        <span class="keyword">if</span> (left[<span class="number">0</span>] &lt; right[<span class="number">0</span>]) &#123;</span><br><span class="line">          result.push(left.shift());</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          result.push(right.shift());</span><br><span class="line">        &#125;</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (left.length) &#123;</span><br><span class="line">        result.push(left.shift());</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        result.push(right.shift());</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> sort(result);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="md5加密算法"><a href="#md5加密算法" class="headerlink" title="md5加密算法"></a>md5加密算法</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br></pre></td><td class="code"><pre><span class="line">md5Value = hex_md5(<span class="string">"石头剪刀布"</span>)</span><br><span class="line">&lt;script&gt;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* A JavaScript implementation of the RSA Data Security, Inc. MD5 Message</span></span><br><span class="line"><span class="comment">* Digest Algorithm, as defined in RFC 1321.</span></span><br><span class="line"><span class="comment">* Version 2.1 Copyright (C) Paul Johnston 1999 - 2002.</span></span><br><span class="line"><span class="comment">* Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet</span></span><br><span class="line"><span class="comment">* Distributed under the BSD License</span></span><br><span class="line"><span class="comment">* See http://pajhome.org.uk/crypt/md5 for more info.</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* Configurable variables. You may need to tweak these to be compatible with</span></span><br><span class="line"><span class="comment">* the server-side, but the defaults work in most cases.</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">var</span> hexcase = <span class="number">0</span>; <span class="comment">/* hex output format. 0 - lowercase; 1 - uppercase */</span></span><br><span class="line"><span class="keyword">var</span> b64pad = <span class="string">""</span>; <span class="comment">/* base-64 pad character. "=" for strict RFC compliance */</span></span><br><span class="line"><span class="keyword">var</span> chrsz = <span class="number">8</span>; <span class="comment">/* bits per input character. 8 - ASCII; 16 - Unicode */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* These are the functions you'll usually want to call</span></span><br><span class="line"><span class="comment">* They take string arguments and return either hex or base-64 encoded strings</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">hex_md5</span>(<span class="params">s</span>)</span>&#123; <span class="keyword">return</span> binl2hex(core_md5(str2binl(s), s.length * chrsz));&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">b64_md5</span>(<span class="params">s</span>)</span>&#123; <span class="keyword">return</span> binl2b64(core_md5(str2binl(s), s.length * chrsz));&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">str_md5</span>(<span class="params">s</span>)</span>&#123; <span class="keyword">return</span> binl2str(core_md5(str2binl(s), s.length * chrsz));&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">hex_hmac_md5</span>(<span class="params">key, data</span>) </span>&#123; <span class="keyword">return</span> binl2hex(core_hmac_md5(key, data)); &#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">b64_hmac_md5</span>(<span class="params">key, data</span>) </span>&#123; <span class="keyword">return</span> binl2b64(core_hmac_md5(key, data)); &#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">str_hmac_md5</span>(<span class="params">key, data</span>) </span>&#123; <span class="keyword">return</span> binl2str(core_hmac_md5(key, data)); &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* Perform a simple self-test to see if the VM is working</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">md5_vm_test</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> hex_md5(<span class="string">"abc"</span>) == <span class="string">"900150983cd24fb0d6963f7d28e17f72"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* Calculate the MD5 of an array of little-endian words, and a bit length</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">core_md5</span>(<span class="params">x, len</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">/* append padding */</span></span><br><span class="line">x[len &gt;&gt; <span class="number">5</span>] |= <span class="number">0x80</span> &lt;&lt; ((len) % <span class="number">32</span>);</span><br><span class="line">x[(((len + <span class="number">64</span>) &gt;&gt;&gt; <span class="number">9</span>) &lt;&lt; <span class="number">4</span>) + <span class="number">14</span>] = len;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> a = <span class="number">1732584193</span>;</span><br><span class="line"><span class="keyword">var</span> b = <span class="number">-271733879</span>;</span><br><span class="line"><span class="keyword">var</span> c = <span class="number">-1732584194</span>;</span><br><span class="line"><span class="keyword">var</span> d = <span class="number">271733878</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; x.length; i += <span class="number">16</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">var</span> olda = a;</span><br><span class="line"><span class="keyword">var</span> oldb = b;</span><br><span class="line"><span class="keyword">var</span> oldc = c;</span><br><span class="line"><span class="keyword">var</span> oldd = d;</span><br><span class="line"></span><br><span class="line">a = md5_ff(a, b, c, d, x[i+ <span class="number">0</span>], <span class="number">7</span> , <span class="number">-680876936</span>);</span><br><span class="line">d = md5_ff(d, a, b, c, x[i+ <span class="number">1</span>], <span class="number">12</span>, <span class="number">-389564586</span>);</span><br><span class="line">c = md5_ff(c, d, a, b, x[i+ <span class="number">2</span>], <span class="number">17</span>, <span class="number">606105819</span>);</span><br><span class="line">b = md5_ff(b, c, d, a, x[i+ <span class="number">3</span>], <span class="number">22</span>, <span class="number">-1044525330</span>);</span><br><span class="line">a = md5_ff(a, b, c, d, x[i+ <span class="number">4</span>], <span class="number">7</span> , <span class="number">-176418897</span>);</span><br><span class="line">d = md5_ff(d, a, b, c, x[i+ <span class="number">5</span>], <span class="number">12</span>, <span class="number">1200080426</span>);</span><br><span class="line">c = md5_ff(c, d, a, b, x[i+ <span class="number">6</span>], <span class="number">17</span>, <span class="number">-1473231341</span>);</span><br><span class="line">b = md5_ff(b, c, d, a, x[i+ <span class="number">7</span>], <span class="number">22</span>, <span class="number">-45705983</span>);</span><br><span class="line">a = md5_ff(a, b, c, d, x[i+ <span class="number">8</span>], <span class="number">7</span> , <span class="number">1770035416</span>);</span><br><span class="line">d = md5_ff(d, a, b, c, x[i+ <span class="number">9</span>], <span class="number">12</span>, <span class="number">-1958414417</span>);</span><br><span class="line">c = md5_ff(c, d, a, b, x[i+<span class="number">10</span>], <span class="number">17</span>, <span class="number">-42063</span>);</span><br><span class="line">b = md5_ff(b, c, d, a, x[i+<span class="number">11</span>], <span class="number">22</span>, <span class="number">-1990404162</span>);</span><br><span class="line">a = md5_ff(a, b, c, d, x[i+<span class="number">12</span>], <span class="number">7</span> , <span class="number">1804603682</span>);</span><br><span class="line">d = md5_ff(d, a, b, c, x[i+<span class="number">13</span>], <span class="number">12</span>, <span class="number">-40341101</span>);</span><br><span class="line">c = md5_ff(c, d, a, b, x[i+<span class="number">14</span>], <span class="number">17</span>, <span class="number">-1502002290</span>);</span><br><span class="line">b = md5_ff(b, c, d, a, x[i+<span class="number">15</span>], <span class="number">22</span>, <span class="number">1236535329</span>);</span><br><span class="line"></span><br><span class="line">a = md5_gg(a, b, c, d, x[i+ <span class="number">1</span>], <span class="number">5</span> , <span class="number">-165796510</span>);</span><br><span class="line">d = md5_gg(d, a, b, c, x[i+ <span class="number">6</span>], <span class="number">9</span> , <span class="number">-1069501632</span>);</span><br><span class="line">c = md5_gg(c, d, a, b, x[i+<span class="number">11</span>], <span class="number">14</span>, <span class="number">643717713</span>);</span><br><span class="line">b = md5_gg(b, c, d, a, x[i+ <span class="number">0</span>], <span class="number">20</span>, <span class="number">-373897302</span>);</span><br><span class="line">a = md5_gg(a, b, c, d, x[i+ <span class="number">5</span>], <span class="number">5</span> , <span class="number">-701558691</span>);</span><br><span class="line">d = md5_gg(d, a, b, c, x[i+<span class="number">10</span>], <span class="number">9</span> , <span class="number">38016083</span>);</span><br><span class="line">c = md5_gg(c, d, a, b, x[i+<span class="number">15</span>], <span class="number">14</span>, <span class="number">-660478335</span>);</span><br><span class="line">b = md5_gg(b, c, d, a, x[i+ <span class="number">4</span>], <span class="number">20</span>, <span class="number">-405537848</span>);</span><br><span class="line">a = md5_gg(a, b, c, d, x[i+ <span class="number">9</span>], <span class="number">5</span> , <span class="number">568446438</span>);</span><br><span class="line">d = md5_gg(d, a, b, c, x[i+<span class="number">14</span>], <span class="number">9</span> , <span class="number">-1019803690</span>);</span><br><span class="line">c = md5_gg(c, d, a, b, x[i+ <span class="number">3</span>], <span class="number">14</span>, <span class="number">-187363961</span>);</span><br><span class="line">b = md5_gg(b, c, d, a, x[i+ <span class="number">8</span>], <span class="number">20</span>, <span class="number">1163531501</span>);</span><br><span class="line">a = md5_gg(a, b, c, d, x[i+<span class="number">13</span>], <span class="number">5</span> , <span class="number">-1444681467</span>);</span><br><span class="line">d = md5_gg(d, a, b, c, x[i+ <span class="number">2</span>], <span class="number">9</span> , <span class="number">-51403784</span>);</span><br><span class="line">c = md5_gg(c, d, a, b, x[i+ <span class="number">7</span>], <span class="number">14</span>, <span class="number">1735328473</span>);</span><br><span class="line">b = md5_gg(b, c, d, a, x[i+<span class="number">12</span>], <span class="number">20</span>, <span class="number">-1926607734</span>);</span><br><span class="line"></span><br><span class="line">a = md5_hh(a, b, c, d, x[i+ <span class="number">5</span>], <span class="number">4</span> , <span class="number">-378558</span>);</span><br><span class="line">d = md5_hh(d, a, b, c, x[i+ <span class="number">8</span>], <span class="number">11</span>, <span class="number">-2022574463</span>);</span><br><span class="line">c = md5_hh(c, d, a, b, x[i+<span class="number">11</span>], <span class="number">16</span>, <span class="number">1839030562</span>);</span><br><span class="line">b = md5_hh(b, c, d, a, x[i+<span class="number">14</span>], <span class="number">23</span>, <span class="number">-35309556</span>);</span><br><span class="line">a = md5_hh(a, b, c, d, x[i+ <span class="number">1</span>], <span class="number">4</span> , <span class="number">-1530992060</span>);</span><br><span class="line">d = md5_hh(d, a, b, c, x[i+ <span class="number">4</span>], <span class="number">11</span>, <span class="number">1272893353</span>);</span><br><span class="line">c = md5_hh(c, d, a, b, x[i+ <span class="number">7</span>], <span class="number">16</span>, <span class="number">-155497632</span>);</span><br><span class="line">b = md5_hh(b, c, d, a, x[i+<span class="number">10</span>], <span class="number">23</span>, <span class="number">-1094730640</span>);</span><br><span class="line">a = md5_hh(a, b, c, d, x[i+<span class="number">13</span>], <span class="number">4</span> , <span class="number">681279174</span>);</span><br><span class="line">d = md5_hh(d, a, b, c, x[i+ <span class="number">0</span>], <span class="number">11</span>, <span class="number">-358537222</span>);</span><br><span class="line">c = md5_hh(c, d, a, b, x[i+ <span class="number">3</span>], <span class="number">16</span>, <span class="number">-722521979</span>);</span><br><span class="line">b = md5_hh(b, c, d, a, x[i+ <span class="number">6</span>], <span class="number">23</span>, <span class="number">76029189</span>);</span><br><span class="line">a = md5_hh(a, b, c, d, x[i+ <span class="number">9</span>], <span class="number">4</span> , <span class="number">-640364487</span>);</span><br><span class="line">d = md5_hh(d, a, b, c, x[i+<span class="number">12</span>], <span class="number">11</span>, <span class="number">-421815835</span>);</span><br><span class="line">c = md5_hh(c, d, a, b, x[i+<span class="number">15</span>], <span class="number">16</span>, <span class="number">530742520</span>);</span><br><span class="line">b = md5_hh(b, c, d, a, x[i+ <span class="number">2</span>], <span class="number">23</span>, <span class="number">-995338651</span>);</span><br><span class="line"></span><br><span class="line">a = md5_ii(a, b, c, d, x[i+ <span class="number">0</span>], <span class="number">6</span> , <span class="number">-198630844</span>);</span><br><span class="line">d = md5_ii(d, a, b, c, x[i+ <span class="number">7</span>], <span class="number">10</span>, <span class="number">1126891415</span>);</span><br><span class="line">c = md5_ii(c, d, a, b, x[i+<span class="number">14</span>], <span class="number">15</span>, <span class="number">-1416354905</span>);</span><br><span class="line">b = md5_ii(b, c, d, a, x[i+ <span class="number">5</span>], <span class="number">21</span>, <span class="number">-57434055</span>);</span><br><span class="line">a = md5_ii(a, b, c, d, x[i+<span class="number">12</span>], <span class="number">6</span> , <span class="number">1700485571</span>);</span><br><span class="line">d = md5_ii(d, a, b, c, x[i+ <span class="number">3</span>], <span class="number">10</span>, <span class="number">-1894986606</span>);</span><br><span class="line">c = md5_ii(c, d, a, b, x[i+<span class="number">10</span>], <span class="number">15</span>, <span class="number">-1051523</span>);</span><br><span class="line">b = md5_ii(b, c, d, a, x[i+ <span class="number">1</span>], <span class="number">21</span>, <span class="number">-2054922799</span>);</span><br><span class="line">a = md5_ii(a, b, c, d, x[i+ <span class="number">8</span>], <span class="number">6</span> , <span class="number">1873313359</span>);</span><br><span class="line">d = md5_ii(d, a, b, c, x[i+<span class="number">15</span>], <span class="number">10</span>, <span class="number">-30611744</span>);</span><br><span class="line">c = md5_ii(c, d, a, b, x[i+ <span class="number">6</span>], <span class="number">15</span>, <span class="number">-1560198380</span>);</span><br><span class="line">b = md5_ii(b, c, d, a, x[i+<span class="number">13</span>], <span class="number">21</span>, <span class="number">1309151649</span>);</span><br><span class="line">a = md5_ii(a, b, c, d, x[i+ <span class="number">4</span>], <span class="number">6</span> , <span class="number">-145523070</span>);</span><br><span class="line">d = md5_ii(d, a, b, c, x[i+<span class="number">11</span>], <span class="number">10</span>, <span class="number">-1120210379</span>);</span><br><span class="line">c = md5_ii(c, d, a, b, x[i+ <span class="number">2</span>], <span class="number">15</span>, <span class="number">718787259</span>);</span><br><span class="line">b = md5_ii(b, c, d, a, x[i+ <span class="number">9</span>], <span class="number">21</span>, <span class="number">-343485551</span>);</span><br><span class="line"></span><br><span class="line">a = safe_add(a, olda);</span><br><span class="line">b = safe_add(b, oldb);</span><br><span class="line">c = safe_add(c, oldc);</span><br><span class="line">d = safe_add(d, oldd);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">Array</span>(a, b, c, d);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* These functions implement the four basic operations the algorithm uses.</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">md5_cmn</span>(<span class="params">q, a, b, x, s, t</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> safe_add(bit_rol(safe_add(safe_add(a, q), safe_add(x, t)), s),b);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">md5_ff</span>(<span class="params">a, b, c, d, x, s, t</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> md5_cmn((b &amp; c) | ((~b) &amp; d), a, b, x, s, t);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">md5_gg</span>(<span class="params">a, b, c, d, x, s, t</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> md5_cmn((b &amp; d) | (c &amp; (~d)), a, b, x, s, t);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">md5_hh</span>(<span class="params">a, b, c, d, x, s, t</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> md5_cmn(b ^ c ^ d, a, b, x, s, t);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">md5_ii</span>(<span class="params">a, b, c, d, x, s, t</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> md5_cmn(c ^ (b | (~d)), a, b, x, s, t);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* Calculate the HMAC-MD5, of a key and some data</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">core_hmac_md5</span>(<span class="params">key, data</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">var</span> bkey = str2binl(key);</span><br><span class="line"><span class="keyword">if</span>(bkey.length &gt; <span class="number">16</span>) bkey = core_md5(bkey, key.length * chrsz);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> ipad = <span class="built_in">Array</span>(<span class="number">16</span>), opad = <span class="built_in">Array</span>(<span class="number">16</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">16</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">ipad[i] = bkey[i] ^ <span class="number">0x36363636</span>;</span><br><span class="line">opad[i] = bkey[i] ^ <span class="number">0x5C5C5C5C</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> hash = core_md5(ipad.concat(str2binl(data)), <span class="number">512</span> + data.length * chrsz);</span><br><span class="line"><span class="keyword">return</span> core_md5(opad.concat(hash), <span class="number">512</span> + <span class="number">128</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* Add integers, wrapping at 2^32. This uses 16-bit operations internally</span></span><br><span class="line"><span class="comment">* to work around bugs in some JS interpreters.</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">safe_add</span>(<span class="params">x, y</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">var</span> lsw = (x &amp; <span class="number">0xFFFF</span>) + (y &amp; <span class="number">0xFFFF</span>);</span><br><span class="line"><span class="keyword">var</span> msw = (x &gt;&gt; <span class="number">16</span>) + (y &gt;&gt; <span class="number">16</span>) + (lsw &gt;&gt; <span class="number">16</span>);</span><br><span class="line"><span class="keyword">return</span> (msw &lt;&lt; <span class="number">16</span>) | (lsw &amp; <span class="number">0xFFFF</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* Bitwise rotate a 32-bit number to the left.</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bit_rol</span>(<span class="params">num, cnt</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> (num &lt;&lt; cnt) | (num &gt;&gt;&gt; (<span class="number">32</span> - cnt));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* Convert a string to an array of little-endian words</span></span><br><span class="line"><span class="comment">* If chrsz is ASCII, characters &gt;255 have their hi-byte silently ignored.</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">str2binl</span>(<span class="params">str</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">var</span> bin = <span class="built_in">Array</span>();</span><br><span class="line"><span class="keyword">var</span> mask = (<span class="number">1</span> &lt;&lt; chrsz) - <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; str.length * chrsz; i += chrsz)</span><br><span class="line">bin[i&gt;&gt;<span class="number">5</span>] |= (str.charCodeAt(i / chrsz) &amp; mask) &lt;&lt; (i%<span class="number">32</span>);</span><br><span class="line"><span class="keyword">return</span> bin;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* Convert an array of little-endian words to a string</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">binl2str</span>(<span class="params">bin</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">var</span> str = <span class="string">""</span>;</span><br><span class="line"><span class="keyword">var</span> mask = (<span class="number">1</span> &lt;&lt; chrsz) - <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; bin.length * <span class="number">32</span>; i += chrsz)</span><br><span class="line">str += <span class="built_in">String</span>.fromCharCode((bin[i&gt;&gt;<span class="number">5</span>] &gt;&gt;&gt; (i % <span class="number">32</span>)) &amp; mask);</span><br><span class="line"><span class="keyword">return</span> str;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* Convert an array of little-endian words to a hex string.</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">binl2hex</span>(<span class="params">binarray</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">var</span> hex_tab = hexcase ? <span class="string">"0123456789ABCDEF"</span> : <span class="string">"0123456789abcdef"</span>;</span><br><span class="line"><span class="keyword">var</span> str = <span class="string">""</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; binarray.length * <span class="number">4</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">str += hex_tab.charAt((binarray[i&gt;&gt;<span class="number">2</span>] &gt;&gt; ((i%<span class="number">4</span>)*<span class="number">8</span>+<span class="number">4</span>)) &amp; <span class="number">0xF</span>) +</span><br><span class="line">hex_tab.charAt((binarray[i&gt;&gt;<span class="number">2</span>] &gt;&gt; ((i%<span class="number">4</span>)*<span class="number">8</span> )) &amp; <span class="number">0xF</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> str;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* Convert an array of little-endian words to a base-64 string</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">binl2b64</span>(<span class="params">binarray</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">var</span> tab = <span class="string">"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/"</span>;</span><br><span class="line"><span class="keyword">var</span> str = <span class="string">""</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; binarray.length * <span class="number">4</span>; i += <span class="number">3</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">var</span> triplet = (((binarray[i &gt;&gt; <span class="number">2</span>] &gt;&gt; <span class="number">8</span> * ( i %<span class="number">4</span>)) &amp; <span class="number">0xFF</span>) &lt;&lt; <span class="number">16</span>)</span><br><span class="line">| (((binarray[i+<span class="number">1</span> &gt;&gt; <span class="number">2</span>] &gt;&gt; <span class="number">8</span> * ((i+<span class="number">1</span>)%<span class="number">4</span>)) &amp; <span class="number">0xFF</span>) &lt;&lt; <span class="number">8</span> )</span><br><span class="line">| ((binarray[i+<span class="number">2</span> &gt;&gt; <span class="number">2</span>] &gt;&gt; <span class="number">8</span> * ((i+<span class="number">2</span>)%<span class="number">4</span>)) &amp; <span class="number">0xFF</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> j = <span class="number">0</span>; j &lt; <span class="number">4</span>; j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(i * <span class="number">8</span> + j * <span class="number">6</span> &gt; binarray.length * <span class="number">32</span>) str += b64pad;</span><br><span class="line"><span class="keyword">else</span> str += tab.charAt((triplet &gt;&gt; <span class="number">6</span>*(<span class="number">3</span>-j)) &amp; <span class="number">0x3F</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> str;</span><br><span class="line">&#125;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;写一个-byField-函数，实现数组按姓名、年纪、任意字段排序&quot;&gt;&lt;a href=&quot;#写一个-byField-函数，实现数组按姓名、年纪、任意字段排序&quot; class=&quot;headerlink&quot; title=&quot;写一个 byField 函数，实现数组按姓名、年纪、任意
      
    
    </summary>
    
    
      <category term="js" scheme="https://apenshar.github.io/myBlog/tags/js/"/>
    
      <category term="Algorithm" scheme="https://apenshar.github.io/myBlog/tags/Algorithm/"/>
    
  </entry>
  
</feed>
