<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Apen Shar&#39;s Tech Blog</title>
  
  <subtitle>你的Bug由我来守护</subtitle>
  <link href="/myBlog/atom.xml" rel="self"/>
  
  <link href="https://apenshar.github.io/myBlog/"/>
  <updated>2018-03-10T10:48:10.960Z</updated>
  <id>https://apenshar.github.io/myBlog/</id>
  
  <author>
    <name>Apen Shar</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>node.js实现的音乐爬虫</title>
    <link href="https://apenshar.github.io/myBlog/2018-03-10-node-crawl-musicforprogramming.html"/>
    <id>https://apenshar.github.io/myBlog/2018-03-10-node-crawl-musicforprogramming.html</id>
    <published>2018-03-10T06:28:00.000Z</published>
    <updated>2018-03-10T10:48:10.960Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Write-Before"><a href="#Write-Before" class="headerlink" title="Write Before"></a>Write Before</h2><p>自从写了Pokemon-TCG的爬虫后，感觉还不过瘾，想爬点音乐试一下，就把以前收藏的一个音乐小站的地址给找了出来，<code>http://musicforprogramming.net/js/</code>。这个网站收集的音乐大多是一些迷幻的白噪音和大自然的声音，适合程序猿敲代码的时候静静体会，放浪形骸之外，进入太虚幻境，成功达到人与代码的大和谐！</p><p>废话不多说了，扯代码了，如下:</p><h2 id="Requirement"><a href="#Requirement" class="headerlink" title="Requirement"></a>Requirement</h2><blockquote><p><strong>cheer.io</strong>                   </p><p> 为服务器特别定制的，快速、灵活、实施的jQuery核心实现.</p></blockquote><p>通过这个库我们可以通过熟悉的jQuery操作来获取目标节点的全部信息了，写node爬虫的人基本上都用过这个吧.</p><p>How to use</p><hr><ol><li>在目录下执行 <code>npm i cheerio -S</code></li><li>终端里执行 <code>node musicforprogramming-crawl.js</code></li><li>静静地等待一段时间（文件大概有4个G），去当前目录下查找新增的<code>songs</code>文件夹，刚刚下载的音乐都存这里了，带上耳机好好享受吧。</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * musicforprogramming-crawl.js</span></span><br><span class="line"><span class="comment"> * @authors Apen Shar (apenshar@gmail.com)</span></span><br><span class="line"><span class="comment"> * @date    2018-03-10 11:19:43</span></span><br><span class="line"><span class="comment"> * @version $Id$</span></span><br><span class="line"><span class="comment"> * @requirement $cheerio$  npm i cheerio -S</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>);</span><br><span class="line"><span class="keyword">const</span> cheerio = <span class="built_in">require</span>(<span class="string">'cheerio'</span>);</span><br><span class="line"><span class="keyword">const</span> request = <span class="built_in">require</span>(<span class="string">'request'</span>);</span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> index = <span class="string">'http://musicforprogramming.net/'</span>;</span><br><span class="line"><span class="keyword">const</span> prefix = <span class="string">"http://datashat.net/music_for_programming_"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//生成目录</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">checkDir</span>(<span class="params">pathName</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> pathName = pathName || <span class="string">"songs"</span>;</span><br><span class="line">    <span class="keyword">let</span> exist = fs.existsSync(pathName);</span><br><span class="line">    <span class="keyword">if</span> (!exist) &#123; fs.mkdir(pathName); <span class="keyword">return</span> pathName &#125;</span><br><span class="line">    <span class="keyword">return</span> pathName</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//下载song</span></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">downloadSongs</span>(<span class="params">url</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> result = checkDir();</span><br><span class="line">    <span class="keyword">let</span> fileName = url.split(<span class="string">"-"</span>)[<span class="number">1</span>];</span><br><span class="line">    <span class="keyword">let</span> dirName = <span class="string">"./"</span> + result + <span class="string">"/"</span>;</span><br><span class="line">    request.head(url, <span class="function"><span class="keyword">function</span>(<span class="params">err, res, body</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (err) &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(err);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    request(url).pipe(fs.createWriteStream(dirName + fileName));</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//组合得到song下载地址</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">combineURL</span>(<span class="params">source, prefix</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> sourceList = [];</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">Object</span>.prototype.toString.call(source));</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i <span class="keyword">in</span> source) &#123;</span><br><span class="line">        sourceList.push([prefix, i, <span class="string">"-"</span>, source[i], <span class="string">".mp3"</span>].join(<span class="string">""</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> sourceList;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//html过滤出song</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">filterSongs</span>(<span class="params">html</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> $ = cheerio.load(html);</span><br><span class="line">    <span class="keyword">let</span> episodes = $(<span class="string">'#episodes'</span>).children(<span class="string">"a"</span>);</span><br><span class="line">    <span class="keyword">let</span> musicInfo = episodes.text().split(<span class="regexp">/(\d&#123;2&#125;:)/</span>);</span><br><span class="line">    musicInfo.shift();</span><br><span class="line">    <span class="keyword">let</span> collections = &#123;&#125;;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>, l = musicInfo.length; i &lt; l; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (i % <span class="number">2</span> == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">let</span> [rawNumber, rawName] = [musicInfo[i], musicInfo[i + <span class="number">1</span>]];</span><br><span class="line">            <span class="keyword">let</span> modifyNumber = rawNumber.substr(<span class="number">0</span>, <span class="number">2</span>);</span><br><span class="line">            <span class="keyword">let</span> modifyName = rawName.substr(<span class="number">1</span>).replace(<span class="string">" "</span>, <span class="string">"_"</span>).replace(<span class="string">"/(\.)*/g"</span>, <span class="string">"_"</span>).toLowerCase();</span><br><span class="line">            collections[modifyNumber] = modifyName;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> collections;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//开始爬取</span></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">crawl</span>(<span class="params">html, prefix</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> obj = filterSongs(html);</span><br><span class="line">    <span class="keyword">let</span> urls = combineURL(obj, prefix);</span><br><span class="line">   <span class="built_in">console</span>.log(urls);</span><br><span class="line">    urls.map(<span class="function"><span class="params">v</span> =&gt;</span> downloadSongs(v));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">http.get(index, <span class="function"><span class="keyword">function</span>(<span class="params">res</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> html = <span class="string">''</span>;</span><br><span class="line">    res.on(<span class="string">'data'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">        html += data;</span><br><span class="line">    &#125;)</span><br><span class="line">    res.on(<span class="string">'end'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"load html successfully!\n "</span>);</span><br><span class="line">        crawl(html, prefix);</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;).on(<span class="string">'error'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">error</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"load html failed!"</span>, error);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Write-Before&quot;&gt;&lt;a href=&quot;#Write-Before&quot; class=&quot;headerlink&quot; title=&quot;Write Before&quot;&gt;&lt;/a&gt;Write Before&lt;/h2&gt;&lt;p&gt;自从写了Pokemon-TCG的爬虫后，感觉还不过瘾，想爬点
      
    
    </summary>
    
    
      <category term="node" scheme="https://apenshar.github.io/myBlog/tags/node/"/>
    
      <category term="crawl" scheme="https://apenshar.github.io/myBlog/tags/crawl/"/>
    
  </entry>
  
  <entry>
    <title>js里有指针这回事吗？</title>
    <link href="https://apenshar.github.io/myBlog/2018-03-09-are-thre-pointers-in-js.html"/>
    <id>https://apenshar.github.io/myBlog/2018-03-09-are-thre-pointers-in-js.html</id>
    <published>2018-03-09T14:39:32.000Z</published>
    <updated>2018-03-10T07:37:06.091Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Write-Before"><a href="#Write-Before" class="headerlink" title="Write Before"></a>Write Before</h2><blockquote><p>Source: <a href="http://stackoverflow.com/questions/17382427/are-there-pointers-in-javascript" target="_blank" rel="noopener">Are there pointers in javascript?</a></p><p><strong>No, JS doesn’t have pointers.</strong></p><p>Objects are passed around by passing a copy of a reference. The programmer cannot access any C-like “value” representing the address of the object.<br>Within a function one may change the contents of an passed object via that reference, but you cannot modify the reference that the caller had, because your reference is only a copy:</p></blockquote><h2 id="Translate"><a href="#Translate" class="headerlink" title="Translate"></a>Translate</h2><p>JS中没有指针这个概念的，传入函数内部的参数是在这个对象引用基础上进行的复制，而不是对象本身，它并不是像C语言那样可以代表对象的内存地址，我们自然获取不到真正意义上的指针。在一个函数内，可以通过该引用来改变传递对象的<strong>内容</strong>，但是你不能修改调用者的引用，因为你的引用只是一个副本。</p><p>太深奥了吗？还是看下面这里例子吧，希望能帮到你吧。。。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> foo = &#123;<span class="string">'bar'</span>: <span class="number">1</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">tryToMungeReference</span>(<span class="params">obj</span>) </span>&#123;</span><br><span class="line">  obj = &#123;<span class="string">'bar'</span>: <span class="number">2</span>&#125;;  <span class="comment">// 不能修改obj本身 won't change caller's object</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"---------obj----"</span>);</span><br><span class="line"><span class="built_in">console</span>.log(obj[<span class="string">"bar"</span>])</span><br><span class="line"><span class="built_in">console</span>.log(obj.bar);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"---------foo----"</span>);</span><br><span class="line"><span class="built_in">console</span>.log(foo[<span class="string">"bar"</span>])</span><br><span class="line"><span class="built_in">console</span>.log(foo.bar);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">mungeContents</span>(<span class="params">obj</span>) </span>&#123;</span><br><span class="line">  obj.bar = <span class="number">2</span>;       <span class="comment">// 可以修改obj的内容 changes _contents_ of caller's object</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"---------obj----"</span>);</span><br><span class="line"><span class="built_in">console</span>.log(obj[<span class="string">"bar"</span>])</span><br><span class="line"><span class="built_in">console</span>.log(obj.bar);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"---------foo----"</span>);</span><br><span class="line"><span class="built_in">console</span>.log(foo[<span class="string">"bar"</span>])</span><br><span class="line"><span class="built_in">console</span>.log(foo.bar);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">tryToMungeReference(foo);</span><br><span class="line">foo.bar === <span class="number">1</span>;   <span class="comment">// true - foo still references original object</span></span><br><span class="line"></span><br><span class="line">mungeContents(foo);</span><br><span class="line">foo.bar === <span class="number">2</span>;  <span class="comment">// true - object referenced by foo has been modified</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Write-Before&quot;&gt;&lt;a href=&quot;#Write-Before&quot; class=&quot;headerlink&quot; title=&quot;Write Before&quot;&gt;&lt;/a&gt;Write Before&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;Source: &lt;a href=&quot;
      
    
    </summary>
    
    
      <category term="js" scheme="https://apenshar.github.io/myBlog/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>一个简单的Pokemon-TCG 爬虫（node.js）</title>
    <link href="https://apenshar.github.io/myBlog/2018-03-08-node-crawl-pokemon-tcg.html"/>
    <id>https://apenshar.github.io/myBlog/2018-03-08-node-crawl-pokemon-tcg.html</id>
    <published>2018-03-08T15:58:23.000Z</published>
    <updated>2018-03-10T07:24:50.363Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Write-Before"><a href="#Write-Before" class="headerlink" title="Write Before"></a>Write Before</h2><p>今天在网上发现了一个很有趣的Public API 仓库，其中看了看，居然有PokemonGo TCG的API，使用Get请求可以返回Pokemon的信息和卡牌地址，而且整个API封装的特别好，实际上需要修改的地方特别少，入门极速。粗略过一遍后，就可以写个爬取Pokemon图片的node爬虫脚本了。</p><h2 id="Requirement"><a href="#Requirement" class="headerlink" title="Requirement"></a>Requirement</h2><blockquote><p> <strong>  colors</strong><br>colors这个包可以在终端中打印出彩色信息，突出重点信息，可以通过npm安装</p></blockquote><h2 id="How-to-use"><a href="#How-to-use" class="headerlink" title="How to use "></a>How to use </h2><ol><li>在目录下执行<code>npm i colors -S</code></li><li>在pokemonGo.js所在目录下创建一个pokemonSpecies.js文件（见下文）</li><li>执行下面的命令</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 四项基本功能：</span></span><br><span class="line"><span class="comment">#  -q  安静模式 不打印log信息</span></span><br><span class="line"><span class="comment">#  -r  递归模式 下载speices列表所有的pokemon</span></span><br><span class="line"><span class="comment">#  -d  下载   是否下载pokemon图片</span></span><br><span class="line"><span class="comment">#  -p  路径   是否指定路径</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 爬取随机的一种pokemon</span></span><br><span class="line">node pokemonGo.js -d</span><br><span class="line"></span><br><span class="line"><span class="comment"># 爬取过程中控制台不打印信息</span></span><br><span class="line">node pokemonGo.js -q -d</span><br><span class="line"></span><br><span class="line"><span class="comment"># 爬取指定名称的pokemon (支持模糊查询，输入部分字符)</span></span><br><span class="line">node pokemonGo.js  pikachu -d</span><br><span class="line"></span><br><span class="line"><span class="comment"># 爬取列表中所有的pokemon</span></span><br><span class="line">node pokemonGo.js -r -d</span><br><span class="line"></span><br><span class="line"><span class="comment"># 爬取指随机的一种pokemon 并放入images文件夹内</span></span><br><span class="line"><span class="comment"># -p 后不指定文件夹，后台会自动创建 default-pokemonGo-TCG-images文件夹</span></span><br><span class="line">node pokemonGo.js -d -p <span class="string">"images"</span></span><br></pre></td></tr></table></figure><p>下面贴代码了</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * pokemonGo.js</span></span><br><span class="line"><span class="comment"> * @authors Apen Shar (apenshar@gmail.com)</span></span><br><span class="line"><span class="comment"> * @date    2018-03-06 17:04:43</span></span><br><span class="line"><span class="comment"> * @version $Id$</span></span><br><span class="line"><span class="comment"> *  @usage: node pokemonGo.js</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> pokemon = <span class="built_in">require</span>(<span class="string">'pokemontcgsdk'</span>);</span><br><span class="line"><span class="keyword">const</span> request = <span class="built_in">require</span>(<span class="string">'request'</span>);</span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line"><span class="keyword">const</span> species = <span class="built_in">require</span>(<span class="string">"./pokemonSpecies"</span>);</span><br><span class="line"><span class="keyword">const</span> colors = <span class="built_in">require</span>(<span class="string">'colors'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//计数</span></span><br><span class="line"><span class="keyword">let</span> count = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在终端里实时打印pokemon信息</span></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">printPokemon</span>(<span class="params">name, pageSize, card, quiet</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!quiet) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"\n"</span>, count++);</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"+-------------------------------------------------------+"</span>.bgRed);</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"Pokemon："</span>, card.name.cyan, <span class="string">"\t No."</span>, card.number.yellow);</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"Subtype："</span>, card.subtype.bgMagenta);</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"Health Point："</span>, card.hp);</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"Artist："</span>, card.artist.magenta);</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"Source："</span>, card.imageUrl.cyan);</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"Congratulations ,Your Pokemon Download Successfully :) ! "</span>.inverse);</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"+-------------------------------------------------------+\n"</span>.bgRed);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 下载pokemon图片</span></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">downloadPokemon</span>(<span class="params">fileName, src, download, pathName</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (download) &#123;</span><br><span class="line">        request.head(src, <span class="function"><span class="keyword">function</span>(<span class="params">err, res, body</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (err) &#123; <span class="built_in">console</span>.log(err) &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="keyword">let</span> path = <span class="string">"./"</span> + pathName + <span class="string">"/"</span>;</span><br><span class="line">        request(src).pipe(fs.createWriteStream(path + fileName));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 生成文件名</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">genFileName</span>(<span class="params">card</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> fname = card.name + card.imageUrl.split(<span class="string">"/"</span>).pop();</span><br><span class="line">    <span class="keyword">return</span> fname;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//生成目录</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">genDir</span>(<span class="params">pathName</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> exist = fs.existsSync(pathName);</span><br><span class="line">    <span class="keyword">if</span> (!exist) &#123; fs.mkdir(pathName); <span class="keyword">return</span> pathName &#125;</span><br><span class="line">    <span class="keyword">return</span> pathName</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">start</span>(<span class="params">name, pageSize, card, quiet, download, path</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 生成文件名和目录</span></span><br><span class="line">    <span class="keyword">let</span> fileName = genFileName(card);</span><br><span class="line">    <span class="keyword">let</span> pathName = genDir(path);</span><br><span class="line">    <span class="comment">// 下载pokemon图片</span></span><br><span class="line">    <span class="keyword">await</span> downloadPokemon.call(<span class="literal">null</span>, fileName, card.imageUrl, download, pathName);</span><br><span class="line">    <span class="comment">// 打印pokemon实时信息</span></span><br><span class="line">    <span class="keyword">await</span> printPokemon.call(<span class="literal">null</span>, name, pageSize, card, quiet);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//验证是否输入name和 pageSize</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">checkArgs</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> variableList = <span class="built_in">Array</span>.prototype.slice.call(<span class="built_in">arguments</span>);</span><br><span class="line">    <span class="keyword">let</span> result = variableList.map(<span class="function"><span class="params">variable</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (variable &amp;&amp; variable.indexOf(<span class="string">"-"</span>) == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> variable = <span class="literal">undefined</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> variable;</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">usePokemon</span>(<span class="params">name, pageSize, quiet, download, path</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> card = pokemon.card;</span><br><span class="line">    <span class="keyword">const</span> defaults = species[<span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random() * species.length)];</span><br><span class="line">    <span class="keyword">let</span> ary = checkArgs.call(<span class="literal">null</span>, name, pageSize);</span><br><span class="line">    card.all(&#123; <span class="attr">name</span>: ary.name || defaults, <span class="attr">pageSize</span>: ary.pageSize || <span class="number">1</span> &#125;)</span><br><span class="line">        .on(<span class="string">'data'</span>, (card) =&gt; &#123;</span><br><span class="line">            start(ary.name, ary.pageSize, card, quiet, download, path);</span><br><span class="line">        &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">init</span>(<span class="params">name, pageSize, quiet, recursive, download, path</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (recursive) &#123;</span><br><span class="line">        <span class="keyword">await</span> species.map(<span class="function"><span class="params">name</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> usePokemon(name, pageSize, quiet, download, path);</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> usePokemon(name, pageSize, quiet, download, path);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">boolJudge</span>(<span class="params">value</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (value &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">pathParse</span>(<span class="params">index, command</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> defaultPath = <span class="string">"default-pokemonGo-TCG-images"</span>;</span><br><span class="line">    <span class="keyword">if</span> (index &gt; <span class="number">-1</span>) &#123;</span><br><span class="line">        <span class="keyword">let</span> pathName = command[index + <span class="number">1</span>];</span><br><span class="line">        <span class="keyword">if</span> (pathName !== <span class="literal">undefined</span>) &#123; <span class="keyword">return</span> pathName &#125;</span><br><span class="line">        <span class="keyword">return</span> defaultPath</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> defaultPath;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">(<span class="keyword">async</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">//获取命令行参数</span></span><br><span class="line">    <span class="keyword">const</span> <span class="built_in">arguments</span> = process.argv.splice(<span class="number">2</span>);</span><br><span class="line">    <span class="comment">// 策略模式</span></span><br><span class="line">    <span class="keyword">const</span> statusJudge = &#123;</span><br><span class="line">        quiet: <span class="function"><span class="keyword">function</span>(<span class="params">command</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">let</span> quietJudge = command.indexOf(<span class="string">"-q"</span>);</span><br><span class="line">            <span class="keyword">return</span> quiet = boolJudge(quietJudge);</span><br><span class="line">        &#125;,</span><br><span class="line">        recursive: <span class="function"><span class="keyword">function</span>(<span class="params">command</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">let</span> recursiveJudge = command.indexOf(<span class="string">"-r"</span>);</span><br><span class="line">            <span class="keyword">return</span> recursive = boolJudge(recursiveJudge);</span><br><span class="line">        &#125;,</span><br><span class="line">        download: <span class="function"><span class="keyword">function</span>(<span class="params">command</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">let</span> downloadJudge = command.indexOf(<span class="string">"-d"</span>);</span><br><span class="line">            <span class="keyword">return</span> download = boolJudge(downloadJudge);</span><br><span class="line">        &#125;,</span><br><span class="line">        path: <span class="function"><span class="keyword">function</span>(<span class="params">command</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">let</span> pathJudge = command.indexOf(<span class="string">"-p"</span>);</span><br><span class="line">            <span class="keyword">return</span> path = pathParse(pathJudge, command)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">let</span> judgeList = [];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i <span class="keyword">in</span> statusJudge) &#123;</span><br><span class="line">        judgeList.push(i)</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>, m; m = judgeList[i++];) &#123;</span><br><span class="line">        statusJudge[m].call(<span class="literal">null</span>, <span class="built_in">arguments</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">const</span> [name, pageSize] = <span class="built_in">arguments</span>;</span><br><span class="line">    <span class="keyword">await</span> init(name, pageSize, quiet, recursive, download, path);</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * pokemonSpecies.js</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> species =[</span><br><span class="line">    <span class="string">"Sceptile"</span>,</span><br><span class="line">    <span class="string">"Cubone"</span>,</span><br><span class="line">    <span class="string">"Xerneas"</span>,</span><br><span class="line">    <span class="string">"Windstorm"</span>,</span><br><span class="line">    <span class="string">"Turtwig"</span>,</span><br><span class="line">    <span class="string">"Mankey"</span>,</span><br><span class="line">    <span class="string">"Larvesta"</span>,</span><br><span class="line">    <span class="string">"Hariyama"</span>,</span><br><span class="line">    <span class="string">"Aggron"</span>,</span><br><span class="line">    <span class="string">"Oddish"</span>,</span><br><span class="line">    <span class="string">"Skiddo"</span>,</span><br><span class="line">    <span class="string">"Misdreavus"</span>,</span><br><span class="line">    <span class="string">"Greninja"</span>,</span><br><span class="line">    <span class="string">"Clauncher"</span>,</span><br><span class="line">    <span class="string">"Magneton"</span>,</span><br><span class="line">    <span class="string">"Baltoy"</span>,</span><br><span class="line">    <span class="string">"Inkay"</span>,</span><br><span class="line">    <span class="string">"Rayquaza"</span>,</span><br><span class="line">    <span class="string">"Mightyena"</span>,</span><br><span class="line">    <span class="string">"Pawniard"</span>,</span><br><span class="line">    <span class="string">"Pineco"</span>,</span><br><span class="line">    <span class="string">"Glalie"</span>,</span><br><span class="line">    <span class="string">"Volcanion"</span>,</span><br><span class="line">    <span class="string">"Trevenant"</span>,</span><br><span class="line">    <span class="string">"Salamence"</span>,</span><br><span class="line">]</span><br><span class="line"><span class="built_in">module</span>.exports = species;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Write-Before&quot;&gt;&lt;a href=&quot;#Write-Before&quot; class=&quot;headerlink&quot; title=&quot;Write Before&quot;&gt;&lt;/a&gt;Write Before&lt;/h2&gt;&lt;p&gt;今天在网上发现了一个很有趣的Public API 仓库，其中
      
    
    </summary>
    
    
      <category term="node" scheme="https://apenshar.github.io/myBlog/tags/node/"/>
    
      <category term="crawl" scheme="https://apenshar.github.io/myBlog/tags/crawl/"/>
    
  </entry>
  
  <entry>
    <title>老干的部克星：判断页面是否激活的API</title>
    <link href="https://apenshar.github.io/myBlog/2018-03-08-js-document-hidden.html"/>
    <id>https://apenshar.github.io/myBlog/2018-03-08-js-document-hidden.html</id>
    <published>2018-03-08T15:31:46.000Z</published>
    <updated>2018-03-08T16:30:24.937Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Write-Before"><a href="#Write-Before" class="headerlink" title="Write Before"></a>Write Before</h2><p>今天又来安利一个小技巧了，如何判断用户是否在浏览当前页面。其实也是一个无意间的想法，如果把这个API写在两学一做视频网站的脚本里并轮询做一个统计，用来检验老干部是否边逛淘宝边学习社会主义思想，哈哈，是不是能杀死一票老干部。</p><p>直接在控制台中输入下面这段脚本，就能实时监听页面状态了，可以点击其他页面看看。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> hiddenProperty = <span class="string">'hidden'</span> <span class="keyword">in</span> <span class="built_in">document</span> ? <span class="string">'hidden'</span> :    </span><br><span class="line">    <span class="string">'webkitHidden'</span> <span class="keyword">in</span> <span class="built_in">document</span> ? <span class="string">'webkitHidden'</span> :    </span><br><span class="line">    <span class="string">'mozHidden'</span> <span class="keyword">in</span> <span class="built_in">document</span> ? <span class="string">'mozHidden'</span> :    </span><br><span class="line">    <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">var</span> visibilityChangeEvent = hiddenProperty.replace(<span class="regexp">/hidden/i</span>, <span class="string">'visibilitychange'</span>);</span><br><span class="line"><span class="keyword">var</span> onVisibilityChange = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">document</span>[hiddenProperty]) &#123;    </span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'页面非激活'</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'页面激活'</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">document</span>.addEventListener(visibilityChangeEvent, onVisibilityChange);</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Write-Before&quot;&gt;&lt;a href=&quot;#Write-Before&quot; class=&quot;headerlink&quot; title=&quot;Write Before&quot;&gt;&lt;/a&gt;Write Before&lt;/h2&gt;&lt;p&gt;今天又来安利一个小技巧了，如何判断用户是否在浏览当前页面。其
      
    
    </summary>
    
    
      <category term="js" scheme="https://apenshar.github.io/myBlog/tags/js/"/>
    
      <category term="BOM" scheme="https://apenshar.github.io/myBlog/tags/BOM/"/>
    
  </entry>
  
  <entry>
    <title>jQuery-input change事件</title>
    <link href="https://apenshar.github.io/myBlog/2018-03-08-jQuery-input.html"/>
    <id>https://apenshar.github.io/myBlog/2018-03-08-jQuery-input.html</id>
    <published>2018-03-08T15:13:53.000Z</published>
    <updated>2018-03-08T16:29:51.754Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Write-Before"><a href="#Write-Before" class="headerlink" title="Write Before"></a>Write Before</h2><p>在jQuery中，input输入框的change事件，要在input失去焦点的时候才会触发</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(&apos;input[name=myInput]&apos;).change(function() &#123; ... &#125;);</span><br></pre></td></tr></table></figure><p>所以上面这段代码执行后，在输入框内容变化的时候不会触发change，当鼠标在其他地方点一下才会触发</p><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$(&quot;#input_id&quot;).on(&apos;input&apos;,function(e)&#123;  </span><br><span class="line">   alert(&apos;Changed!&apos;)  </span><br><span class="line">&#125;);  </span><br><span class="line">// or </span><br><span class="line">$(&quot;#input_id&quot;).keyup(function() &#123;</span><br><span class="line"> alert(&quot;Key up detected&quot;);</span><br><span class="line">｝</span><br></pre></td></tr></table></figure><h2 id="参考"><a href="#参考" class="headerlink" title="参考  "></a>参考  </h2><p><a href="http://stackoverflow.com/questions/1443292/how-to-implement-onchange-of-input-type-text-with-jquery" target="_blank" rel="noopener">http://stackoverflow.com/questions/1443292/how-to-implement-onchange-of-input-type-text-with-jquery</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Write-Before&quot;&gt;&lt;a href=&quot;#Write-Before&quot; class=&quot;headerlink&quot; title=&quot;Write Before&quot;&gt;&lt;/a&gt;Write Before&lt;/h2&gt;&lt;p&gt;在jQuery中，input输入框的change事件，要在i
      
    
    </summary>
    
    
      <category term="js" scheme="https://apenshar.github.io/myBlog/tags/js/"/>
    
      <category term="jquery" scheme="https://apenshar.github.io/myBlog/tags/jquery/"/>
    
  </entry>
  
  <entry>
    <title>我踩中的Promise  resolve地雷</title>
    <link href="https://apenshar.github.io/myBlog/2018-03-08-promise-introduce.html"/>
    <id>https://apenshar.github.io/myBlog/2018-03-08-promise-introduce.html</id>
    <published>2018-03-08T15:01:35.000Z</published>
    <updated>2018-03-08T15:57:27.041Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Write-Before"><a href="#Write-Before" class="headerlink" title="Write Before"></a>Write Before</h2><blockquote><p>关于Promise 中resolve的坑(逃)</p></blockquote><p>今天写异步函数的时候，遇到一个Bug，一个关于resolve的问题，为什么会偏偏发生在我身上呢？唉，主要是自己对Promise理解不深刻和写法不标准导致的幺蛾子，调试了好久才解脱出来。下次得看着教程代码一模一样写了。。。</p><p>首先来看一段正常的异步代码，2秒后，控制台将会从输出<code>done !</code>;<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">delay</span>(<span class="params">duration</span>) </span>&#123; </span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve, reject</span>) </span>&#123; </span><br><span class="line">    setTimeout(resolve, duration); </span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Note: This code uses arrow function syntax</span></span><br><span class="line"><span class="keyword">var</span> d = delay(<span class="number">2000</span>).then(<span class="function"><span class="params">()</span> =&gt;</span> &#123; </span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"done !"</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><p>如果我们不想多写一个<code>then</code>方法来实现自定义输出内容怎么办？<br>So easy， 在<code>setTimeout</code>函数里写个<code>resolve(text)</code>不就好了吗，有什么难的（papa打脸.jpg）<br><br>下面这段代码会在控制台直接输出<code>delay</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">delay</span>(<span class="params">duration,text</span>) </span>&#123; </span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve, reject</span>) </span>&#123; </span><br><span class="line">    setTimeout(resolve(text), duration); </span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> d = delay(<span class="number">2000</span>,<span class="string">"delay"</span>).then(<span class="function">(<span class="params">data</span>) =&gt;</span> &#123; </span><br><span class="line">  <span class="built_in">console</span>.log(data);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>怎么办啊，好头痛(拔头发.jpg),在<code>setTimeout</code>函数里写个箭头函数输出不就好了吗，看下面代码</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sleep</span>(<span class="params">duration,text</span>) </span>&#123; </span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>)=&gt;</span>&#123; </span><br><span class="line">    setTimeout(<span class="function"><span class="params">()</span>=&gt;</span>&#123;resolve(text)&#125;, duration); </span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> s = sleep(<span class="number">2000</span>,<span class="string">"sleep"</span>).then(<span class="function">(<span class="params">data</span>) =&gt;</span> &#123; </span><br><span class="line">  <span class="built_in">console</span>.log(data);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>大功告成，这段代码会隔两秒后再输出<code>sleep</code>了。</p><p>现在来总结一下原因了，究竟是什么导致了<code>resolve(text)</code>的直接输出，（是人性的扭曲还是道德的沦丧呢?）<br>哈哈哈，写到这里才发现起错标题了，应该叫 <code>setTimeout</code>踩过的坑， <code>resolve</code>背锅了（心疼.jpg）<br><br><code>setTimeout()</code>可以接受多个参数：<code>setTimeout(yourFunctionReference, 5000, param1, param2, paramN)</code>;<br>所以第一个参数应该是回调函数，而不是回调函数的执行结果，因而才有了上面的Bug，解决办法是将<code>resolve(text)</code>嵌套在一个回调函数里面。<br>text)</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">delay</span>(<span class="params">duration,text</span>) </span>&#123; </span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve, reject</span>) </span>&#123; </span><br><span class="line">    setTimeout(<span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(</span><br><span class="line">        <span class="keyword">typeof</span> resolve,</span><br><span class="line">         <span class="keyword">typeof</span> resolve(text),</span><br><span class="line">        <span class="keyword">typeof</span> resolve(),</span><br><span class="line">        )</span><br><span class="line">    &#125;, duration); </span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> d = delay(<span class="number">2000</span>,<span class="string">"delay"</span>).then(<span class="function">(<span class="params">data</span>) =&gt;</span> &#123; </span><br><span class="line">  <span class="built_in">console</span>.log(data);</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// expect result  -&gt; function undefined undefined \n delay</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">delay</span>(<span class="params">duration,text</span>) </span>&#123; </span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve, reject</span>) </span>&#123; </span><br><span class="line">    setTimeout( <span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log( </span><br><span class="line">            <span class="built_in">Object</span>.prototype.toString.call(resolve),</span><br><span class="line">            <span class="built_in">Object</span>.prototype.toString.call(resolve(text)),</span><br><span class="line">            <span class="built_in">Object</span>.prototype.toString.call(resolve()),</span><br><span class="line">            )</span><br><span class="line">    &#125;, duration); </span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> d = delay(<span class="number">2000</span>,<span class="string">"delay"</span>).then(<span class="function">(<span class="params">data</span>) =&gt;</span> &#123; </span><br><span class="line">  <span class="built_in">console</span>.log(data);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// expect result  -&gt; [object Function] [object Undefined] [object Undefined] \n  delay</span></span><br></pre></td></tr></table></figure><p>上面面的代码可以验证我们的猜想,<code>resolve(text)</code>返回的是一个结果，而不是<code>function</code>，不应该当作第一个参数传入<code>setTimeout()</code>;</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Write-Before&quot;&gt;&lt;a href=&quot;#Write-Before&quot; class=&quot;headerlink&quot; title=&quot;Write Before&quot;&gt;&lt;/a&gt;Write Before&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;关于Promise 中resolv
      
    
    </summary>
    
    
      <category term="js" scheme="https://apenshar.github.io/myBlog/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>一个基于本地浏览器的笔记本</title>
    <link href="https://apenshar.github.io/myBlog/2018-02-10-HTML-Notepad.html"/>
    <id>https://apenshar.github.io/myBlog/2018-02-10-HTML-Notepad.html</id>
    <published>2018-02-10T08:27:19.000Z</published>
    <updated>2018-03-08T15:12:23.680Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Write-Before"><a href="#Write-Before" class="headerlink" title="Write Before"></a>Write Before</h2><p>上班时候闲逛发现了一种新的笔记本，打开浏览器，就可以快速记下东西了，快存书签吧 </p><h2 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h2><blockquote><p>Sometimes I just need to type garbage. Just to clear out my mind. Using editors to type such gibberish annoys me because it clutters my project workspace (I’m picky, I know).</p><p>So I do this. Since I live in the browser, I just open a new tab and type in the url tab.</p></blockquote><h2 id="来一个最简单的写法"><a href="#来一个最简单的写法" class="headerlink" title="来一个最简单的写法"></a>来一个最简单的写法</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">data:text/html, <span class="tag">&lt;<span class="name">html</span> <span class="attr">contenteditable</span>&gt;</span></span><br><span class="line"></span><br><span class="line">data:text/html, <span class="tag">&lt;<span class="name">textarea</span> <span class="attr">style</span>=<span class="string">"font-size: 1.5em; width: 100%; height: 100%; border: none; outline: none"</span> <span class="attr">autofocus</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">data:text/html, <span class="tag">&lt;<span class="name">title</span>&gt;</span>Text Editor<span class="tag">&lt;/<span class="name">title</span>&gt;</span><span class="tag">&lt;<span class="name">body</span> <span class="attr">contenteditable</span> <span class="attr">style</span>=<span class="string">"font-size:2rem;line-height:1.4;max-width:60rem;margin:0 auto;padding:4rem;"</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="纯白代码风格笔记本"><a href="#纯白代码风格笔记本" class="headerlink" title="纯白代码风格笔记本"></a>纯白代码风格笔记本</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">data:text/html;charset=utf-8, <span class="tag">&lt;<span class="name">title</span>&gt;</span>TextEditor<span class="tag">&lt;/<span class="name">title</span>&gt;</span><span class="tag">&lt;<span class="name">body</span> <span class="attr">contenteditable</span> <span class="attr">style</span>=<span class="string">"font-size:2rem;font-family:monaco;line-height:1.4;max-width:60rem;margin:0 auto;padding:4rem;"</span> <span class="attr">spellcheck</span>=<span class="string">"false"</span>&gt;</span><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Text Editor<span class="tag">&lt;/<span class="name">h1</span>&gt;</span><span class="tag">&lt;<span class="name">p</span>&gt;</span>Start Here.<span class="tag">&lt;<span class="name">pre</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="清新白色笔记本（带背景图"><a href="#清新白色笔记本（带背景图" class="headerlink" title="清新白色笔记本（带背景图 )"></a>清新白色笔记本（带背景图 )</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">data:text/html;charset=utf-8, <span class="tag">&lt;<span class="name">title</span>&gt;</span>TextEditor<span class="tag">&lt;/<span class="name">title</span>&gt;</span> <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"shortcut icon"</span> <span class="attr">href</span>=<span class="string">"http://g.etfv.co/https://docs.google.com"</span>/&gt;</span> <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"> html&#123;height: 100%;&#125; body&#123;background: -webkit-linear-gradient(#f0f0f0, #fff); padding: 3%; height: 94%;&#125; .paper &#123; font: normal 12px/1.5 "Lucida Grande", arial, sans-serif; width: 50%; height: 80%; margin: 0 auto; padding: 6px 5px 4px 42px; position: relative; color: #444; line-height: 20px; border: 1px solid #d2d2d2; background: #fff; background: -webkit-gradient(linear, 0 0, 0 100%, from(#d9eaf3), color-stop(4%, #fff)) 0 4px; background: -webkit-linear-gradient(top, #d9eaf3 0%, #fff 8%) 0 4px; background: -moz-linear-gradient(top, #d9eaf3 0%, #fff 8%) 0 4px; background: -ms-linear-gradient(top, #d9eaf3 0%, #fff 8%) 0 4px; background: -o-linear-gradient(top, #d9eaf3 0%, #fff 8%) 0 4px; background: linear-gradient(top, #d9eaf3 0%, #fff 8%) 0 4px; -webkit-background-size: 100% 20px; -moz-background-size: 100% 20px; -ms-background-size: 100% 20px; -o-background-size: 100% 20px; background-size: 100% 20px; -webkit-border-radius: 3px; -moz-border-radius: 3px; border-radius: 3px; -webkit-box-shadow: 0 1px 2px rgba(0,0,0,0.07); -moz-box-shadow: 0 1px 2px rgba(0,0,0,0.07); box-shadow: 0 1px 2px rgba(0,0,0,0.07); &#125; .paper::before &#123; content: ''; position: absolute; width: 4px; top: 0; left: 30px; bottom: 0; border: 1px solid; border-color: transparent #efe4e4; &#125; textarea&#123;display: block; width:94%;margin:0 auto;padding:3.8% 3%; border: none; outline: none; height: 94%; background: transparent; line-height: 20px;&#125; </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span> <span class="tag">&lt;<span class="name">body</span> <span class="attr">spellcheck</span>=<span class="string">"false"</span>&gt;</span> <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"paper"</span>&gt;</span> <span class="tag">&lt;<span class="name">textarea</span> <span class="attr">autofocus</span>=<span class="string">"autofocus"</span>&gt;</span><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span> <span class="tag">&lt;/<span class="name">div</span>&gt;</span> <span class="tag">&lt;/<span class="name">body</span>&gt;</span> <span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="黑绿极客风"><a href="#黑绿极客风" class="headerlink" title="黑绿极客风"></a>黑绿极客风</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">data:text/html, <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined">html,body&#123;margin: 0; padding: 0;&#125;</span><span class="tag">&lt;/<span class="name">style</span>&gt;</span><span class="tag">&lt;<span class="name">textarea</span> <span class="attr">style</span>=<span class="string">"font-size: 1.5em; line-height: 1.5em; background: %23000; color: %233a3; width: 100%; height: 100%; border: none; outline: none; margin: 0; padding: 90px;"</span> <span class="attr">autofocus</span> <span class="attr">placeholder</span>=<span class="string">"wake up Neo..."</span> /&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Write-Before&quot;&gt;&lt;a href=&quot;#Write-Before&quot; class=&quot;headerlink&quot; title=&quot;Write Before&quot;&gt;&lt;/a&gt;Write Before&lt;/h2&gt;&lt;p&gt;上班时候闲逛发现了一种新的笔记本，打开浏览器，就可以快速记下
      
    
    </summary>
    
    
      <category term="js" scheme="https://apenshar.github.io/myBlog/tags/js/"/>
    
      <category term="codepen" scheme="https://apenshar.github.io/myBlog/tags/codepen/"/>
    
  </entry>
  
  <entry>
    <title>C++超度指南第三弹--类</title>
    <link href="https://apenshar.github.io/myBlog/2018-02-10-CPP-learn03.html"/>
    <id>https://apenshar.github.io/myBlog/2018-02-10-CPP-learn03.html</id>
    <published>2018-02-10T06:05:14.000Z</published>
    <updated>2018-02-10T09:20:08.986Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>这一节我将会粗略介绍C++中的类(class)以及类的多态性。</p></blockquote><h3 id="C-类定义"><a href="#C-类定义" class="headerlink" title="C++ 类定义"></a>C++ 类定义</h3><p>定义一个类，本质上是定义一个数据类型的蓝图。这实际上并没有定义任何数据，但是它定义了类的对象包括了什么，以及可以在这个对象上执行哪些操作。因此可以归结为：</p><p><strong>类是具有相同属性和服务的一组对象的集合，它为属于该类的全部对象提供了一个统一的抽象描述。<br></strong><br><strong>在C++中，类是面向对象程序最基本的单元。</strong></p><p>类包含以下3种类型： </p><ul><li>private：私有类型包含数据和函数，在private关键字后面声明。如果省略private关键字，则必须紧跟在类名的后面声明。在类中声明的数据和函数如果不特别指明，都被视为私有类型。私有类型的数据值允许类本身声明的函数对其进行存取，而类的外部的任何函数都不能访问。 </li><li>public：公有类型public关键字后面声明，他们是类与外部的接口，任何外部函数都可以访问公有类的数据和函数。 </li><li>protect：保护类型用于类的继承，当类的成员被声明为protect时，从类的外部就不能对其进行访问。<br>类时面向对象程序最基本的单元。在设计面向对象程序时，首先要以类的方式设计实际待解决的问题，也就是将问题索要处理的数据定义成类的私有或公有类型数据，同时将处理问题的方法定义成类的公有或私有成员函数。</li></ul><p>是不是和JS中的<code>class</code>很相似:=)，温习一下，JS中<code>class</code>的3种方法:构造方法，静态方法 和原型方法。哈哈哈，总的说，自然界中设计模式都是共通的！不扯了，看代码，下面写一个简单的拥有计算面积功能的Box <code>class</code><br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Box</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">   <span class="keyword">public</span>:</span><br><span class="line">      <span class="keyword">double</span> length;   <span class="comment">// 长度</span></span><br><span class="line">      <span class="keyword">double</span> breadth;  <span class="comment">// 宽度</span></span><br><span class="line">      <span class="keyword">double</span> height;   <span class="comment">// 高度</span></span><br><span class="line">&#125;;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">( )</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">   Box Box1;        <span class="comment">// 声明 Box1，类型为 Box</span></span><br><span class="line">   Box Box2;        <span class="comment">// 声明 Box2，类型为 Box</span></span><br><span class="line">   <span class="keyword">double</span> volume = <span class="number">0.0</span>;     <span class="comment">// 用于存储体积</span></span><br><span class="line"> </span><br><span class="line">   <span class="comment">// box 1 详述</span></span><br><span class="line">   Box1.height = <span class="number">5.0</span>; </span><br><span class="line">   Box1.length = <span class="number">6.0</span>; </span><br><span class="line">   Box1.breadth = <span class="number">7.0</span>;</span><br><span class="line"> </span><br><span class="line">   <span class="comment">// box 2 详述</span></span><br><span class="line">   Box2.height = <span class="number">10.0</span>;</span><br><span class="line">   Box2.length = <span class="number">12.0</span>;</span><br><span class="line">   Box2.breadth = <span class="number">13.0</span>;</span><br><span class="line"> </span><br><span class="line">   <span class="comment">// box 1 的体积</span></span><br><span class="line">   volume = Box1.height * Box1.length * Box1.breadth;</span><br><span class="line">   <span class="built_in">cout</span> &lt;&lt; <span class="string">"Box1 的体积："</span> &lt;&lt; volume &lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"> </span><br><span class="line">   <span class="comment">// box 2 的体积</span></span><br><span class="line">   volume = Box2.height * Box2.length * Box2.breadth;</span><br><span class="line">   <span class="built_in">cout</span> &lt;&lt; <span class="string">"Box2 的体积："</span> &lt;&lt; volume &lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">   <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>outpt:<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Box1 的体积：<span class="number">210</span></span><br><span class="line">Box2 的体积：<span class="number">1560</span></span><br></pre></td></tr></table></figure></p><h3 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h3><p>多态性是指类中具有相似功能的不同函数使用同一个名称实现。这里我举个形象点的例子，我们对鸡鸭狗发出“叫”的指令，它们收到后都会发出声音，只不过叫声不一样而已，鸡发出的声音是叩叩叩，鸭是嘎嘎嘎，狗是汪汪汪，这样是不是好懂多了++)</p><h3 id="联编"><a href="#联编" class="headerlink" title="联编"></a>联编</h3><p>多态性的实现与联编有关。将一个函数的调用与其相应的函数体代码相链接的过程，成为函数联编。<br><strong>编译时的多态性是通过静态联编来实现的。</strong>静态联编是指在调用同名函数时，编译器将根据调用时所使用的实际参数个数、类型的不同确定应该调用哪一个函数的实现，它是在程序编译阶段就确定下来的多态性。静态联编通过使用重载机制来获得，重载机制包括函数重载和运算符重载。</p><h2 id="Donate"><a href="#Donate" class="headerlink" title="Donate"></a>Donate</h2><p>Buy me a coffee if you like my blog :)<br>Buymeacoffee: <a href="https://buymeacoff.ee/apen" target="_blank" rel="noopener">https://buymeacoff.ee/apen</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;这一节我将会粗略介绍C++中的类(class)以及类的多态性。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;C-类定义&quot;&gt;&lt;a href=&quot;#C-类定义&quot; class=&quot;headerlink&quot; title=&quot;C++ 类定义&quot;&gt;&lt;/a&gt;C++
      
    
    </summary>
    
    
      <category term="cpp" scheme="https://apenshar.github.io/myBlog/tags/cpp/"/>
    
  </entry>
  
  <entry>
    <title>C++超度指南第二弹--指针</title>
    <link href="https://apenshar.github.io/myBlog/2018-02-10-CPP-learn02.html"/>
    <id>https://apenshar.github.io/myBlog/2018-02-10-CPP-learn02.html</id>
    <published>2018-02-10T05:18:28.000Z</published>
    <updated>2018-02-10T10:28:08.807Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>这一节我会详细介绍C++中指针和引用以及他们的区别，总的来说，难度还不太高，屏上得来终觉浅，看完文章后不妨多练练吧-:)</p></blockquote><h3 id="C-指针"><a href="#C-指针" class="headerlink" title="C++ 指针"></a>C++ 指针</h3><p>每一个变量都有一个内存位置，每一个内存位置都定义了可使用连字号（&amp;）运算符访问的地址，它表示了在内存中的一个地址。请看下面的实例，它将输出定义的变量地址<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">   <span class="keyword">int</span>  var1;</span><br><span class="line">   <span class="keyword">char</span> var2[<span class="number">10</span>];</span><br><span class="line"> </span><br><span class="line">   <span class="built_in">cout</span> &lt;&lt; <span class="string">"var1 变量的地址： "</span>;</span><br><span class="line">   <span class="built_in">cout</span> &lt;&lt; &amp;var1 &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"> </span><br><span class="line">   <span class="built_in">cout</span> &lt;&lt; <span class="string">"var2 变量的地址： "</span>;</span><br><span class="line">   <span class="built_in">cout</span> &lt;&lt; &amp;var2 &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"> </span><br><span class="line">   <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>output:<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var1 变量的地址： <span class="number">0x7ffda779001c</span></span><br><span class="line">var2 变量的地址： <span class="number">0x7ffda7790012</span></span><br></pre></td></tr></table></figure></p><p>指针是一个变量，其值为另一个变量的地址，即，内存位置的直接地址。就像其他变量或常量一样，您必须在使用指针存储其他变量地址之前，对其进行声明。指针变量声明的一般形式为：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#type *var-name;</span></span><br><span class="line"><span class="keyword">int</span>    *ip;    <span class="comment">/* 一个整型的指针 */</span></span><br><span class="line"><span class="keyword">double</span> *dp;    <span class="comment">/* 一个 double 型的指针 */</span></span><br><span class="line"><span class="keyword">float</span>  *fp;    <span class="comment">/* 一个浮点型的指针 */</span></span><br><span class="line"><span class="keyword">char</span>   *ch;    <span class="comment">/* 一个字符型的指针 */</span></span><br></pre></td></tr></table></figure></p><p>所有指针的值的实际数据类型，不管是整型、浮点型、字符型，还是其他的数据类型，都是一样的，都是一个代表内存地址的长的十六进制数。<br>使用实例<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">   <span class="keyword">int</span>  var = <span class="number">20</span>;   <span class="comment">// 实际变量的声明</span></span><br><span class="line">   <span class="keyword">int</span>  *ip;        <span class="comment">// 指针变量的声明</span></span><br><span class="line"> </span><br><span class="line">   ip = &amp;var;       <span class="comment">// 在指针变量中存储 var 的地址</span></span><br><span class="line"> </span><br><span class="line">   <span class="built_in">cout</span> &lt;&lt; <span class="string">"Value of var variable: "</span>;</span><br><span class="line">   <span class="built_in">cout</span> &lt;&lt; var &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"> </span><br><span class="line">   <span class="comment">// 输出在指针变量中存储的地址</span></span><br><span class="line">   <span class="built_in">cout</span> &lt;&lt; <span class="string">"Address stored in ip variable: "</span>;</span><br><span class="line">   <span class="built_in">cout</span> &lt;&lt; ip &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"> </span><br><span class="line">   <span class="comment">// 访问指针中地址的值</span></span><br><span class="line">   <span class="built_in">cout</span> &lt;&lt; <span class="string">"Value of *ip variable: "</span>;</span><br><span class="line">   <span class="built_in">cout</span> &lt;&lt; *ip &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"> </span><br><span class="line">   <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>output：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Value of var variable: <span class="number">20</span></span><br><span class="line">Address stored in ip variable: <span class="number">0xbfc601ac</span></span><br><span class="line">Value of *ip variable: <span class="number">20</span></span><br></pre></td></tr></table></figure></p><h3 id="C-数据结构"><a href="#C-数据结构" class="headerlink" title="　C++ 数据结构"></a>　C++ 数据结构</h3><p>C/C++ 数组允许定义可存储相同类型数据项的变量，但是结构是 C++ 中另一种用户自定义的可用的数据类型，它允许您存储不同类型的数据项。</p><blockquote><p>1.基本写法</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 声明一个结构体类型 Books </span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Books</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">   <span class="keyword">char</span>  title[<span class="number">50</span>];</span><br><span class="line">   <span class="keyword">char</span>  author[<span class="number">50</span>];</span><br><span class="line">   <span class="keyword">char</span>  subject[<span class="number">100</span>];</span><br><span class="line">   <span class="keyword">int</span>   book_id;</span><br><span class="line">&#125;;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">( )</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">   Books Book1;        <span class="comment">// 定义结构体类型 Books 的变量 Book1</span></span><br><span class="line">   Books Book2;        <span class="comment">// 定义结构体类型 Books 的变量 Book2</span></span><br><span class="line"> </span><br><span class="line">   <span class="comment">// Book1 详述</span></span><br><span class="line">   <span class="built_in">strcpy</span>( Book1.title, <span class="string">"C++ 教程"</span>);</span><br><span class="line">   <span class="built_in">strcpy</span>( Book1.author, <span class="string">"Runoob"</span>); </span><br><span class="line">   <span class="built_in">strcpy</span>( Book1.subject, <span class="string">"编程语言"</span>);</span><br><span class="line">   Book1.book_id = <span class="number">12345</span>;</span><br><span class="line"> </span><br><span class="line">   <span class="comment">// Book2 详述</span></span><br><span class="line">   <span class="built_in">strcpy</span>( Book2.title, <span class="string">"CSS 教程"</span>);</span><br><span class="line">   <span class="built_in">strcpy</span>( Book2.author, <span class="string">"Runoob"</span>);</span><br><span class="line">   <span class="built_in">strcpy</span>( Book2.subject, <span class="string">"前端技术"</span>);</span><br><span class="line">   Book2.book_id = <span class="number">12346</span>;</span><br><span class="line"> </span><br><span class="line">   <span class="comment">// 输出 Book1 信息</span></span><br><span class="line">   <span class="built_in">cout</span> &lt;&lt; <span class="string">"第一本书标题 : "</span> &lt;&lt; Book1.title &lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">   <span class="built_in">cout</span> &lt;&lt; <span class="string">"第一本书作者 : "</span> &lt;&lt; Book1.author &lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">   <span class="built_in">cout</span> &lt;&lt; <span class="string">"第一本书类目 : "</span> &lt;&lt; Book1.subject &lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">   <span class="built_in">cout</span> &lt;&lt; <span class="string">"第一本书 ID : "</span> &lt;&lt; Book1.book_id &lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"> </span><br><span class="line">   <span class="comment">// 输出 Book2 信息</span></span><br><span class="line">   <span class="built_in">cout</span> &lt;&lt; <span class="string">"第二本书标题 : "</span> &lt;&lt; Book2.title &lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">   <span class="built_in">cout</span> &lt;&lt; <span class="string">"第二本书作者 : "</span> &lt;&lt; Book2.author &lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">   <span class="built_in">cout</span> &lt;&lt; <span class="string">"第二本书类目 : "</span> &lt;&lt; Book2.subject &lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">   <span class="built_in">cout</span> &lt;&lt; <span class="string">"第二本书 ID : "</span> &lt;&lt; Book2.book_id &lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"> </span><br><span class="line">   <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>output：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">第一本书标题 : C++ 教程</span><br><span class="line">第一本书作者 : Runoob</span><br><span class="line">第一本书类目 : 编程语言</span><br><span class="line">第一本书 ID : <span class="number">12345</span></span><br><span class="line">第二本书标题 : CSS 教程</span><br><span class="line">第二本书作者 : Runoob</span><br><span class="line">第二本书类目 : 前端技术</span><br><span class="line">第二本书 ID : <span class="number">12346</span></span><br></pre></td></tr></table></figure></p><blockquote><p>2.结构作为函数参数<br>你也可以把结构作为函数参数，传参方式与其他类型的变量或指针类似。可以使用上面实例中的方式来访问结构变量：</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printBook</span><span class="params">( struct Books book )</span></span>;</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 声明一个结构体类型 Books </span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Books</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">   <span class="keyword">char</span>  title[<span class="number">50</span>];</span><br><span class="line">   <span class="keyword">char</span>  author[<span class="number">50</span>];</span><br><span class="line">   <span class="keyword">char</span>  subject[<span class="number">100</span>];</span><br><span class="line">   <span class="keyword">int</span>   book_id;</span><br><span class="line">&#125;;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">( )</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">   Books Book1;        <span class="comment">// 定义结构体类型 Books 的变量 Book1</span></span><br><span class="line">   Books Book2;        <span class="comment">// 定义结构体类型 Books 的变量 Book2</span></span><br><span class="line"> </span><br><span class="line">    <span class="comment">// Book1 详述</span></span><br><span class="line">   <span class="built_in">strcpy</span>( Book1.title, <span class="string">"C++ 教程"</span>);</span><br><span class="line">   <span class="built_in">strcpy</span>( Book1.author, <span class="string">"Runoob"</span>); </span><br><span class="line">   <span class="built_in">strcpy</span>( Book1.subject, <span class="string">"编程语言"</span>);</span><br><span class="line">   Book1.book_id = <span class="number">12345</span>;</span><br><span class="line"> </span><br><span class="line">   <span class="comment">// Book2 详述</span></span><br><span class="line">   <span class="built_in">strcpy</span>( Book2.title, <span class="string">"CSS 教程"</span>);</span><br><span class="line">   <span class="built_in">strcpy</span>( Book2.author, <span class="string">"Runoob"</span>);</span><br><span class="line">   <span class="built_in">strcpy</span>( Book2.subject, <span class="string">"前端技术"</span>);</span><br><span class="line">   Book2.book_id = <span class="number">12346</span>;</span><br><span class="line"> </span><br><span class="line">   <span class="comment">// 输出 Book1 信息</span></span><br><span class="line">   printBook( Book1 );</span><br><span class="line"> </span><br><span class="line">   <span class="comment">// 输出 Book2 信息</span></span><br><span class="line">   printBook( Book2 );</span><br><span class="line"> </span><br><span class="line">   <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">copyBook</span><span class="params">(struct Books book,<span class="keyword">char</span> title,<span class="keyword">char</span> author)</span></span>&#123;</span><br><span class="line">    <span class="built_in">strcpy</span>(book.title,title);</span><br><span class="line">    <span class="built_in">strcpy</span>(book.author,author);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printBook</span><span class="params">( struct Books book )</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">   <span class="built_in">cout</span> &lt;&lt; <span class="string">"书标题 : "</span> &lt;&lt; book.title &lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">   <span class="built_in">cout</span> &lt;&lt; <span class="string">"书作者 : "</span> &lt;&lt; book.author &lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">   <span class="built_in">cout</span> &lt;&lt; <span class="string">"书类目 : "</span> &lt;&lt; book.subject &lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">   <span class="built_in">cout</span> &lt;&lt; <span class="string">"书 ID : "</span> &lt;&lt; book.book_id &lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>output:<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">书标题 : C++ 教程</span><br><span class="line">书作者 : Runoob</span><br><span class="line">书类目 : 编程语言</span><br><span class="line">书 ID : <span class="number">12345</span></span><br><span class="line">书标题 : CSS 教程</span><br><span class="line">书作者 : Runoob</span><br><span class="line">书类目 : 前端技术</span><br><span class="line">书 ID : <span class="number">12346</span></span><br></pre></td></tr></table></figure></p><blockquote><p>3.指向结构的指针<br>这里我们用到了-&gt; 操作符，-&gt;操作符是用于带成员的类型对应指针上，用来提取成员变量或函数用的。</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Books</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">   <span class="keyword">char</span>  title[<span class="number">50</span>];</span><br><span class="line">   <span class="keyword">char</span>  author[<span class="number">50</span>];</span><br><span class="line">   <span class="keyword">char</span>  subject[<span class="number">100</span>];</span><br><span class="line">   <span class="keyword">int</span>   book_id;</span><br><span class="line">&#125;;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">( )</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">   Books Book1;        <span class="comment">// 定义结构体类型 Books 的变量 Book1</span></span><br><span class="line">   Books Book2;        <span class="comment">// 定义结构体类型 Books 的变量 Book2</span></span><br><span class="line"> </span><br><span class="line">    <span class="comment">// Book1 详述</span></span><br><span class="line">   <span class="built_in">strcpy</span>( Book1.title, <span class="string">"C++ 教程"</span>);</span><br><span class="line">   <span class="built_in">strcpy</span>( Book1.author, <span class="string">"Runoob"</span>); </span><br><span class="line">   <span class="built_in">strcpy</span>( Book1.subject, <span class="string">"编程语言"</span>);</span><br><span class="line">   Book1.book_id = <span class="number">12345</span>;</span><br><span class="line"> </span><br><span class="line">   <span class="comment">// Book2 详述</span></span><br><span class="line">   <span class="built_in">strcpy</span>( Book2.title, <span class="string">"CSS 教程"</span>);</span><br><span class="line">   <span class="built_in">strcpy</span>( Book2.author, <span class="string">"Runoob"</span>);</span><br><span class="line">   <span class="built_in">strcpy</span>( Book2.subject, <span class="string">"前端技术"</span>);</span><br><span class="line">   Book2.book_id = <span class="number">12346</span>;</span><br><span class="line"> </span><br><span class="line">   <span class="comment">// 通过传 Book1 的地址来输出 Book1 信息</span></span><br><span class="line">   printBook( &amp;Book1 );</span><br><span class="line"> </span><br><span class="line">   <span class="comment">// 通过传 Book2 的地址来输出 Book2 信息</span></span><br><span class="line">   printBook( &amp;Book2 );</span><br><span class="line"> </span><br><span class="line">   <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 该函数以结构指针作为参数</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printBook</span><span class="params">( struct Books *book )</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">   <span class="built_in">cout</span> &lt;&lt; <span class="string">"书标题  : "</span> &lt;&lt; book-&gt;title &lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">   <span class="built_in">cout</span> &lt;&lt; <span class="string">"书作者 : "</span> &lt;&lt; book-&gt;author &lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">   <span class="built_in">cout</span> &lt;&lt; <span class="string">"书类目 : "</span> &lt;&lt; book-&gt;subject &lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">   <span class="built_in">cout</span> &lt;&lt; <span class="string">"书 ID : "</span> &lt;&lt; book-&gt;book_id &lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>output：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">书标题  : C++ 教程</span><br><span class="line">书作者 : Runoob</span><br><span class="line">书类目 : 编程语言</span><br><span class="line">书 ID : <span class="number">12345</span></span><br><span class="line">书标题  : CSS 教程</span><br><span class="line">书作者 : Runoob</span><br><span class="line">书类目 : 前端技术</span><br><span class="line">书 ID : <span class="number">12346</span></span><br></pre></td></tr></table></figure></p><blockquote><p> 4.struct扩展</p></blockquote><p>C++ 中的 struct 对 C 中的 struct 进行了扩充，它已经不再只是一个包含不同数据类型的数据结构了，它已经获取了太多的功能。<br>struct 能包含成员函数吗？ 能！<br>struct 能继承吗？ 能！！<br>struct 能实现多态吗？ 能！！！<br>既然这些它都能实现，那它和 class 还能有什么区别？<br>最本质的一个区别就是默认的访问控制，体现在两个方面：<br> 1）默认的继承访问权限。struct是public的，class是private的。<br> 2）struct 作为数据结构的实现体，它默认的数据访问控制是 public 的，而 class 作为对象的实现体，它默认的成员变量访问控制是 private</p><h3 id="C-引用"><a href="#C-引用" class="headerlink" title="C++ 引用"></a>C++ 引用</h3><p>它是某个已存在变量的另一个名字。一旦把引用初始化为某个变量，就可以使用该引用名称或变量名称来指向变量。<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> i = <span class="number">17</span>;</span><br><span class="line"><span class="keyword">int</span>&amp;  r=i</span><br></pre></td></tr></table></figure></p><p>在这些声明中，&amp; 读作引用。因此，第一个声明可以读作 “r 是一个初始化为 i 的整型引用”</p><h3 id="C-引用-vs-指针"><a href="#C-引用-vs-指针" class="headerlink" title="C++ 引用 vs 指针"></a>C++ 引用 vs 指针</h3><p>引用很容易与指针混淆，它们之间有三个主要的不同：</p><ol><li>不存在空引用。引用必须连接到一块合法的内存。</li><li>一旦引用被初始化为一个对象，就不能被指向到另一个对象。指针可以在任何时候指向到另一个对象。</li><li>引用必须在创建时被初始化。指针可以在任何时间被初始化。</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;这一节我会详细介绍C++中指针和引用以及他们的区别，总的来说，难度还不太高，屏上得来终觉浅，看完文章后不妨多练练吧-:)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;C-指针&quot;&gt;&lt;a href=&quot;#C-指针&quot; class=&quot;headerli
      
    
    </summary>
    
    
      <category term="cpp" scheme="https://apenshar.github.io/myBlog/tags/cpp/"/>
    
  </entry>
  
  <entry>
    <title>C++超度指南第一弹</title>
    <link href="https://apenshar.github.io/myBlog/2018-02-10-CPP-learn01.html"/>
    <id>https://apenshar.github.io/myBlog/2018-02-10-CPP-learn01.html</id>
    <published>2018-02-10T04:38:34.000Z</published>
    <updated>2018-02-10T09:21:48.718Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>以下是我最近学习C++时所摘录的md笔记，拿出来献丑了，希望能帮助看到此篇的小白们快速入门，顺利超度！</p></blockquote><h3 id="C-简介"><a href="#C-简介" class="headerlink" title="C++简介"></a>C++简介</h3><p>C++ 是一种静态类型的、编译式的、通用的、大小写敏感的、不规则的编程语言，支持过程化编程、面向对象编程和泛型编程。<br>C++ 被认为是一种中级语言，它综合了高级语言和低级语言的特点。<br>C++ 是由 Bjarne Stroustrup 于 1979 年在新泽西州美利山贝尔实验室开始设计开发的。<br>C++ 是 C 的一个超集，事实上，任何合法的 C 程序都是合法的 C++ 程序。</p><h3 id="面向对象程序设计"><a href="#面向对象程序设计" class="headerlink" title="面向对象程序设计"></a>面向对象程序设计</h3><p>C++ 完全支持面向对象的程序设计，包括面向对象开发的四大特性：</p><ol><li>封装</li><li>抽象</li><li>继承</li><li>多态</li></ol><h3 id="标准库"><a href="#标准库" class="headerlink" title="标准库"></a>标准库</h3><p>标准的 C++ 由三个重要部分组成：</p><ol><li>核心语言，提供了所有构件块，包括变量、数据类型和常量，等等。</li><li>C++ 标准库，提供了大量的函数，用于操作文件、字符串等。</li><li>标准模板库（STL），提供了大量的方法，用于操作数据结构等。</li></ol><p>程序 g++ 是将 gcc 默认语言设为 C++ 的一个特殊的版本，链接时它自动使用 C++ 标准库而不用 C 标准库。通过遵循源码的命名规范并指定对应库的名字，用 gcc 来编译链接 C++ 程序是可行的，如下例所示：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ g++ helloworld.cpp</span><br></pre></td></tr></table></figure></p><p>通常我们使用<code>-o</code> 选项指定可执行程序的文件名，以下实例生成一个 helloworld 的可执行文件：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ g++ helloworld.cpp -o helloworld</span><br></pre></td></tr></table></figure></p><p>执行 helloworld:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ ./helloworld</span><br><span class="line">Hello, world!</span><br></pre></td></tr></table></figure></p><h3 id="C-程序结构"><a href="#C-程序结构" class="headerlink" title="C++ 程序结构"></a>C++ 程序结构</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">   <span class="built_in">cout</span> &lt;&lt; <span class="string">"Hello World"</span>; <span class="comment">// 输出 Hello World</span></span><br><span class="line">   <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>C++ 语言定义了一些头文件，这些头文件包含了程序中必需的或有用的信息。上面这段程序中，引入了头文件 <iostream>。</iostream></li><li>下一行 using namespace std; 告诉编译器使用 std 命名空间。命名空间是 C++ 中一个相对新的概念。</li><li>下一行<code>int main()</code>是主函数，程序从这里开始执行。</li><li>下一行<code>cout &lt;&lt; &quot;Hello World&quot;;</code> 会在屏幕上显示消息 “Hello World”。</li><li>下一行 return 0; 终止 main( )函数，并向调用进程返回值 0。</li></ol><h3 id="分号和块"><a href="#分号和块" class="headerlink" title="分号和块"></a>分号和块</h3><p>在 C++ 中，分号是语句结束符。也就是说，每个语句必须以分号结束。它表明一个逻辑实体的结束。<br>++ 不以行末作为结束符的标识，因此，您可以在一行上放置多个语句。<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">x = y; y = y+<span class="number">1</span>; add(x, y);</span><br></pre></td></tr></table></figure></p><h3 id="三字符组"><a href="#三字符组" class="headerlink" title="三字符组"></a>三字符组</h3><p>三字符组就是用于表示另一个字符的三个字符序列，又称为三字符序列。三字符序列总是以两个问号开头。三字符序列不太常见，但 C++ 标准允许把某些字符指定为三字符序列。以前为了表示键盘上没有的字符，这是必不可少的一种方法。</p><table><thead><tr><th>a</th><th>b</th></tr></thead><tbody><tr><td>??=</td><td>#</td></tr><tr><td>??/</td><td>\</td></tr><tr><td>??’</td><td>^</td></tr><tr><td>??(</td><td>[</td></tr><tr><td>??)</td><td>]</td></tr><tr><td>??&lt;</td><td>{</td></tr><tr><td>??&gt;</td><td>}</td></tr><tr><td>??-</td><td>~</td></tr></tbody></table><h3 id="空格"><a href="#空格" class="headerlink" title="空格"></a>空格</h3><p>在 C++ 中，空格用于描述空白符、制表符、换行符和注释。让编译器能识别语句中的某个元素（比如 int）在哪里结束，下一个元素在哪里开始。</p><p>###　注释<br>C++ 支持单行注释和多行注释</p><ol><li>C++ 单行注释以 # 开头</li><li>C++ 多行注释以 /<em> 开始，以 </em>/ 终止</li><li>这里给大家介绍一种奇技淫巧吧，通过if判别式决定是否执行，同样也能达到注释的效果，<br>如果需要取消注释，你可以把<code>#if 0</code> 改成 <code>#if 1</code> 来执行 code 的代码。<br>这种形式对程序调试有很大帮助，测试时使用<code>#if 1</code> 来执行测试代码，发布后使用 #if 0 来屏蔽测试代码。</li></ol><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">if</span> 0</span></span><br><span class="line">   code</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br></pre></td></tr></table></figure><h3 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h3><table><thead><tr><th>col1</th><th>col2 </th></tr></thead><tbody><tr><td>布尔型</td><td>bool</td></tr><tr><td>字符型</td><td>char</td></tr><tr><td>整型</td><td>int</td></tr><tr><td>浮点型</td><td>float</td></tr><tr><td>双浮点型</td><td>double</td></tr><tr><td>无类型</td><td>void</td></tr><tr><td>宽字符型</td><td>wchar_t</td></tr></tbody></table><p>一些基本类型可以使用一个或多个类型修饰符进行修饰：</p><table><thead><tr><th>类型</th><th>类</th><th>范围</th></tr></thead><tbody><tr><td>char</td><td>1个字节</td><td>-128 到 127 或者 0 到 255</td></tr><tr><td>unsigned char</td><td>1个字节</td><td>0 到 255</td></tr><tr><td>signed char</td><td>1个字节</td><td>-128 到 127 </td></tr><tr><td>int</td><td>4 个字节</td><td>-2147483648 到 2147483647</td></tr><tr><td>unsigned int</td><td>4个字节</td><td>0 到 4294967295</td></tr><tr><td>signed int</td><td>4个字节</td><td>-2147483648 到 2147483647</td></tr><tr><td>short int</td><td>2个字节</td><td>-32768 到 32767</td></tr><tr><td>unsigned short int</td><td>2个字节</td><td>0 到 65,535</td></tr><tr><td>signed short int</td><td>2个字节</td><td>-32768 到 32767</td></tr><tr><td>long int</td><td>8个字节</td><td>-9,223,372,036,854,775,808 到 9,223,372,036,854,775,807</td></tr><tr><td>signed long int</td><td>8个字节</td><td>-9,223,372,036,854,775,808 到 9,223,372,036,854,775,807</td></tr></tbody></table><p>下面实例会输出您电脑上各种数据类型的大小。<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;  </span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;  </span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;limits&gt;  </span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;  </span><br><span class="line">  </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span>  </span></span><br><span class="line"><span class="function"></span>&#123;  </span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"type: \t\t"</span> &lt;&lt; <span class="string">"************size**************"</span>&lt;&lt; <span class="built_in">endl</span>;  </span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"bool: \t\t"</span> &lt;&lt; <span class="string">"所占字节数："</span> &lt;&lt; <span class="keyword">sizeof</span>(<span class="keyword">bool</span>);  </span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"\t最大值："</span> &lt;&lt; (numeric_limits&lt;<span class="keyword">bool</span>&gt;::max)();  </span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"\t\t最小值："</span> &lt;&lt; (numeric_limits&lt;<span class="keyword">bool</span>&gt;::min)() &lt;&lt; <span class="built_in">endl</span>;  </span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"char: \t\t"</span> &lt;&lt; <span class="string">"所占字节数："</span> &lt;&lt; <span class="keyword">sizeof</span>(<span class="keyword">char</span>);  </span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"\t最大值："</span> &lt;&lt; (numeric_limits&lt;<span class="keyword">char</span>&gt;::max)();  </span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"\t\t最小值："</span> &lt;&lt; (numeric_limits&lt;<span class="keyword">char</span>&gt;::min)() &lt;&lt; <span class="built_in">endl</span>;  </span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"signed char: \t"</span> &lt;&lt; <span class="string">"所占字节数："</span> &lt;&lt; <span class="keyword">sizeof</span>(<span class="keyword">signed</span> <span class="keyword">char</span>);  </span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"\t最大值："</span> &lt;&lt; (numeric_limits&lt;<span class="keyword">signed</span> <span class="keyword">char</span>&gt;::max)();  </span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"\t\t最小值："</span> &lt;&lt; (numeric_limits&lt;<span class="keyword">signed</span> <span class="keyword">char</span>&gt;::min)() &lt;&lt; <span class="built_in">endl</span>;  </span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"unsigned char: \t"</span> &lt;&lt; <span class="string">"所占字节数："</span> &lt;&lt; <span class="keyword">sizeof</span>(<span class="keyword">unsigned</span> <span class="keyword">char</span>);  </span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"\t最大值："</span> &lt;&lt; (numeric_limits&lt;<span class="keyword">unsigned</span> <span class="keyword">char</span>&gt;::max)();  </span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"\t\t最小值："</span> &lt;&lt; (numeric_limits&lt;<span class="keyword">unsigned</span> <span class="keyword">char</span>&gt;::min)() &lt;&lt; <span class="built_in">endl</span>;  </span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"wchar_t: \t"</span> &lt;&lt; <span class="string">"所占字节数："</span> &lt;&lt; <span class="keyword">sizeof</span>(<span class="keyword">wchar_t</span>);  </span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"\t最大值："</span> &lt;&lt; (numeric_limits&lt;<span class="keyword">wchar_t</span>&gt;::max)();  </span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"\t\t最小值："</span> &lt;&lt; (numeric_limits&lt;<span class="keyword">wchar_t</span>&gt;::min)() &lt;&lt; <span class="built_in">endl</span>;  </span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"short: \t\t"</span> &lt;&lt; <span class="string">"所占字节数："</span> &lt;&lt; <span class="keyword">sizeof</span>(<span class="keyword">short</span>);  </span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"\t最大值："</span> &lt;&lt; (numeric_limits&lt;<span class="keyword">short</span>&gt;::max)();  </span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"\t\t最小值："</span> &lt;&lt; (numeric_limits&lt;<span class="keyword">short</span>&gt;::min)() &lt;&lt; <span class="built_in">endl</span>;  </span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"int: \t\t"</span> &lt;&lt; <span class="string">"所占字节数："</span> &lt;&lt; <span class="keyword">sizeof</span>(<span class="keyword">int</span>);  </span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"\t最大值："</span> &lt;&lt; (numeric_limits&lt;<span class="keyword">int</span>&gt;::max)();  </span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"\t最小值："</span> &lt;&lt; (numeric_limits&lt;<span class="keyword">int</span>&gt;::min)() &lt;&lt; <span class="built_in">endl</span>;  </span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"unsigned: \t"</span> &lt;&lt; <span class="string">"所占字节数："</span> &lt;&lt; <span class="keyword">sizeof</span>(<span class="keyword">unsigned</span>);  </span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"\t最大值："</span> &lt;&lt; (numeric_limits&lt;<span class="keyword">unsigned</span>&gt;::max)();  </span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"\t最小值："</span> &lt;&lt; (numeric_limits&lt;<span class="keyword">unsigned</span>&gt;::min)() &lt;&lt; <span class="built_in">endl</span>;  </span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"long: \t\t"</span> &lt;&lt; <span class="string">"所占字节数："</span> &lt;&lt; <span class="keyword">sizeof</span>(<span class="keyword">long</span>);  </span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"\t最大值："</span> &lt;&lt; (numeric_limits&lt;<span class="keyword">long</span>&gt;::max)();  </span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"\t最小值："</span> &lt;&lt; (numeric_limits&lt;<span class="keyword">long</span>&gt;::min)() &lt;&lt; <span class="built_in">endl</span>;  </span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"unsigned long: \t"</span> &lt;&lt; <span class="string">"所占字节数："</span> &lt;&lt; <span class="keyword">sizeof</span>(<span class="keyword">unsigned</span> <span class="keyword">long</span>);  </span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"\t最大值："</span> &lt;&lt; (numeric_limits&lt;<span class="keyword">unsigned</span> <span class="keyword">long</span>&gt;::max)();  </span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"\t最小值："</span> &lt;&lt; (numeric_limits&lt;<span class="keyword">unsigned</span> <span class="keyword">long</span>&gt;::min)() &lt;&lt; <span class="built_in">endl</span>;  </span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"double: \t"</span> &lt;&lt; <span class="string">"所占字节数："</span> &lt;&lt; <span class="keyword">sizeof</span>(<span class="keyword">double</span>);  </span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"\t最大值："</span> &lt;&lt; (numeric_limits&lt;<span class="keyword">double</span>&gt;::max)();  </span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"\t最小值："</span> &lt;&lt; (numeric_limits&lt;<span class="keyword">double</span>&gt;::min)() &lt;&lt; <span class="built_in">endl</span>;  </span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"long double: \t"</span> &lt;&lt; <span class="string">"所占字节数："</span> &lt;&lt; <span class="keyword">sizeof</span>(<span class="keyword">long</span> <span class="keyword">double</span>);  </span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"\t最大值："</span> &lt;&lt; (numeric_limits&lt;<span class="keyword">long</span> <span class="keyword">double</span>&gt;::max)();  </span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"\t最小值："</span> &lt;&lt; (numeric_limits&lt;<span class="keyword">long</span> <span class="keyword">double</span>&gt;::min)() &lt;&lt; <span class="built_in">endl</span>;  </span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"float: \t\t"</span> &lt;&lt; <span class="string">"所占字节数："</span> &lt;&lt; <span class="keyword">sizeof</span>(<span class="keyword">float</span>);  </span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"\t最大值："</span> &lt;&lt; (numeric_limits&lt;<span class="keyword">float</span>&gt;::max)();  </span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"\t最小值："</span> &lt;&lt; (numeric_limits&lt;<span class="keyword">float</span>&gt;::min)() &lt;&lt; <span class="built_in">endl</span>;  </span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"size_t: \t"</span> &lt;&lt; <span class="string">"所占字节数："</span> &lt;&lt; <span class="keyword">sizeof</span>(<span class="keyword">size_t</span>);  </span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"\t最大值："</span> &lt;&lt; (numeric_limits&lt;<span class="keyword">size_t</span>&gt;::max)();  </span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"\t最小值："</span> &lt;&lt; (numeric_limits&lt;<span class="keyword">size_t</span>&gt;::min)() &lt;&lt; <span class="built_in">endl</span>;  </span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"string: \t"</span> &lt;&lt; <span class="string">"所占字节数："</span> &lt;&lt; <span class="keyword">sizeof</span>(<span class="built_in">string</span>) &lt;&lt; <span class="built_in">endl</span>;  </span><br><span class="line">    <span class="comment">// &lt;&lt; "\t最大值：" &lt;&lt; (numeric_limits&lt;string&gt;::max)() &lt;&lt; "\t最小值：" &lt;&lt; (numeric_limits&lt;string&gt;::min)() &lt;&lt; endl;  </span></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"type: \t\t"</span> &lt;&lt; <span class="string">"************size**************"</span>&lt;&lt; <span class="built_in">endl</span>;  </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>output:<br>这里使用了 <code>endl</code>换行，这将在每一行后插入一个换行符，&lt;&lt; 运算符用于向屏幕传多个值。 sizeof() 函数可获取各种数据类型的大小。<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">type:         ************size**************</span><br><span class="line"><span class="keyword">bool</span>:         所占字节数：<span class="number">1</span>    最大值：<span class="number">1</span>        最小值：<span class="number">0</span></span><br><span class="line"><span class="keyword">char</span>:         所占字节数：<span class="number">1</span>    最大值：        最小值：?</span><br><span class="line"><span class="keyword">signed</span> <span class="keyword">char</span>:     所占字节数：<span class="number">1</span>    最大值：        最小值：?</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span>:     所占字节数：<span class="number">1</span>    最大值：?        最小值：</span><br><span class="line"><span class="keyword">wchar_t</span>:     所占字节数：<span class="number">4</span>    最大值：<span class="number">2147483647</span>        最小值：<span class="number">-2147483648</span></span><br><span class="line"><span class="keyword">short</span>:         所占字节数：<span class="number">2</span>    最大值：<span class="number">32767</span>        最小值：<span class="number">-32768</span></span><br><span class="line"><span class="keyword">int</span>:         所占字节数：<span class="number">4</span>    最大值：<span class="number">2147483647</span>    最小值：<span class="number">-2147483648</span></span><br><span class="line"><span class="keyword">unsigned</span>:     所占字节数：<span class="number">4</span>    最大值：<span class="number">4294967295</span>    最小值：<span class="number">0</span></span><br><span class="line"><span class="keyword">long</span>:         所占字节数：<span class="number">8</span>    最大值：<span class="number">9223372036854775807</span>    最小值：<span class="number">-9223372036854775808</span></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">long</span>:     所占字节数：<span class="number">8</span>    最大值：<span class="number">18446744073709551615</span>    最小值：<span class="number">0</span></span><br><span class="line"><span class="keyword">double</span>:     所占字节数：<span class="number">8</span>    最大值：<span class="number">1.79769e+308</span>    最小值：<span class="number">2.22507e-308</span></span><br><span class="line"><span class="keyword">long</span> <span class="keyword">double</span>:     所占字节数：<span class="number">16</span>    最大值：<span class="number">1.18973e+4932</span>    最小值：<span class="number">3.3621e-4932</span></span><br><span class="line"><span class="keyword">float</span>:         所占字节数：<span class="number">4</span>    最大值：<span class="number">3.40282e+38</span>    最小值：<span class="number">1.17549e-38</span></span><br><span class="line"><span class="keyword">size_t</span>:     所占字节数：<span class="number">8</span>    最大值：<span class="number">18446744073709551615</span>    最小值：<span class="number">0</span></span><br><span class="line"><span class="built_in">string</span>:     所占字节数：<span class="number">24</span></span><br><span class="line">type:         ************size**************</span><br></pre></td></tr></table></figure></p><h3 id="typedef-声明"><a href="#typedef-声明" class="headerlink" title="typedef 声明"></a>typedef 声明</h3><p>您可以使用 typedef 为一个已有的类型取一个新的名字。下面是使用 typedef 定义一个新类型的语法：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span>　<span class="keyword">int</span> feet</span><br></pre></td></tr></table></figure></p><p>现在，下面的声明是完全合法的，它创建了一个整型变量 distance：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">feet distance;</span><br></pre></td></tr></table></figure></p><h3 id="枚举类型"><a href="#枚举类型" class="headerlink" title="枚举类型"></a>枚举类型</h3><p>枚举类型(enumeration)是C++中的一种派生数据类型，它是由用户定义的若干枚举常量的集合。<br>如果一个变量只有几种可能的值，可以定义为枚举(enumeration)类型。所谓”枚举”是指将变量的值一一列举出来，变量的值只能在列举出来的值的范围内。<br>创建枚举，需要使用关键字 enum。枚举类型的一般形式为：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">enum</span> color &#123; red, green, blue &#125; c;</span><br><span class="line">c = blue;</span><br></pre></td></tr></table></figure></p><p>默认情况下，第一个名称的值为 0，第二个名称的值为 1，第三个名称的值为 2，以此类推。但是，您也可以给名称赋予一个特殊的值，只需要添加一个初始值即可。例如，在下面的枚举中，green 的值为 5。<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">enum</span> color &#123; red, green=<span class="number">5</span>, blue &#125;;</span><br></pre></td></tr></table></figure></p><p>在这里，blue 的值为 6，因为默认情况下，每个名称都会比它前面一个名称大 1，但 red 的值依然为 0。</p><h3 id="时间类型"><a href="#时间类型" class="headerlink" title="时间类型"></a>时间类型</h3><p>C++ 标准库没有提供所谓的日期类型。C++ 继承了 C 语言用于日期和时间操作的结构和函数。为了使用日期和时间相关的函数和结构，需要在 C++ 程序中引用 <ctime> 头文件。</ctime></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ctime&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">( )</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">   <span class="comment">// 基于当前系统的当前日期/时间</span></span><br><span class="line">   <span class="keyword">time_t</span> now = time(<span class="number">0</span>);</span><br><span class="line">   </span><br><span class="line">   <span class="comment">// 把 now 转换为字符串形式</span></span><br><span class="line">   <span class="keyword">char</span>* dt = ctime(&amp;now);</span><br><span class="line"> </span><br><span class="line">   <span class="built_in">cout</span> &lt;&lt; <span class="string">"本地日期和时间："</span> &lt;&lt; dt &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"> </span><br><span class="line">   <span class="comment">// 把 now 转换为 tm 结构</span></span><br><span class="line">   tm *gmtm = gmtime(&amp;now);</span><br><span class="line">   dt = asctime(gmtm);</span><br><span class="line">   <span class="built_in">cout</span> &lt;&lt; <span class="string">"UTC 日期和时间："</span>&lt;&lt; dt &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>output:<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">本地日期和时间：Sat Jan  <span class="number">8</span> <span class="number">20</span>:<span class="number">07</span>:<span class="number">41</span> <span class="number">2011</span></span><br><span class="line"></span><br><span class="line">UTC 日期和时间：Sun Jan  <span class="number">9</span> <span class="number">03</span>:<span class="number">07</span>:<span class="number">41</span> <span class="number">2011</span></span><br></pre></td></tr></table></figure></p><h3 id="C-基本的输入输出"><a href="#C-基本的输入输出" class="headerlink" title="C++ 基本的输入输出"></a>C++ 基本的输入输出</h3><p>I/O 库头文件</p><table><thead><tr><th>库</th><th>解释</th></tr></thead><tbody><tr><td>&lt;iostream&gt;</td><td>该文件定义了 cin、cout、cerr 和 clog 对象，分别对应于标准输入流、标准输出流、非缓冲标准错误流和缓冲标准错误流 </td></tr><tr><td>&lt;iomanip&gt;</td><td>　该文件通过所谓的参数化的流操纵器（比如 setw 和 setprecision），来声明对执行标准化 I/O 有用的服务</td></tr><tr><td>&lt;fstream&gt;</td><td>该文件为用户控制的文件处理声明服务。我们将在文件和流的相关章节讨论它的细节。</td></tr></tbody></table><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">( )</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">   <span class="keyword">char</span> name[<span class="number">50</span>];</span><br><span class="line"> </span><br><span class="line">   <span class="built_in">cout</span> &lt;&lt; <span class="string">"请输入您的名称： "</span>;</span><br><span class="line">   <span class="built_in">cin</span> &gt;&gt; name;</span><br><span class="line">   <span class="built_in">cout</span> &lt;&lt; <span class="string">"您的名称是： "</span> &lt;&lt; name &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>标准输入流<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">请输入您的名称： cplusplus</span><br><span class="line">您的名称是： cplusplus</span><br></pre></td></tr></table></figure></p><p>标准错误流（cerr）<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">( )</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">   <span class="keyword">char</span> str[] = <span class="string">"Unable to read...."</span>;</span><br><span class="line"> </span><br><span class="line">   <span class="built_in">cerr</span> &lt;&lt; <span class="string">"Error message : "</span> &lt;&lt; str &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>当上面的代码被编译和执行时，它会产生下列结果：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Error message : Unable to read....</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;以下是我最近学习C++时所摘录的md笔记，拿出来献丑了，希望能帮助看到此篇的小白们快速入门，顺利超度！&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;C-简介&quot;&gt;&lt;a href=&quot;#C-简介&quot; class=&quot;headerlink&quot; title
      
    
    </summary>
    
    
      <category term="cpp" scheme="https://apenshar.github.io/myBlog/tags/cpp/"/>
    
  </entry>
  
  <entry>
    <title>使用Git管理你的项目</title>
    <link href="https://apenshar.github.io/myBlog/2018-02-04-git-introduce.html"/>
    <id>https://apenshar.github.io/myBlog/2018-02-04-git-introduce.html</id>
    <published>2018-02-04T13:42:22.000Z</published>
    <updated>2018-03-08T16:29:48.005Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Write-Before"><a href="#Write-Before" class="headerlink" title="Write Before"></a>Write Before</h2><p>Git 是 Linus Torvalds 为了帮助管理 Linux 内核开发而开发的一个开放源码的分布式版本控制软件,可以有效、高速的处理从很小到非常大的项目版本管理，非常适合团队间的协同开发。使用git管理项目也有大半年了，每次操作都会忘记一些命令，今天来总结一发，加强记忆，以后敲代码再也不卡壳了</p><h2 id="Git-的分支操作"><a href="#Git-的分支操作" class="headerlink" title="Git 的分支操作"></a>Git 的分支操作</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">#查看当前项目有哪些远程仓库</span><br><span class="line">git remote -v </span><br><span class="line"></span><br><span class="line">#查看本地分支 </span><br><span class="line">git branch</span><br><span class="line"></span><br><span class="line">#查看远程分支</span><br><span class="line">git branch -r </span><br><span class="line"></span><br><span class="line">#查看本地仓库和远程仓库所有分支</span><br><span class="line">git branch -a</span><br><span class="line"></span><br><span class="line">#在本地仓库创建xxx分支(没有进入dev分支) </span><br><span class="line">git branch dev</span><br><span class="line"></span><br><span class="line"># 删除本地分支xxx  -D强制删除</span><br><span class="line">git branch -d xxx</span><br></pre></td></tr></table></figure><h2 id="Git-与远程仓库"><a href="#Git-与远程仓库" class="headerlink" title="Git 与远程仓库"></a>Git 与远程仓库</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">#关联远程仓库(标记为origin)</span><br><span class="line">git remote add origin git@github.com:username/xxx.git </span><br><span class="line"></span><br><span class="line">#将本地仓库代码提交远程仓库master分支</span><br><span class="line">git push origin master </span><br><span class="line"></span><br><span class="line">#在本地仓库创建dev分支并进入到该分支</span><br><span class="line">git checkout -b  dev</span><br><span class="line"></span><br><span class="line">#将本地仓库新建的dev分支迁到远程仓库的dev分支</span><br><span class="line">git push origin dev</span><br><span class="line"></span><br><span class="line"># 删除远程仓库的dev分支</span><br><span class="line">git push origin :dev</span><br><span class="line"></span><br><span class="line">#远程仓库有dev分支,而本地无,把远程仓库的dev分支迁到本地 -b 进入该分支   </span><br><span class="line">git checkout develop origin/develop</span><br></pre></td></tr></table></figure><h2 id="Git-与项目管理"><a href="#Git-与项目管理" class="headerlink" title="Git 与项目管理"></a>Git 与项目管理</h2><p>1.master分支：永远处于即将发布的状态<br>2.develop分支：处在最新的开发状态。测试后，准备发布过程中将develop合并到master</p><blockquote><p>开发完成后,进入到master分支下，执行以下命令</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git merge develop</span><br></pre></td></tr></table></figure><h2 id="Git-的个性化配置"><a href="#Git-的个性化配置" class="headerlink" title="Git 的个性化配置"></a>Git 的个性化配置</h2><p>默认的配置写在 .git/config上 ，可以自行配置，或者输入 <code>git config -l</code> 命令查看。<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">显示颜色</span></span><br><span class="line">git config --global color.ui true</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">显示中文文件名</span></span><br><span class="line">git config --global core.quotepath false </span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">个性化输出日志, 并给git <span class="built_in">log</span> 设置别名 git lg</span></span><br><span class="line">git config --global alias.lg "log --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)&lt;%an&gt;%Creset' --abbrev-commit --date=relative"</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">设置编辑器为vim(默认的是nano)</span></span><br><span class="line">git config --global core.editor "vim"</span><br></pre></td></tr></table></figure></p><h2 id="git-diff"><a href="#git-diff" class="headerlink" title="git  diff"></a>git  diff</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">比较两次提交之间的差异</span></span><br><span class="line">git diff &lt;$id1&gt; &lt;$id2&gt; </span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">在两个分支之间比较  加上 --<span class="built_in">stat</span> 是显示文件列表, 否则是文件内容diff</span></span><br><span class="line">git diff  &lt;branch1&gt; &lt;branch2&gt;   </span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 比较暂存区和版本库差异</span></span><br><span class="line">git diff --staged</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Write-Before&quot;&gt;&lt;a href=&quot;#Write-Before&quot; class=&quot;headerlink&quot; title=&quot;Write Before&quot;&gt;&lt;/a&gt;Write Before&lt;/h2&gt;&lt;p&gt;Git 是 Linus Torvalds 为了帮助管理 Li
      
    
    </summary>
    
    
      <category term="git" scheme="https://apenshar.github.io/myBlog/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>常用正则表达式片段</title>
    <link href="https://apenshar.github.io/myBlog/2018-01-30-RegExp-segment.html"/>
    <id>https://apenshar.github.io/myBlog/2018-01-30-RegExp-segment.html</id>
    <published>2018-01-29T16:23:58.000Z</published>
    <updated>2018-02-10T09:23:50.327Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>一些常用的正则表达式收集</p></blockquote><p>检测中文<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isContainChinese</span>(<span class="params">str</span>)</span>&#123;</span><br><span class="line"><span class="keyword">return</span> (<span class="regexp">/.*[\u4e00-\u9fa5]+.*$/</span>.test(str));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> testStr = <span class="string">"abc中文def"</span>;</span><br><span class="line">alert(isContainChinese(testStr)); <span class="comment">//true</span></span><br><span class="line"><span class="keyword">var</span> testStr = <span class="string">"abcdef"</span>;</span><br><span class="line">alert(isContainChinese(testStr)); <span class="comment">//false</span></span><br></pre></td></tr></table></figure></p><p>判断手机app内置浏览器：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> ua = navigator.userAgent.toLowerCase(),</span><br><span class="line">    isWx = <span class="regexp">/microMessenger/i</span>.test(ua),</span><br><span class="line">    isQQ = <span class="regexp">/\s+qq\//ig</span>.test(ua),</span><br><span class="line">    isQZone = <span class="regexp">/qzone/i</span>.test(ua),</span><br><span class="line">    isWeibo = <span class="regexp">/weibo/i</span>.test(ua);</span><br></pre></td></tr></table></figure></p><p>JS 正则表达式验证IP地址<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isValidIP</span>(<span class="params">ip</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> reg = <span class="regexp">/^(\d&#123;1,2&#125;|1\d\d|2[0-4]\d|25[0-5])\.(\d&#123;1,2&#125;|1\d\d|2[0-4]\d|25[0-5])\.(\d&#123;1,2&#125;|1\d\d|2[0-4]\d|25[0-5])\.(\d&#123;1,2&#125;|1\d\d|2[0-4]\d|25[0-5])$/</span></span><br><span class="line">    <span class="keyword">return</span> reg.test(ip);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;一些常用的正则表达式收集&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;检测中文&lt;br&gt;&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;
      
    
    </summary>
    
    
      <category term="js" scheme="https://apenshar.github.io/myBlog/tags/js/"/>
    
      <category term="RegExp" scheme="https://apenshar.github.io/myBlog/tags/RegExp/"/>
    
  </entry>
  
  <entry>
    <title>JS的执行加载机制研究</title>
    <link href="https://apenshar.github.io/myBlog/2018-01-30-js-execute-mechanism01.html"/>
    <id>https://apenshar.github.io/myBlog/2018-01-30-js-execute-mechanism01.html</id>
    <published>2018-01-29T16:07:05.000Z</published>
    <updated>2018-03-08T15:47:22.656Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Write-Before"><a href="#Write-Before" class="headerlink" title="Write Before"></a>Write Before</h2><p>今天来深入浅出聊一聊浏览器对js脚本的加载和执行机制。Javascripts默认是同步加载的，这里的加载指的是<strong>解析、执行</strong>，而不是简单的文件下载。而且现代浏览器对于代码请求的资源都是瀑布式的下载,并非是阻塞式的。假设我们的index页面要加载 一段js，但是其中某个请求结果迟迟得不到响应，就会阻塞后面其他js脚本的执行，同时也会阻碍后面页面的渲染（如果js引入是在head标签中）。</p><h2 id="解决方案-Solutions"><a href="#解决方案-Solutions" class="headerlink" title="解决方案(Solutions)"></a>解决方案(Solutions)</h2><blockquote><p> window.onload &amp;&amp; setTimeOUt 异步执行</p></blockquote><p>window.onload是一个事件，当文档内容完全加载完成会触发该事件。可以为此事件注册事件处理函数，并将要执行的脚本代码放在事件处理函数中，于是就可以避免获取不到对象的情况。</p><p>将js代码封装在fn中，通过setTimeOUt函数延迟执行,等页面模板渲染完成后再执行js代码，加快首屏渲染速度<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="comment">//do something</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// or</span></span><br><span class="line">setTimeout(fn,<span class="number">2000</span>)</span><br></pre></td></tr></table></figure></p><blockquote><p>async HTML5新属性</p></blockquote><p>async 属性规定一旦脚本可用，则会异步执行。需要注意的是async 属性仅适用于外部脚本，而且脚本并按顺序加载,如果脚本之间有依赖关系，慎用。 <strong> 比如说a.js依赖jquery，而a.js先于jquery下载完成，那么浏览器就开始执行a.js，由于没有jquery依赖，页面加载受损）</strong><br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">'http://china-addthis.googlecode.com/svn/trunk/addthis.js'</span> <span class="attr">async</span>=<span class="string">'async'</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></p><blockquote><p>defer HTML5新属性</p></blockquote><p>以前的defer只支持ie的hack，现在html5开始全面支持defer。defer 属性规定当页面已完成加载后，才会执行脚本，且按照脚本顺序来执行。defer 属性仅适用于外部脚本。<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">'http://libs.baidu.com/jquery/2.0.0/jquery.min.js'</span> <span class="attr">defer</span>=<span class="string">'defer'</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></p><hr><h4 id="总结-Summary"><a href="#总结-Summary" class="headerlink" title="总结(Summary)"></a>总结(Summary)</h4><ol><li>defer 和 async在脚本下载方面一样的，都是瀑布式的，异步。区别在于脚本下载完之后何时执行，看下图。显然 defer 是最接近我们对于应用脚本加载和执行的要求的</li><li>async 则是一个乱序执行的主，脚本一旦下载完成就立即执行，所以会无视你声明的顺序。async 对于应用脚本的用处不大，因为它完全不考虑依赖（哪怕是最低级的顺序执行），不过它对于那些可以不依赖任何脚本或不被任何脚本依赖的脚本来说却是非常合适的，最典型的例子：页面统计 Google Analytics</li><li>把所有脚本都丢到  之前是最标准的,原理见下图</li></ol><p><img src="https://i.loli.net/2018/01/25/5a69352a74c5e.png" alt="js加载步骤"></p><p><img src="https://i.loli.net/2018/01/25/5a6938c53e542.jpg" alt="241629186422402.jpg"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Write-Before&quot;&gt;&lt;a href=&quot;#Write-Before&quot; class=&quot;headerlink&quot; title=&quot;Write Before&quot;&gt;&lt;/a&gt;Write Before&lt;/h2&gt;&lt;p&gt;今天来深入浅出聊一聊浏览器对js脚本的加载和执行机制。Jav
      
    
    </summary>
    
    
      <category term="js" scheme="https://apenshar.github.io/myBlog/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>parcel-bundler打包指南</title>
    <link href="https://apenshar.github.io/myBlog/2018-01-29-parcel-bundle-introduce.html"/>
    <id>https://apenshar.github.io/myBlog/2018-01-29-parcel-bundle-introduce.html</id>
    <published>2018-01-29T15:32:59.000Z</published>
    <updated>2018-03-09T08:54:38.321Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>parcel是2017下半年异军突起的一个打包工具，主打0配置和极速打包，发布后短短两周就引起圈子里极大的关注。不废话了，下面就简单示范一下parcle的基础用法</p></blockquote><h3 id="Install-amp-Usage"><a href="#Install-amp-Usage" class="headerlink" title="Install &amp; Usage"></a>Install &amp; Usage</h3><p><strong>step 1 安装parcel</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g parcel-bundler</span><br></pre></td></tr></table></figure></p><p>安装好parcel工具包后，创建一个项目目录，在里面写一个简单的页面</p><p><strong>step 2 打包命令</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">parcel index.html -p 10086</span><br></pre></td></tr></table></figure></p><p>然后在浏览器中打开 <a href="http://localhost:10086/" target="_blank" rel="noopener">http://localhost:10086/</a> 就能打开刚才开发的页面<br>开发完成后，输入以下命令进行打包 ，打包后的文件会自动放入 dist 目录 </p><p><strong>step 3 上线啦~</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">parcel build index.html</span><br></pre></td></tr></table></figure></p><p> 在本地浏览器打开index.html，发现一塌糊涂，原来连css样式都没加载进来，什么鬼，被谁吃了？哈哈，敌在导演部，这里出现了一个坑，因为parcel打包后的路径都是绝对路径（坑），放在服务器上是没问题的~~但是如果本地打开，就得手动一个个修改为相对路径👿。</p><h3 id="Advance-Guide"><a href="#Advance-Guide" class="headerlink" title="Advance Guide"></a>Advance Guide</h3><p>下面我们来做一个模块化项目，只需要新建一个入口文件 main.js，在 main.js 中使用<code>import</code>引入其他的 css 和 js 文件，会用到 ES6 语法，需要安装一个babel工具 ，将ES6转化为ES5，这里我们推荐babel-preset-env。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install parcel-bundler -S</span><br><span class="line">npm install babel-preset-env -S</span><br></pre></td></tr></table></figure></p><p>然后在根目录创建一个 .babelrc 文件，添加以下配置：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"> &quot;presets&quot;: [&quot;env&quot;]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>再安装一个 css 转换工具，比如 autoprefixer<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install postcss-modules autoprefixer -S</span><br></pre></td></tr></table></figure></p><p>创建 .postcssrc 文件：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;modules&quot;: true,</span><br><span class="line">  &quot;plugins&quot;: &#123;</span><br><span class="line">     &quot;autoprefixer&quot;: &#123;</span><br><span class="line">       &quot;grid&quot;: true</span><br><span class="line">     &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>最后 npm run build 打包<br>可以看到 js 和 css 已经整合，其内容也经过了 babel 和 autoprefixer 的编译</p><p> index.html 作为入口，以 script 引入 main.js：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- index.html --&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"> &lt;div id=<span class="string">"app"</span>&gt;&lt;/div&gt;</span><br><span class="line"> &lt;script src=<span class="string">"./src/main.js"</span>&gt;&lt;/script&gt;</span><br><span class="line">&lt;<span class="regexp">/body&gt;</span></span><br><span class="line"><span class="regexp"> </span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/ main.js</span></span><br><span class="line"><span class="regexp"> </span></span><br><span class="line"><span class="regexp">import 'babel-polyfill'</span></span><br><span class="line"><span class="regexp">import Vue from 'vue'</span></span><br><span class="line"><span class="regexp">import App from './</span>App.vue<span class="string">'</span></span><br><span class="line"><span class="string">import router from '</span>./router<span class="string">'</span></span><br><span class="line"><span class="string">import '</span>./css/common.css<span class="string">'</span></span><br><span class="line"><span class="string"> </span></span><br><span class="line"><span class="string">Vue.config.productionTip = false</span></span><br><span class="line"><span class="string"> </span></span><br><span class="line"><span class="string">const vm = new Vue(&#123;</span></span><br><span class="line"> el: '#app',</span><br><span class="line"> router,</span><br><span class="line"> render: <span class="function"><span class="params">h</span> =&gt;</span> h(App)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><p>这里要推荐一个很厉害的插件 parcel-plugin-vue，它让 parcel 和 vue 成功牵手<br>完整配置如下</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"> <span class="attr">"name"</span>: <span class="string">"ParcelVue"</span>,</span><br><span class="line"> <span class="attr">"version"</span>: <span class="string">"1.0.0"</span>,</span><br><span class="line"> <span class="attr">"description"</span>: <span class="string">"The project of parcel &amp; vue created by Wise Wrong"</span>,</span><br><span class="line"> <span class="attr">"main"</span>: <span class="string">"main.js"</span>,</span><br><span class="line"> <span class="attr">"scripts"</span>: &#123;</span><br><span class="line"> <span class="attr">"dev"</span>: <span class="string">"parcel index.html -p 3030"</span>,</span><br><span class="line"> <span class="attr">"build"</span>: <span class="string">"parcel build index.html"</span></span><br><span class="line"> &#125;,</span><br><span class="line"> <span class="attr">"keywords"</span>: [</span><br><span class="line"> <span class="string">"parcel"</span>,</span><br><span class="line"> <span class="string">"vue"</span></span><br><span class="line"> ],</span><br><span class="line"> <span class="attr">"author"</span>: <span class="string">"wisewrong"</span>,</span><br><span class="line"> <span class="attr">"license"</span>: <span class="string">"ISC"</span>,</span><br><span class="line"> <span class="attr">"devDependencies"</span>: &#123;</span><br><span class="line"> <span class="attr">"autoprefixer"</span>: <span class="string">"^7.2.3"</span>,</span><br><span class="line"> <span class="attr">"babel-polyfill"</span>: <span class="string">"^6.26.0"</span>,</span><br><span class="line"> <span class="attr">"babel-preset-env"</span>: <span class="string">"^1.6.1"</span>,</span><br><span class="line"> <span class="attr">"parcel-bundler"</span>: <span class="string">"^1.3.0"</span>,</span><br><span class="line"> <span class="attr">"parcel-plugin-vue"</span>: <span class="string">"^1.4.0"</span>,</span><br><span class="line"> <span class="attr">"postcss-modules"</span>: <span class="string">"^1.1.0"</span>,</span><br><span class="line"> <span class="attr">"vue-loader"</span>: <span class="string">"^13.6.1"</span>,</span><br><span class="line"> <span class="attr">"vue-style-loader"</span>: <span class="string">"^3.0.3"</span>,</span><br><span class="line"> <span class="attr">"vue-template-compiler"</span>: <span class="string">"^2.5.13"</span></span><br><span class="line"> &#125;,</span><br><span class="line"> <span class="attr">"dependencies"</span>: &#123;</span><br><span class="line"> <span class="attr">"vue"</span>: <span class="string">"^2.5.13"</span>,</span><br><span class="line"> <span class="attr">"vue-router"</span>: <span class="string">"^3.0.1"</span></span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;parcel是2017下半年异军突起的一个打包工具，主打0配置和极速打包，发布后短短两周就引起圈子里极大的关注。不废话了，下面就简单示范一下parcle的基础用法&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;Install-amp-Usag
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>parseInt函数剖析</title>
    <link href="https://apenshar.github.io/myBlog/2018-01-27-parseInt-introduce.html"/>
    <id>https://apenshar.github.io/myBlog/2018-01-27-parseInt-introduce.html</id>
    <published>2018-01-27T15:59:36.000Z</published>
    <updated>2018-02-10T11:43:49.377Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Introduce：<code>parseInt</code>函数可以将一个将字符串按照指定的进制转化，得到最终的计算结果</p></blockquote><p><strong>parseInt(string, radix)</strong> </p><p><code>string</code>: 需要转化的字符，如果不是字符串会被转换，忽视空格符。</p><p><code>radix</code>：数字2-36之前的整型。默认使用10，表示十进制。需要注意的是，如果<code>radix</code>在2-36之外会返回NaN。如果<code>radix</code>为0，就返回一个与<code>string</code>等值的<code>number</code>。</p><p><strong>因为是按照<code>radix</code>指定的进制，所以字符串的除了个位以外的数都必须小于<code>radix</code>，否则返回NaN；如果个位数 大于等于<code>radix</code>，那么string舍弃个位，退一位。</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">parseInt</span>(<span class="string">'67'</span>,<span class="number">1</span>)</span><br><span class="line"><span class="comment">//NaN</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">parseInt</span>(<span class="string">'77'</span>,<span class="number">0</span>)</span><br><span class="line"><span class="comment">//77</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">parseInt</span>(<span class="string">'77'</span>,<span class="number">8</span>)</span><br><span class="line"><span class="comment">//63</span></span><br><span class="line"></span><br><span class="line"> <span class="built_in">parseInt</span>(<span class="string">'78'</span>,<span class="number">8</span>)</span><br><span class="line"><span class="comment">//7</span></span><br><span class="line"></span><br><span class="line"> <span class="built_in">parseInt</span>(<span class="string">'79'</span>,<span class="number">8</span>)</span><br><span class="line"><span class="comment">//7</span></span><br></pre></td></tr></table></figure><p>JS中默认的<code>parseInt</code>是接受两个参数的，我们这里构建一个可以接受3个参数的<code>parseInt</code>函数，从输出结果也可以看出，<code>map</code>函数是可以传入3个参数的，<code>value</code>,<code>index</code>,<code>array</code>。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> <span class="built_in">parseInt</span> = <span class="function"><span class="keyword">function</span> (<span class="params">string, radix, others</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> string + <span class="string">'-'</span> + radix + <span class="string">'-'</span> + others;</span><br><span class="line">&#125;;</span><br><span class="line">[<span class="string">'1'</span>,<span class="string">'2'</span>,<span class="string">'3'</span>].map(<span class="built_in">parseInt</span>);</span><br><span class="line"><span class="comment">//[1-0-1,2,3]</span></span><br><span class="line"><span class="comment">//[2-1-1,2,3]</span></span><br><span class="line"><span class="comment">//[3-2-1,2,3]</span></span><br></pre></td></tr></table></figure><p>那么下面这道面试题就迎刃而解了：</p><p><strong>[“1”, “2”, “3”].map(parseInt)</strong>得到什么？</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[<span class="string">"1"</span>, <span class="string">"2"</span>, <span class="string">"3"</span>].map(<span class="built_in">parseInt</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">//parseInt('1', 0);  1</span></span><br><span class="line"><span class="comment">//parseInt('2', 1);  NaN</span></span><br><span class="line"><span class="comment">//parseInt('3', 2);  NaN</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;Introduce：&lt;code&gt;parseInt&lt;/code&gt;函数可以将一个将字符串按照指定的进制转化，得到最终的计算结果&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;parseInt(string, radix)&lt;/strong&gt; 
      
    
    </summary>
    
    
      <category term="js" scheme="https://apenshar.github.io/myBlog/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>JS原型链(prototype)介绍</title>
    <link href="https://apenshar.github.io/myBlog/2018-01-27-prototype-introduce.html"/>
    <id>https://apenshar.github.io/myBlog/2018-01-27-prototype-introduce.html</id>
    <published>2018-01-27T13:06:03.000Z</published>
    <updated>2018-03-09T08:53:07.776Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p> 来自我的javascript权威指南读书笔记</p></blockquote><h2 id="必备知识点："><a href="#必备知识点：" class="headerlink" title="必备知识点："></a>必备知识点：</h2><ol><li>每一个JavaScript <strong>对象</strong> 都具有的一个属性，叫 <code>__proto__</code> 。这个属性会指向创建该对象的<code>prototype</code> 。</li><li>每个 <strong>函数</strong> 都有一个 <code>prototype</code> 属性（原型），这个属性是一个指针，指向一个对象</li><li>原型并没有属性指向实例，因为原型通过构造函数可以生成多个实例。 但是原型有属性指向<strong>构造函数</strong>，这个属性就是<code>constructor</code>。<br>每个原型都有一个<code>constructor</code>属性指向关联的构造函数</li><li>调用 <code>new</code> 构造函数的创建一个新的空对象，这个对象继承自构造函数的<code>prototype</code>属性（同第1点）</li><li>构造函数试图初始化新创建的对象，并将这个对象用作其调用上下文，因此构造函数可以使用<code>this</code>来引用这个新对象</li><li>尽管构造函数看起来像一个方法，但是它使用这个新对象作为调用上下文。也就是说，<code>new O.m()</code> 中 调用的上下文并不是O</li><li>构造函数通常不用<code>return</code> 关键字，他们通常初始化新对象，当构造函数执行完毕时，显示返回；在这情况下，构造函数的计算结果就是这个新对象的值</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">new操作符其实就是一个语法糖，可以减少代码量，在创建过程中会发生</span></span><br><span class="line"><span class="comment">        a. 创建一个新对象</span></span><br><span class="line"><span class="comment">        b. 将构造函数的作用域赋值给新对象（因此this就指向了这个对象）</span></span><br><span class="line"><span class="comment">        c. 执行构造函数中的代码（为这个新对象赋值）</span></span><br><span class="line"><span class="comment">        d. 返回这个对象</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name, age</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name; </span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line"><span class="keyword">var</span> man = <span class="keyword">new</span> Person(<span class="string">"A"</span>);</span><br><span class="line">man.__proto__ == Person.prototype <span class="comment">// true </span></span><br><span class="line">Person.prototype.constructor  ===  Person<span class="comment">// true</span></span><br></pre></td></tr></table></figure><h2 id="深入了解"><a href="#深入了解" class="headerlink" title="深入了解"></a>深入了解</h2><p>知识点8： 当读取实例的属性时，会先查找与对象关联的原型中的属性，如果没有，就去找原型的原型，一直找到最顶层。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name, age</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name; </span><br><span class="line">&#125;</span><br><span class="line">Person.prototype.age = <span class="number">18</span>;</span><br><span class="line"><span class="keyword">var</span> man = <span class="keyword">new</span> Person(<span class="string">"A"</span>);</span><br><span class="line">man.age = <span class="number">20</span>;</span><br><span class="line">man.age <span class="comment">// 20</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">delete</span> man.age  <span class="comment">// true </span></span><br><span class="line">man.age <span class="comment">// 18</span></span><br></pre></td></tr></table></figure><p>知识点9： 上面我们知道了实例的<code>__proto__</code>指向构造函数，那么构造函数也会有<code>__proto__</code>,它指向的是<code>Object.prototype</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">man.__proto__.__proto__ == <span class="built_in">Object</span>.prototype <span class="comment">// true</span></span><br></pre></td></tr></table></figure><p>知识点10： 那么<code>Object.prototype</code> 的原型呢？ 我们已经知道了对象的<code>__proto</code>会指向原型,那么再试一次好了</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Object</span>.prototype.__proto__  <span class="comment">// null 等价于下面表达式</span></span><br><span class="line">man.__proto__.__proto__.__proto__ <span class="comment">// null</span></span><br></pre></td></tr></table></figure><p>所以在查找属性的时候，我们只需要查到 Object.prototype 就可以了，再往上就是<code>null</code>了。</p><p><img src="https://upload-images.jianshu.io/upload_images/7390508-4cbe3a1b7aa0afff.png?imageMogr2/auto-orient/" alt="img"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt; 来自我的javascript权威指南读书笔记&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;必备知识点：&quot;&gt;&lt;a href=&quot;#必备知识点：&quot; class=&quot;headerlink&quot; title=&quot;必备知识点：&quot;&gt;&lt;/a&gt;必备知识点：&lt;/h2
      
    
    </summary>
    
    
      <category term="js" scheme="https://apenshar.github.io/myBlog/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>JS中的函数讲解</title>
    <link href="https://apenshar.github.io/myBlog/2018-01-27-IEF-introduce.html"/>
    <id>https://apenshar.github.io/myBlog/2018-01-27-IEF-introduce.html</id>
    <published>2018-01-27T13:06:03.000Z</published>
    <updated>2018-02-10T09:32:24.844Z</updated>
    
    <content type="html"><![CDATA[<h3 id="函数类型"><a href="#函数类型" class="headerlink" title="函数类型"></a>函数类型</h3><blockquote><p>简单来说，函数可以分为以下3类：函数声明、函数表达式、匿名函数。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//函数声明</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">setFn</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// coding   </span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//函数表达式</span></span><br><span class="line"><span class="keyword">var</span> setFn = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// coding</span></span><br><span class="line">&#125;   </span><br><span class="line"></span><br><span class="line"><span class="comment">//匿名函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// coding</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="函数差异"><a href="#函数差异" class="headerlink" title="函数差异"></a>函数差异</h3><p>函数声明与函数表达式的不同在于：</p><ol><li>函数的声明带有变量提升效果，可在当前作用域下提前调用执行</li><li><p>函数表达式无变量提升，必须等该函数执行后，方可调用。否则<strong>会报错</strong>，<strong>会报错</strong>，<strong>会报错</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">setFn();</span><br><span class="line"><span class="keyword">var</span> setFn = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// coding</span></span><br><span class="line">&#125; </span><br><span class="line"><span class="comment">// 报错</span></span><br></pre></td></tr></table></figure></li><li><p>函数表达式可直接在函数后加括号调用。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">var</span> setFn = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">2</span>)</span><br><span class="line">&#125;()</span><br><span class="line"><span class="comment">//2</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="一些疑问？"><a href="#一些疑问？" class="headerlink" title="一些疑问？"></a>一些疑问？</h3><blockquote><p>Q : 立即执行函数 <code>(function(){})()</code> 可以看出很像函数表达式的调用，但为什么要加括号呢？<br>  A: 本质上是<code>()</code> 将匿名函数转化为函数表达式。<code>var setFn = function() {}()</code> 可以理解为在匿名函数前加了 = 运算符后，将函数声明转化为函数表达式，</p></blockquote><p>我们可以拿！，+，-，（）等运算符来测试。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">!<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">1</span>)</span><br><span class="line">&#125;()</span><br><span class="line"><span class="comment">// 1</span></span><br><span class="line">    </span><br><span class="line">+<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">2</span>)</span><br><span class="line">&#125;()</span><br><span class="line"><span class="comment">// 2</span></span><br><span class="line">    </span><br><span class="line">-<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">3</span>)</span><br><span class="line">&#125;()</span><br><span class="line"><span class="comment">// 3</span></span><br><span class="line">    </span><br><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">4</span>)</span><br><span class="line">&#125;)()</span><br><span class="line"><span class="comment">// 4</span></span><br></pre></td></tr></table></figure></p><p><strong> So , 加运算符可将函数声明转化为函数表达式，而之所以使用括号，是因为括号相对其他运算符会更安全。</strong></p><blockquote><p>传参一致性</p></blockquote><p>立即执行函数与正常函数传参一致。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params">a, b</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(a + b);</span><br><span class="line">&#125;)(<span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line"><span class="comment">// 3</span></span><br></pre></td></tr></table></figure></p><p><code>(function(){}())</code>这样写的好处是在内部定义的变量不会跟外部的变量有冲突，达到保护内部变量的作用，也不会污染全局变量。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;函数类型&quot;&gt;&lt;a href=&quot;#函数类型&quot; class=&quot;headerlink&quot; title=&quot;函数类型&quot;&gt;&lt;/a&gt;函数类型&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;简单来说，函数可以分为以下3类：函数声明、函数表达式、匿名函数。&lt;/p&gt;
&lt;/blockquote
      
    
    </summary>
    
    
      <category term="js" scheme="https://apenshar.github.io/myBlog/tags/js/"/>
    
      <category term="function" scheme="https://apenshar.github.io/myBlog/tags/function/"/>
    
  </entry>
  
  <entry>
    <title>canvas绘图入门</title>
    <link href="https://apenshar.github.io/myBlog/2018-01-27-canvas-introduce.html"/>
    <id>https://apenshar.github.io/myBlog/2018-01-27-canvas-introduce.html</id>
    <published>2018-01-27T13:00:42.000Z</published>
    <updated>2018-02-10T09:29:28.282Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>一篇言简意赅，让你快速入门canvas的技术贴</p></blockquote><h4 id="基本步骤如下"><a href="#基本步骤如下" class="headerlink" title="基本步骤如下"></a>基本步骤如下</h4><ol><li>拿到canvas标签  </li><li><strong>getContext获得canvas的上下文 把画笔的功能封装到ctx</strong></li><li>moveTo把画笔移动到(100,100)不设置moveTo 就没有lineTo</li><li>lineTo从点(100,100)到(200,100) ，再到(200,100)（指定路径，不画线） </li><li>stroke 开始画线</li><li>fill 内部填充</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> canvas= <span class="built_in">document</span>.getElementById(<span class="string">'canvas'</span>);</span><br><span class="line"><span class="keyword">var</span> ctx = canvas.getContext(<span class="string">'2d'</span>)</span><br><span class="line">ctx.moveTo(<span class="number">100</span>,<span class="number">100</span>) </span><br><span class="line">ctx.lineTo(<span class="number">200</span>,<span class="number">100</span>)</span><br><span class="line">ctx.lineTo(<span class="number">100</span>,<span class="number">200</span>)</span><br><span class="line">ctx.closePath ()<span class="comment">//闭合路径 直接补全</span></span><br><span class="line">ctx.strokeStyle=<span class="string">"rgba(25,10,25,0.6)"</span> </span><br><span class="line">ctx.stroke()<span class="comment">//开始画线 顺序不能换，先设置样式</span></span><br><span class="line">ctx.fillStyle= <span class="string">'red'</span></span><br><span class="line">ctx.fill()</span><br></pre></td></tr></table></figure><h4 id="进阶篇"><a href="#进阶篇" class="headerlink" title="进阶篇"></a>进阶篇</h4><p><strong>注意点</strong> ：不要给canva对象在css中宽高，直接在标签内设置内联样式或者js设置动态宽高。</p><h6 id="画60-60网格"><a href="#画60-60网格" class="headerlink" title="画60*60网格"></a>画60*60网格</h6><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">canvas.width=<span class="number">600</span>;</span><br><span class="line">canvas.height=<span class="number">600</span>;</span><br><span class="line"><span class="keyword">var</span> rectH=<span class="number">10</span>;<span class="keyword">var</span> rectW=<span class="number">10</span>;</span><br><span class="line">ctx.lineWidth =<span class="number">0.5</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i =<span class="number">0</span>;i&lt;canvas.width/rectH;i++)&#123;</span><br><span class="line">  <span class="comment">//画横线</span></span><br><span class="line">  ctx.moveTo(<span class="number">0</span>,i*rectH);</span><br><span class="line">  ctx.lineTo(canvas.width,i*rectH);</span><br><span class="line">  <span class="comment">//画竖线</span></span><br><span class="line">  ctx.moveTo(i*rectH,<span class="number">0</span>);</span><br><span class="line">  ctx.lineTo(i*rectH,canvas.height)</span><br><span class="line">&#125;</span><br><span class="line">ctx.stroke()</span><br></pre></td></tr></table></figure><h6 id="画多边形"><a href="#画多边形" class="headerlink" title="画多边形"></a>画多边形</h6><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ctx.rect(x,y,width,height);</span><br><span class="line">ctx.stroke();</span><br><span class="line">ctx.fillStyle=<span class="string">'red'</span>;</span><br><span class="line">ctx.fill();</span><br></pre></td></tr></table></figure><h6 id="画弧"><a href="#画弧" class="headerlink" title="画弧"></a>画弧</h6><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ctx.arc(x,y,r,startAngle,endAngle,<span class="literal">false</span>)<span class="comment">//false=顺时针</span></span><br></pre></td></tr></table></figure><h6 id="绘制图片"><a href="#绘制图片" class="headerlink" title="绘制图片"></a>绘制图片</h6><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ctx.drawImage()</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;一篇言简意赅，让你快速入门canvas的技术贴&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&quot;基本步骤如下&quot;&gt;&lt;a href=&quot;#基本步骤如下&quot; class=&quot;headerlink&quot; title=&quot;基本步骤如下&quot;&gt;&lt;/a&gt;基本步骤如下&lt;/h4
      
    
    </summary>
    
    
      <category term="js" scheme="https://apenshar.github.io/myBlog/tags/js/"/>
    
      <category term="canvas" scheme="https://apenshar.github.io/myBlog/tags/canvas/"/>
    
  </entry>
  
  <entry>
    <title>JS中的class进阶</title>
    <link href="https://apenshar.github.io/myBlog/2018-01-27-class-advance.html"/>
    <id>https://apenshar.github.io/myBlog/2018-01-27-class-advance.html</id>
    <published>2018-01-27T11:08:28.000Z</published>
    <updated>2018-03-09T08:53:33.871Z</updated>
    
    <content type="html"><![CDATA[<h4 id="如何利用class-继承Date对象"><a href="#如何利用class-继承Date对象" class="headerlink" title="如何利用class 继承Date对象"></a>如何利用class 继承Date对象</h4><p>要求如下：</p><ol><li>继承自<code>Date</code>，拥有Date对象的所有属性和方法 </li></ol><ol><li>可以自由拓展方法，比如说增加<code>getCentury</code></li></ol><blockquote><p>ES6</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * @authors apenshar</span></span><br><span class="line"><span class="comment"> * @date    2018-01-27 15:24:00</span></span><br><span class="line"><span class="comment"> * @title  class类的继承</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">myDate</span> <span class="keyword">extends</span> <span class="title">Date</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>() &#123;</span><br><span class="line">        <span class="keyword">super</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    getCentury() &#123; <span class="keyword">return</span> <span class="built_in">Math</span>.ceil(((<span class="keyword">this</span>.getFullYear() / <span class="number">100</span>))) &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> my = <span class="keyword">new</span> myDate;</span><br><span class="line">my.getCentury() <span class="comment">// 21</span></span><br></pre></td></tr></table></figure><blockquote><p>暴力混合 假继承</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * @authors apenshar</span></span><br><span class="line"><span class="comment"> * @date    2018-01-27 15:34:52</span></span><br><span class="line"><span class="comment"> * @title   暴力混合方法</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">myDate</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> _d = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">init</span>(<span class="params">that</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> methods = [<span class="string">'getDate'</span>,<span class="string">'getTime'</span>,<span class="string">'getDay'</span>,<span class="string">'getFullYear'</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; methods.length; i++) &#123;</span><br><span class="line">            that[methods[i]] = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">             <span class="keyword">return</span> _d[methods[i]]()</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    init(<span class="keyword">this</span>);</span><br><span class="line">    <span class="keyword">this</span>.getCentury = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span>  <span class="built_in">Math</span>.ceil(((<span class="keyword">this</span>.getFullYear() / <span class="number">100</span>))) &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> tt = <span class="keyword">new</span> mydate;</span><br><span class="line">tt.getCentury() <span class="comment">//21</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;如何利用class-继承Date对象&quot;&gt;&lt;a href=&quot;#如何利用class-继承Date对象&quot; class=&quot;headerlink&quot; title=&quot;如何利用class 继承Date对象&quot;&gt;&lt;/a&gt;如何利用class 继承Date对象&lt;/h4&gt;&lt;p&gt;要求如下：&lt;
      
    
    </summary>
    
    
      <category term="js" scheme="https://apenshar.github.io/myBlog/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>JS中的class入门</title>
    <link href="https://apenshar.github.io/myBlog/2018-01-27-class-introduce.html"/>
    <id>https://apenshar.github.io/myBlog/2018-01-27-class-introduce.html</id>
    <published>2018-01-27T11:03:49.000Z</published>
    <updated>2018-03-09T08:53:53.857Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>本章将会简单介绍JS中的class,希望这篇短小精悍的文章能给你一些启迪！</p></blockquote><ol><li>类的声明<strong>不会前置</strong>，<strong>不会前置</strong>，<strong>不会前置</strong>，这点很重要。所以必须先声明再使用，否则报错</li><li>类有3种方法<ul><li>构造方法</li><li>静态方法  实例不可调用，会出错</li><li>原型方法 可继承</li></ul></li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Car</span></span>&#123;</span><br><span class="line">   <span class="comment">//构造方法</span></span><br><span class="line">  <span class="keyword">constructor</span>(brand,money)&#123;</span><br><span class="line">    <span class="keyword">this</span>.brand = brand;</span><br><span class="line">    <span class="keyword">this</span>.money  =money; </span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//静态方法  实例不可调用</span></span><br><span class="line">  <span class="keyword">static</span> count()&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"I'm static methid"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//原型方法</span></span><br><span class="line">  getInfo()&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;<span class="keyword">this</span>.brand&#125;</span> costs <span class="subst">$&#123;<span class="keyword">this</span>.money&#125;</span>`</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> auto = <span class="keyword">new</span> Car(brand=<span class="string">"BMW"</span>,money=<span class="string">"$5554"</span>);</span><br><span class="line">auto.getInfo(); <span class="comment">//BMW costs $5554</span></span><br><span class="line">auto.count()  <span class="comment">//Uncaught TypeError: auto.count is not a function</span></span><br><span class="line">Car.count() <span class="comment">//I'm static methid</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;本章将会简单介绍JS中的class,希望这篇短小精悍的文章能给你一些启迪！&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ol&gt;
&lt;li&gt;类的声明&lt;strong&gt;不会前置&lt;/strong&gt;，&lt;strong&gt;不会前置&lt;/strong&gt;，&lt;strong&gt;不会前
      
    
    </summary>
    
    
      <category term="js" scheme="https://apenshar.github.io/myBlog/tags/js/"/>
    
  </entry>
  
</feed>
